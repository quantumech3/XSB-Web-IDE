// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof test !== 'undefined' ? test : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'test.data';
    var REMOTE_PACKAGE_BASE = 'test.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'Test', true, true);
Module['FS_createPath']('/Test', '.vscode', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_test.data');

    };
    Module['addRunDependency']('datafile_test.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"start": 0, "audio": 0, "end": 13752, "filename": "/Test/a.out"}, {"start": 13752, "audio": 0, "end": 13777, "filename": "/Test/text.txt"}, {"start": 13777, "audio": 0, "end": 14230, "filename": "/Test/main.cpp"}, {"start": 14230, "audio": 0, "end": 14987, "filename": "/Test/.vscode/settings.json"}], "remote_package_size": 14987, "package_uuid": "48cbb73d-30d8-4981-9819-a77b6d78d316"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
// In the future, we may get a WebAssembly.Function constructor. Until then,
// we create a wasm module that takes the JS function as an import with a given
// signature, and re-exports that as a wasm function.
function convertJsFunctionToWasm(func, sig) {
  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    e: {
      f: func
    }
  });
  var wrappedFunc = instance.exports.f;
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


if (typeof WebAssembly !== 'object') {
  err('no native wasm support detected');
}


/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 1024,
    STACK_BASE = 23664,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5266544,
    DYNAMIC_BASE = 5266544,
    DYNAMICTOP_PTR = 23408;



function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    wasmMemory = new WebAssembly.Memory({ 'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = wasmMemory.buffer;
  } else
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'test.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (Module['wasmBinary']) {
      return new Uint8Array(Module['wasmBinary']);
    }
    if (Module['readBinary']) {
      return Module['readBinary'](wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm(env) {
  // prepare imports
  var info = {
    'env': env
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  addRunDependency('wasm-instantiate');

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }
  function instantiateArrayBuffer(receiver) {
    getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }
  // Prefer streaming instantiation if available.
  if (!Module['wasmBinary'] &&
      typeof WebAssembly.instantiateStreaming === 'function' &&
      !isDataURI(wasmBinaryFile) &&
      typeof fetch === 'function') {
    WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
      .then(receiveInstantiatedSource, function(reason) {
        // We expect the most common failure cause to be a bad MIME type for the binary,
        // in which case falling back to ArrayBuffer instantiation should work.
        err('wasm streaming compile failed: ' + reason);
        err('falling back to ArrayBuffer instantiation');
        instantiateArrayBuffer(receiveInstantiatedSource);
      });
  } else {
    instantiateArrayBuffer(receiveInstantiatedSource);
  }
  return {}; // no exports yet; we'll fill them in later
}

// Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
// the wasm module at that time, and it receives imports and provides exports and so forth, the app
// doesn't need to care that it is wasm or asm.js.

Module['asm'] = function(global, env, providedBuffer) {
  // memory was already allocated (so js could use the buffer)
  env['memory'] = wasmMemory
  ;
  // import table
  env['table'] = wasmTable = new WebAssembly.Table({
    'initial': 501,
    'maximum': 501,
    'element': 'anyfunc'
  });
  env['__memory_base'] = 1024; // tell the memory segments where to place themselves
  env['__table_base'] = 0; // table starts at 0 by default (even in dynamic linking, for the main module)

  var exports = createWasm(env);
  return exports;
};

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 22640;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });








/* no memory initializer */
var tempDoublePtr = 23648

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(1);
      return -1;
    }

  
    

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=23424;
  
  var _stdout=23440;
  
  var _stderr=23456;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function () {
        SYSCALLS.get();
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

   

  function _pthread_cond_wait() { return 0; }

   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


var asmGlobalArg = {}

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter,
  "___cxa_allocate_exception": ___cxa_allocate_exception,
  "___cxa_begin_catch": ___cxa_begin_catch,
  "___cxa_find_matching_catch": ___cxa_find_matching_catch,
  "___cxa_free_exception": ___cxa_free_exception,
  "___cxa_throw": ___cxa_throw,
  "___cxa_uncaught_exception": ___cxa_uncaught_exception,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___lock": ___lock,
  "___map_file": ___map_file,
  "___resumeException": ___resumeException,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___syscall91": ___syscall91,
  "___unlock": ___unlock,
  "__addDays": __addDays,
  "__arraySum": __arraySum,
  "__isLeapYear": __isLeapYear,
  "_abort": _abort,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_getenv": _getenv,
  "_llvm_cttz_i32": _llvm_cttz_i32,
  "_llvm_stackrestore": _llvm_stackrestore,
  "_llvm_stacksave": _llvm_stacksave,
  "_pthread_cond_wait": _pthread_cond_wait,
  "_strftime": _strftime,
  "_strftime_l": _strftime_l,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR,
  "EMTSTACKTOP": EMTSTACKTOP,
  "EMT_STACK_MAX": EMT_STACK_MAX,
  "eb": eb
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var tempDoublePtr=env.tempDoublePtr|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var EMTSTACKTOP=env.EMTSTACKTOP|0;
  var EMT_STACK_MAX=env.EMT_STACK_MAX|0;
  var eb=env.eb|0;
var __THREW__ = 0;
var threwValue = 0;
var setjmpId = 0;
var tempInt = 0;
var tempBigInt = 0;
var tempBigIntS = 0;
var tempValue = 0;
var tempDouble = 0.0;
var nan = global.NaN;
var inf = global.Infinity;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortStackOverflowEmterpreter=env.abortStackOverflowEmterpreter;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_throw=env.___cxa_throw;
  var ___cxa_uncaught_exception=env.___cxa_uncaught_exception;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __isLeapYear=env.__isLeapYear;
  var _abort=env._abort;
  var _emscripten_get_heap_size=env._emscripten_get_heap_size;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_resize_heap=env._emscripten_resize_heap;
  var _getenv=env._getenv;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var STACKTOP = 23664;
  var STACK_MAX = 5266544;
  var tempFloat = Math_fround(0);
  var asyncState = 0;
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS
function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15;
 do if (i1 >>> 0 < 245) {
  i10 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i1 = i10 >>> 3;
  i12 = HEAP32[5095] | 0;
  i2 = i12 >>> i1;
  if (i2 & 3 | 0) {
   i1 = (i2 & 1 ^ 1) + i1 | 0;
   i2 = 20420 + (i1 << 1 << 2) | 0;
   i3 = i2 + 8 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   i5 = i4 + 8 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i6 | 0) == (i2 | 0)) HEAP32[5095] = i12 & ~(1 << i1); else {
    HEAP32[i6 + 12 >> 2] = i2;
    HEAP32[i3 >> 2] = i6;
   }
   i14 = i1 << 3;
   HEAP32[i4 + 4 >> 2] = i14 | 3;
   i14 = i4 + i14 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
   i14 = i5;
   STACKTOP = i15;
   return i14 | 0;
  }
  i11 = HEAP32[5097] | 0;
  if (i10 >>> 0 > i11 >>> 0) {
   if (i2 | 0) {
    i8 = 2 << i1;
    i1 = i2 << i1 & (i8 | 0 - i8);
    i1 = (i1 & 0 - i1) + -1 | 0;
    i8 = i1 >>> 12 & 16;
    i1 = i1 >>> i8;
    i3 = i1 >>> 5 & 8;
    i1 = i1 >>> i3;
    i6 = i1 >>> 2 & 4;
    i1 = i1 >>> i6;
    i2 = i1 >>> 1 & 2;
    i1 = i1 >>> i2;
    i4 = i1 >>> 1 & 1;
    i4 = (i3 | i8 | i6 | i2 | i4) + (i1 >>> i4) | 0;
    i1 = 20420 + (i4 << 1 << 2) | 0;
    i2 = i1 + 8 | 0;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 + 8 | 0;
    i3 = HEAP32[i8 >> 2] | 0;
    if ((i3 | 0) == (i1 | 0)) {
     i2 = i12 & ~(1 << i4);
     HEAP32[5095] = i2;
    } else {
     HEAP32[i3 + 12 >> 2] = i1;
     HEAP32[i2 >> 2] = i3;
     i2 = i12;
    }
    i14 = i4 << 3;
    i7 = i14 - i10 | 0;
    HEAP32[i6 + 4 >> 2] = i10 | 3;
    i5 = i6 + i10 | 0;
    HEAP32[i5 + 4 >> 2] = i7 | 1;
    HEAP32[i6 + i14 >> 2] = i7;
    if (i11 | 0) {
     i4 = HEAP32[5100] | 0;
     i1 = i11 >>> 3;
     i3 = 20420 + (i1 << 1 << 2) | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[5095] = i2 | i1;
      i1 = i3;
      i2 = i3 + 8 | 0;
     } else {
      i2 = i3 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i4;
     HEAP32[i1 + 12 >> 2] = i4;
     HEAP32[i4 + 8 >> 2] = i1;
     HEAP32[i4 + 12 >> 2] = i3;
    }
    HEAP32[5097] = i7;
    HEAP32[5100] = i5;
    i14 = i8;
    STACKTOP = i15;
    return i14 | 0;
   }
   i6 = HEAP32[5096] | 0;
   if (i6) {
    i2 = (i6 & 0 - i6) + -1 | 0;
    i5 = i2 >>> 12 & 16;
    i2 = i2 >>> i5;
    i4 = i2 >>> 5 & 8;
    i2 = i2 >>> i4;
    i7 = i2 >>> 2 & 4;
    i2 = i2 >>> i7;
    i8 = i2 >>> 1 & 2;
    i2 = i2 >>> i8;
    i9 = i2 >>> 1 & 1;
    i9 = HEAP32[20684 + ((i4 | i5 | i7 | i8 | i9) + (i2 >>> i9) << 2) >> 2] | 0;
    i2 = i9;
    i8 = i9;
    i9 = (HEAP32[i9 + 4 >> 2] & -8) - i10 | 0;
    while (1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i2 + 20 >> 2] | 0;
      if (!i1) break;
     }
     i7 = (HEAP32[i1 + 4 >> 2] & -8) - i10 | 0;
     i5 = i7 >>> 0 < i9 >>> 0;
     i2 = i1;
     i8 = i5 ? i1 : i8;
     i9 = i5 ? i7 : i9;
    }
    i7 = i8 + i10 | 0;
    if (i7 >>> 0 > i8 >>> 0) {
     i5 = HEAP32[i8 + 24 >> 2] | 0;
     i1 = HEAP32[i8 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i8 | 0)) {
      i2 = i8 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i8 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i3 = 0;
        break;
       }
      }
      while (1) {
       i4 = i1 + 20 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (!i3) {
        i4 = i1 + 16 | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) break; else {
         i1 = i3;
         i2 = i4;
        }
       } else {
        i1 = i3;
        i2 = i4;
       }
      }
      HEAP32[i2 >> 2] = 0;
      i3 = i1;
     } else {
      i3 = HEAP32[i8 + 8 >> 2] | 0;
      HEAP32[i3 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i3;
      i3 = i1;
     } while (0);
     do if (i5 | 0) {
      i1 = HEAP32[i8 + 28 >> 2] | 0;
      i2 = 20684 + (i1 << 2) | 0;
      if ((i8 | 0) == (HEAP32[i2 >> 2] | 0)) {
       HEAP32[i2 >> 2] = i3;
       if (!i3) {
        HEAP32[5096] = i6 & ~(1 << i1);
        break;
       }
      } else {
       i14 = i5 + 16 | 0;
       HEAP32[((HEAP32[i14 >> 2] | 0) == (i8 | 0) ? i14 : i5 + 20 | 0) >> 2] = i3;
       if (!i3) break;
      }
      HEAP32[i3 + 24 >> 2] = i5;
      i1 = HEAP32[i8 + 16 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
      i1 = HEAP32[i8 + 20 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
     } while (0);
     if (i9 >>> 0 < 16) {
      i14 = i9 + i10 | 0;
      HEAP32[i8 + 4 >> 2] = i14 | 3;
      i14 = i8 + i14 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i8 + 4 >> 2] = i10 | 3;
      HEAP32[i7 + 4 >> 2] = i9 | 1;
      HEAP32[i7 + i9 >> 2] = i9;
      if (i11 | 0) {
       i4 = HEAP32[5100] | 0;
       i1 = i11 >>> 3;
       i3 = 20420 + (i1 << 1 << 2) | 0;
       i1 = 1 << i1;
       if (!(i1 & i12)) {
        HEAP32[5095] = i1 | i12;
        i1 = i3;
        i2 = i3 + 8 | 0;
       } else {
        i2 = i3 + 8 | 0;
        i1 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i2 >> 2] = i4;
       HEAP32[i1 + 12 >> 2] = i4;
       HEAP32[i4 + 8 >> 2] = i1;
       HEAP32[i4 + 12 >> 2] = i3;
      }
      HEAP32[5097] = i9;
      HEAP32[5100] = i7;
     }
     i14 = i8 + 8 | 0;
     STACKTOP = i15;
     return i14 | 0;
    }
   }
  }
 } else if (i1 >>> 0 > 4294967231) i10 = -1; else {
  i1 = i1 + 11 | 0;
  i10 = i1 & -8;
  i9 = HEAP32[5096] | 0;
  if (i9) {
   i3 = 0 - i10 | 0;
   i1 = i1 >>> 8;
   if (!i1) i7 = 0; else if (i10 >>> 0 > 16777215) i7 = 31; else {
    i12 = (i1 + 1048320 | 0) >>> 16 & 8;
    i14 = i1 << i12;
    i11 = (i14 + 520192 | 0) >>> 16 & 4;
    i14 = i14 << i11;
    i7 = (i14 + 245760 | 0) >>> 16 & 2;
    i7 = 14 - (i11 | i12 | i7) + (i14 << i7 >>> 15) | 0;
    i7 = i10 >>> (i7 + 7 | 0) & 1 | i7 << 1;
   }
   i2 = HEAP32[20684 + (i7 << 2) >> 2] | 0;
   L79 : do if (!i2) {
    i2 = 0;
    i1 = 0;
    i14 = 61;
   } else {
    i1 = 0;
    i6 = i10 << ((i7 | 0) == 31 ? 0 : 25 - (i7 >>> 1) | 0);
    i4 = 0;
    while (1) {
     i5 = (HEAP32[i2 + 4 >> 2] & -8) - i10 | 0;
     if (i5 >>> 0 < i3 >>> 0) if (!i5) {
      i1 = i2;
      i3 = 0;
      i14 = 65;
      break L79;
     } else {
      i1 = i2;
      i3 = i5;
     }
     i14 = HEAP32[i2 + 20 >> 2] | 0;
     i2 = HEAP32[i2 + 16 + (i6 >>> 31 << 2) >> 2] | 0;
     i4 = (i14 | 0) == 0 | (i14 | 0) == (i2 | 0) ? i4 : i14;
     if (!i2) {
      i2 = i4;
      i14 = 61;
      break;
     } else i6 = i6 << 1;
    }
   } while (0);
   if ((i14 | 0) == 61) {
    if ((i2 | 0) == 0 & (i1 | 0) == 0) {
     i1 = 2 << i7;
     i1 = (i1 | 0 - i1) & i9;
     if (!i1) break;
     i12 = (i1 & 0 - i1) + -1 | 0;
     i7 = i12 >>> 12 & 16;
     i12 = i12 >>> i7;
     i6 = i12 >>> 5 & 8;
     i12 = i12 >>> i6;
     i8 = i12 >>> 2 & 4;
     i12 = i12 >>> i8;
     i11 = i12 >>> 1 & 2;
     i12 = i12 >>> i11;
     i2 = i12 >>> 1 & 1;
     i1 = 0;
     i2 = HEAP32[20684 + ((i6 | i7 | i8 | i11 | i2) + (i12 >>> i2) << 2) >> 2] | 0;
    }
    if (!i2) {
     i8 = i1;
     i6 = i3;
    } else i14 = 65;
   }
   if ((i14 | 0) == 65) {
    i4 = i2;
    while (1) {
     i12 = (HEAP32[i4 + 4 >> 2] & -8) - i10 | 0;
     i2 = i12 >>> 0 < i3 >>> 0;
     i3 = i2 ? i12 : i3;
     i1 = i2 ? i4 : i1;
     i2 = HEAP32[i4 + 16 >> 2] | 0;
     if (!i2) i2 = HEAP32[i4 + 20 >> 2] | 0;
     if (!i2) {
      i8 = i1;
      i6 = i3;
      break;
     } else i4 = i2;
    }
   }
   if (i8) if (i6 >>> 0 < ((HEAP32[5097] | 0) - i10 | 0) >>> 0) {
    i7 = i8 + i10 | 0;
    if (i7 >>> 0 > i8 >>> 0) {
     i5 = HEAP32[i8 + 24 >> 2] | 0;
     i1 = HEAP32[i8 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i8 | 0)) {
      i2 = i8 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i8 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        break;
       }
      }
      while (1) {
       i4 = i1 + 20 | 0;
       i3 = HEAP32[i4 >> 2] | 0;
       if (!i3) {
        i4 = i1 + 16 | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) break; else {
         i1 = i3;
         i2 = i4;
        }
       } else {
        i1 = i3;
        i2 = i4;
       }
      }
      HEAP32[i2 >> 2] = 0;
     } else {
      i14 = HEAP32[i8 + 8 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i14;
     } while (0);
     do if (!i5) i4 = i9; else {
      i2 = HEAP32[i8 + 28 >> 2] | 0;
      i3 = 20684 + (i2 << 2) | 0;
      if ((i8 | 0) == (HEAP32[i3 >> 2] | 0)) {
       HEAP32[i3 >> 2] = i1;
       if (!i1) {
        i4 = i9 & ~(1 << i2);
        HEAP32[5096] = i4;
        break;
       }
      } else {
       i14 = i5 + 16 | 0;
       HEAP32[((HEAP32[i14 >> 2] | 0) == (i8 | 0) ? i14 : i5 + 20 | 0) >> 2] = i1;
       if (!i1) {
        i4 = i9;
        break;
       }
      }
      HEAP32[i1 + 24 >> 2] = i5;
      i2 = HEAP32[i8 + 16 >> 2] | 0;
      if (i2 | 0) {
       HEAP32[i1 + 16 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i1;
      }
      i2 = HEAP32[i8 + 20 >> 2] | 0;
      if (!i2) i4 = i9; else {
       HEAP32[i1 + 20 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i1;
       i4 = i9;
      }
     } while (0);
     L128 : do if (i6 >>> 0 < 16) {
      i14 = i6 + i10 | 0;
      HEAP32[i8 + 4 >> 2] = i14 | 3;
      i14 = i8 + i14 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i8 + 4 >> 2] = i10 | 3;
      HEAP32[i7 + 4 >> 2] = i6 | 1;
      HEAP32[i7 + i6 >> 2] = i6;
      i1 = i6 >>> 3;
      if (i6 >>> 0 < 256) {
       i3 = 20420 + (i1 << 1 << 2) | 0;
       i2 = HEAP32[5095] | 0;
       i1 = 1 << i1;
       if (!(i2 & i1)) {
        HEAP32[5095] = i2 | i1;
        i1 = i3;
        i2 = i3 + 8 | 0;
       } else {
        i2 = i3 + 8 | 0;
        i1 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i2 >> 2] = i7;
       HEAP32[i1 + 12 >> 2] = i7;
       HEAP32[i7 + 8 >> 2] = i1;
       HEAP32[i7 + 12 >> 2] = i3;
       break;
      }
      i1 = i6 >>> 8;
      if (!i1) i3 = 0; else if (i6 >>> 0 > 16777215) i3 = 31; else {
       i13 = (i1 + 1048320 | 0) >>> 16 & 8;
       i14 = i1 << i13;
       i12 = (i14 + 520192 | 0) >>> 16 & 4;
       i14 = i14 << i12;
       i3 = (i14 + 245760 | 0) >>> 16 & 2;
       i3 = 14 - (i12 | i13 | i3) + (i14 << i3 >>> 15) | 0;
       i3 = i6 >>> (i3 + 7 | 0) & 1 | i3 << 1;
      }
      i1 = 20684 + (i3 << 2) | 0;
      HEAP32[i7 + 28 >> 2] = i3;
      i2 = i7 + 16 | 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 >> 2] = 0;
      i2 = 1 << i3;
      if (!(i4 & i2)) {
       HEAP32[5096] = i4 | i2;
       HEAP32[i1 >> 2] = i7;
       HEAP32[i7 + 24 >> 2] = i1;
       HEAP32[i7 + 12 >> 2] = i7;
       HEAP32[i7 + 8 >> 2] = i7;
       break;
      }
      i1 = HEAP32[i1 >> 2] | 0;
      L145 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i6 | 0)) {
       i4 = i6 << ((i3 | 0) == 31 ? 0 : 25 - (i3 >>> 1) | 0);
       while (1) {
        i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) break;
        if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
         i1 = i2;
         break L145;
        } else {
         i4 = i4 << 1;
         i1 = i2;
        }
       }
       HEAP32[i3 >> 2] = i7;
       HEAP32[i7 + 24 >> 2] = i1;
       HEAP32[i7 + 12 >> 2] = i7;
       HEAP32[i7 + 8 >> 2] = i7;
       break L128;
      } while (0);
      i13 = i1 + 8 | 0;
      i14 = HEAP32[i13 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i7;
      HEAP32[i13 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i14;
      HEAP32[i7 + 12 >> 2] = i1;
      HEAP32[i7 + 24 >> 2] = 0;
     } while (0);
     i14 = i8 + 8 | 0;
     STACKTOP = i15;
     return i14 | 0;
    }
   }
  }
 } while (0);
 i3 = HEAP32[5097] | 0;
 if (i3 >>> 0 >= i10 >>> 0) {
  i1 = i3 - i10 | 0;
  i2 = HEAP32[5100] | 0;
  if (i1 >>> 0 > 15) {
   i14 = i2 + i10 | 0;
   HEAP32[5100] = i14;
   HEAP32[5097] = i1;
   HEAP32[i14 + 4 >> 2] = i1 | 1;
   HEAP32[i2 + i3 >> 2] = i1;
   HEAP32[i2 + 4 >> 2] = i10 | 3;
  } else {
   HEAP32[5097] = 0;
   HEAP32[5100] = 0;
   HEAP32[i2 + 4 >> 2] = i3 | 3;
   i14 = i2 + i3 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  }
  i14 = i2 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i6 = HEAP32[5098] | 0;
 if (i6 >>> 0 > i10 >>> 0) {
  i12 = i6 - i10 | 0;
  HEAP32[5098] = i12;
  i14 = HEAP32[5101] | 0;
  i13 = i14 + i10 | 0;
  HEAP32[5101] = i13;
  HEAP32[i13 + 4 >> 2] = i12 | 1;
  HEAP32[i14 + 4 >> 2] = i10 | 3;
  i14 = i14 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!(HEAP32[5213] | 0)) {
  HEAP32[5215] = 4096;
  HEAP32[5214] = 4096;
  HEAP32[5216] = -1;
  HEAP32[5217] = -1;
  HEAP32[5218] = 0;
  HEAP32[5206] = 0;
  HEAP32[5213] = i13 & -16 ^ 1431655768;
  i1 = 4096;
 } else i1 = HEAP32[5215] | 0;
 i7 = i10 + 48 | 0;
 i8 = i10 + 47 | 0;
 i5 = i1 + i8 | 0;
 i4 = 0 - i1 | 0;
 i9 = i5 & i4;
 if (i9 >>> 0 <= i10 >>> 0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[5205] | 0;
 if (i1 | 0) {
  i12 = HEAP32[5203] | 0;
  i13 = i12 + i9 | 0;
  if (i13 >>> 0 <= i12 >>> 0 | i13 >>> 0 > i1 >>> 0) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 L178 : do if (!(HEAP32[5206] & 4)) {
  i2 = HEAP32[5101] | 0;
  L180 : do if (!i2) i14 = 128; else {
   i3 = 20828;
   while (1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (i1 >>> 0 <= i2 >>> 0) if ((i1 + (HEAP32[i3 + 4 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) break;
    i1 = HEAP32[i3 + 8 >> 2] | 0;
    if (!i1) {
     i14 = 128;
     break L180;
    } else i3 = i1;
   }
   i1 = i5 - i6 & i4;
   if (i1 >>> 0 < 2147483647) {
    i4 = _sbrk(i1 | 0) | 0;
    if ((i4 | 0) == ((HEAP32[i3 >> 2] | 0) + (HEAP32[i3 + 4 >> 2] | 0) | 0)) {
     if ((i4 | 0) != (-1 | 0)) {
      i14 = 145;
      break L178;
     }
    } else i14 = 136;
   } else i1 = 0;
  } while (0);
  do if ((i14 | 0) == 128) {
   i4 = _sbrk(0) | 0;
   if ((i4 | 0) == (-1 | 0)) i1 = 0; else {
    i1 = i4;
    i2 = HEAP32[5214] | 0;
    i3 = i2 + -1 | 0;
    i1 = ((i3 & i1 | 0) == 0 ? 0 : (i3 + i1 & 0 - i2) - i1 | 0) + i9 | 0;
    i2 = HEAP32[5203] | 0;
    i3 = i1 + i2 | 0;
    if (i1 >>> 0 > i10 >>> 0 & i1 >>> 0 < 2147483647) {
     i5 = HEAP32[5205] | 0;
     if (i5 | 0) if (i3 >>> 0 <= i2 >>> 0 | i3 >>> 0 > i5 >>> 0) {
      i1 = 0;
      break;
     }
     i2 = _sbrk(i1 | 0) | 0;
     if ((i2 | 0) == (i4 | 0)) {
      i14 = 145;
      break L178;
     } else {
      i4 = i2;
      i14 = 136;
     }
    } else i1 = 0;
   }
  } while (0);
  do if ((i14 | 0) == 136) {
   i3 = 0 - i1 | 0;
   if (!(i7 >>> 0 > i1 >>> 0 & (i1 >>> 0 < 2147483647 & (i4 | 0) != (-1 | 0)))) if ((i4 | 0) == (-1 | 0)) {
    i1 = 0;
    break;
   } else {
    i14 = 145;
    break L178;
   }
   i2 = HEAP32[5215] | 0;
   i2 = i8 - i1 + i2 & 0 - i2;
   if (i2 >>> 0 >= 2147483647) {
    i14 = 145;
    break L178;
   }
   if ((_sbrk(i2 | 0) | 0) == (-1 | 0)) {
    _sbrk(i3 | 0) | 0;
    i1 = 0;
    break;
   } else {
    i1 = i2 + i1 | 0;
    i14 = 145;
    break L178;
   }
  } while (0);
  HEAP32[5206] = HEAP32[5206] | 4;
  i14 = 143;
 } else {
  i1 = 0;
  i14 = 143;
 } while (0);
 if ((i14 | 0) == 143) if (i9 >>> 0 < 2147483647) {
  i4 = _sbrk(i9 | 0) | 0;
  i13 = _sbrk(0) | 0;
  i2 = i13 - i4 | 0;
  i3 = i2 >>> 0 > (i10 + 40 | 0) >>> 0;
  if (!((i4 | 0) == (-1 | 0) | i3 ^ 1 | i4 >>> 0 < i13 >>> 0 & ((i4 | 0) != (-1 | 0) & (i13 | 0) != (-1 | 0)) ^ 1)) {
   i1 = i3 ? i2 : i1;
   i14 = 145;
  }
 }
 if ((i14 | 0) == 145) {
  i2 = (HEAP32[5203] | 0) + i1 | 0;
  HEAP32[5203] = i2;
  if (i2 >>> 0 > (HEAP32[5204] | 0) >>> 0) HEAP32[5204] = i2;
  i9 = HEAP32[5101] | 0;
  L215 : do if (!i9) {
   i14 = HEAP32[5099] | 0;
   if ((i14 | 0) == 0 | i4 >>> 0 < i14 >>> 0) HEAP32[5099] = i4;
   HEAP32[5207] = i4;
   HEAP32[5208] = i1;
   HEAP32[5210] = 0;
   HEAP32[5104] = HEAP32[5213];
   HEAP32[5103] = -1;
   HEAP32[5108] = 20420;
   HEAP32[5107] = 20420;
   HEAP32[5110] = 20428;
   HEAP32[5109] = 20428;
   HEAP32[5112] = 20436;
   HEAP32[5111] = 20436;
   HEAP32[5114] = 20444;
   HEAP32[5113] = 20444;
   HEAP32[5116] = 20452;
   HEAP32[5115] = 20452;
   HEAP32[5118] = 20460;
   HEAP32[5117] = 20460;
   HEAP32[5120] = 20468;
   HEAP32[5119] = 20468;
   HEAP32[5122] = 20476;
   HEAP32[5121] = 20476;
   HEAP32[5124] = 20484;
   HEAP32[5123] = 20484;
   HEAP32[5126] = 20492;
   HEAP32[5125] = 20492;
   HEAP32[5128] = 20500;
   HEAP32[5127] = 20500;
   HEAP32[5130] = 20508;
   HEAP32[5129] = 20508;
   HEAP32[5132] = 20516;
   HEAP32[5131] = 20516;
   HEAP32[5134] = 20524;
   HEAP32[5133] = 20524;
   HEAP32[5136] = 20532;
   HEAP32[5135] = 20532;
   HEAP32[5138] = 20540;
   HEAP32[5137] = 20540;
   HEAP32[5140] = 20548;
   HEAP32[5139] = 20548;
   HEAP32[5142] = 20556;
   HEAP32[5141] = 20556;
   HEAP32[5144] = 20564;
   HEAP32[5143] = 20564;
   HEAP32[5146] = 20572;
   HEAP32[5145] = 20572;
   HEAP32[5148] = 20580;
   HEAP32[5147] = 20580;
   HEAP32[5150] = 20588;
   HEAP32[5149] = 20588;
   HEAP32[5152] = 20596;
   HEAP32[5151] = 20596;
   HEAP32[5154] = 20604;
   HEAP32[5153] = 20604;
   HEAP32[5156] = 20612;
   HEAP32[5155] = 20612;
   HEAP32[5158] = 20620;
   HEAP32[5157] = 20620;
   HEAP32[5160] = 20628;
   HEAP32[5159] = 20628;
   HEAP32[5162] = 20636;
   HEAP32[5161] = 20636;
   HEAP32[5164] = 20644;
   HEAP32[5163] = 20644;
   HEAP32[5166] = 20652;
   HEAP32[5165] = 20652;
   HEAP32[5168] = 20660;
   HEAP32[5167] = 20660;
   HEAP32[5170] = 20668;
   HEAP32[5169] = 20668;
   i14 = i1 + -40 | 0;
   i12 = i4 + 8 | 0;
   i12 = (i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7;
   i13 = i4 + i12 | 0;
   i12 = i14 - i12 | 0;
   HEAP32[5101] = i13;
   HEAP32[5098] = i12;
   HEAP32[i13 + 4 >> 2] = i12 | 1;
   HEAP32[i4 + i14 + 4 >> 2] = 40;
   HEAP32[5102] = HEAP32[5217];
  } else {
   i2 = 20828;
   do {
    i3 = HEAP32[i2 >> 2] | 0;
    i5 = HEAP32[i2 + 4 >> 2] | 0;
    if ((i4 | 0) == (i3 + i5 | 0)) {
     i14 = 154;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i14 | 0) == 154) {
    i6 = i2 + 4 | 0;
    if (!(HEAP32[i2 + 12 >> 2] & 8)) if (i4 >>> 0 > i9 >>> 0 & i3 >>> 0 <= i9 >>> 0) {
     HEAP32[i6 >> 2] = i5 + i1;
     i14 = (HEAP32[5098] | 0) + i1 | 0;
     i12 = i9 + 8 | 0;
     i12 = (i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7;
     i13 = i9 + i12 | 0;
     i12 = i14 - i12 | 0;
     HEAP32[5101] = i13;
     HEAP32[5098] = i12;
     HEAP32[i13 + 4 >> 2] = i12 | 1;
     HEAP32[i9 + i14 + 4 >> 2] = 40;
     HEAP32[5102] = HEAP32[5217];
     break;
    }
   }
   if (i4 >>> 0 < (HEAP32[5099] | 0) >>> 0) HEAP32[5099] = i4;
   i3 = i4 + i1 | 0;
   i2 = 20828;
   do {
    if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) {
     i14 = 162;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i14 | 0) == 162) if (!(HEAP32[i2 + 12 >> 2] & 8)) {
    HEAP32[i2 >> 2] = i4;
    i12 = i2 + 4 | 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i1;
    i12 = i4 + 8 | 0;
    i12 = i4 + ((i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7) | 0;
    i1 = i3 + 8 | 0;
    i1 = i3 + ((i1 & 7 | 0) == 0 ? 0 : 0 - i1 & 7) | 0;
    i11 = i12 + i10 | 0;
    i8 = i1 - i12 - i10 | 0;
    HEAP32[i12 + 4 >> 2] = i10 | 3;
    L238 : do if ((i9 | 0) == (i1 | 0)) {
     i14 = (HEAP32[5098] | 0) + i8 | 0;
     HEAP32[5098] = i14;
     HEAP32[5101] = i11;
     HEAP32[i11 + 4 >> 2] = i14 | 1;
    } else {
     if ((HEAP32[5100] | 0) == (i1 | 0)) {
      i14 = (HEAP32[5097] | 0) + i8 | 0;
      HEAP32[5097] = i14;
      HEAP32[5100] = i11;
      HEAP32[i11 + 4 >> 2] = i14 | 1;
      HEAP32[i11 + i14 >> 2] = i14;
      break;
     }
     i2 = HEAP32[i1 + 4 >> 2] | 0;
     if ((i2 & 3 | 0) == 1) {
      i7 = i2 & -8;
      i4 = i2 >>> 3;
      L246 : do if (i2 >>> 0 < 256) {
       i2 = HEAP32[i1 + 8 >> 2] | 0;
       i3 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i3 | 0) == (i2 | 0)) {
        HEAP32[5095] = HEAP32[5095] & ~(1 << i4);
        break;
       } else {
        HEAP32[i2 + 12 >> 2] = i3;
        HEAP32[i3 + 8 >> 2] = i2;
        break;
       }
      } else {
       i6 = HEAP32[i1 + 24 >> 2] | 0;
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       do if ((i2 | 0) == (i1 | 0)) {
        i3 = i1 + 16 | 0;
        i4 = i3 + 4 | 0;
        i2 = HEAP32[i4 >> 2] | 0;
        if (!i2) {
         i2 = HEAP32[i3 >> 2] | 0;
         if (!i2) {
          i2 = 0;
          break;
         }
        } else i3 = i4;
        while (1) {
         i5 = i2 + 20 | 0;
         i4 = HEAP32[i5 >> 2] | 0;
         if (!i4) {
          i5 = i2 + 16 | 0;
          i4 = HEAP32[i5 >> 2] | 0;
          if (!i4) break; else {
           i2 = i4;
           i3 = i5;
          }
         } else {
          i2 = i4;
          i3 = i5;
         }
        }
        HEAP32[i3 >> 2] = 0;
       } else {
        i14 = HEAP32[i1 + 8 >> 2] | 0;
        HEAP32[i14 + 12 >> 2] = i2;
        HEAP32[i2 + 8 >> 2] = i14;
       } while (0);
       if (!i6) break;
       i3 = HEAP32[i1 + 28 >> 2] | 0;
       i4 = 20684 + (i3 << 2) | 0;
       do if ((HEAP32[i4 >> 2] | 0) == (i1 | 0)) {
        HEAP32[i4 >> 2] = i2;
        if (i2 | 0) break;
        HEAP32[5096] = HEAP32[5096] & ~(1 << i3);
        break L246;
       } else {
        i14 = i6 + 16 | 0;
        HEAP32[((HEAP32[i14 >> 2] | 0) == (i1 | 0) ? i14 : i6 + 20 | 0) >> 2] = i2;
        if (!i2) break L246;
       } while (0);
       HEAP32[i2 + 24 >> 2] = i6;
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4 | 0) {
        HEAP32[i2 + 16 >> 2] = i4;
        HEAP32[i4 + 24 >> 2] = i2;
       }
       i3 = HEAP32[i3 + 4 >> 2] | 0;
       if (!i3) break;
       HEAP32[i2 + 20 >> 2] = i3;
       HEAP32[i3 + 24 >> 2] = i2;
      } while (0);
      i1 = i1 + i7 | 0;
      i5 = i7 + i8 | 0;
     } else i5 = i8;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i11 + 4 >> 2] = i5 | 1;
     HEAP32[i11 + i5 >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i3 = 20420 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[5095] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[5095] = i2 | i1;
       i1 = i3;
       i2 = i3 + 8 | 0;
      } else {
       i2 = i3 + 8 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i2 >> 2] = i11;
      HEAP32[i1 + 12 >> 2] = i11;
      HEAP32[i11 + 8 >> 2] = i1;
      HEAP32[i11 + 12 >> 2] = i3;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i4 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i4 = 31;
       break;
      }
      i13 = (i1 + 1048320 | 0) >>> 16 & 8;
      i14 = i1 << i13;
      i10 = (i14 + 520192 | 0) >>> 16 & 4;
      i14 = i14 << i10;
      i4 = (i14 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i10 | i13 | i4) + (i14 << i4 >>> 15) | 0;
      i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } while (0);
     i1 = 20684 + (i4 << 2) | 0;
     HEAP32[i11 + 28 >> 2] = i4;
     i2 = i11 + 16 | 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
     i2 = HEAP32[5096] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[5096] = i2 | i3;
      HEAP32[i1 >> 2] = i11;
      HEAP32[i11 + 24 >> 2] = i1;
      HEAP32[i11 + 12 >> 2] = i11;
      HEAP32[i11 + 8 >> 2] = i11;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L291 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       if (!i2) break;
       if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i1 = i2;
        break L291;
       } else {
        i4 = i4 << 1;
        i1 = i2;
       }
      }
      HEAP32[i3 >> 2] = i11;
      HEAP32[i11 + 24 >> 2] = i1;
      HEAP32[i11 + 12 >> 2] = i11;
      HEAP32[i11 + 8 >> 2] = i11;
      break L238;
     } while (0);
     i13 = i1 + 8 | 0;
     i14 = HEAP32[i13 >> 2] | 0;
     HEAP32[i14 + 12 >> 2] = i11;
     HEAP32[i13 >> 2] = i11;
     HEAP32[i11 + 8 >> 2] = i14;
     HEAP32[i11 + 12 >> 2] = i1;
     HEAP32[i11 + 24 >> 2] = 0;
    } while (0);
    i14 = i12 + 8 | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   i3 = 20828;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i9 >>> 0) {
     i2 = i2 + (HEAP32[i3 + 4 >> 2] | 0) | 0;
     if (i2 >>> 0 > i9 >>> 0) break;
    }
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i6 = i2 + -47 | 0;
   i3 = i6 + 8 | 0;
   i3 = i6 + ((i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7) | 0;
   i6 = i9 + 16 | 0;
   i3 = i3 >>> 0 < i6 >>> 0 ? i9 : i3;
   i14 = i3 + 8 | 0;
   i5 = i1 + -40 | 0;
   i12 = i4 + 8 | 0;
   i12 = (i12 & 7 | 0) == 0 ? 0 : 0 - i12 & 7;
   i13 = i4 + i12 | 0;
   i12 = i5 - i12 | 0;
   HEAP32[5101] = i13;
   HEAP32[5098] = i12;
   HEAP32[i13 + 4 >> 2] = i12 | 1;
   HEAP32[i4 + i5 + 4 >> 2] = 40;
   HEAP32[5102] = HEAP32[5217];
   i5 = i3 + 4 | 0;
   HEAP32[i5 >> 2] = 27;
   HEAP32[i14 >> 2] = HEAP32[5207];
   HEAP32[i14 + 4 >> 2] = HEAP32[5208];
   HEAP32[i14 + 8 >> 2] = HEAP32[5209];
   HEAP32[i14 + 12 >> 2] = HEAP32[5210];
   HEAP32[5207] = i4;
   HEAP32[5208] = i1;
   HEAP32[5210] = 0;
   HEAP32[5209] = i14;
   i1 = i3 + 24 | 0;
   do {
    i14 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i14 + 8 | 0) >>> 0 < i2 >>> 0);
   if ((i3 | 0) != (i9 | 0)) {
    i7 = i3 - i9 | 0;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
    HEAP32[i9 + 4 >> 2] = i7 | 1;
    HEAP32[i3 >> 2] = i7;
    i1 = i7 >>> 3;
    if (i7 >>> 0 < 256) {
     i3 = 20420 + (i1 << 1 << 2) | 0;
     i2 = HEAP32[5095] | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[5095] = i2 | i1;
      i1 = i3;
      i2 = i3 + 8 | 0;
     } else {
      i2 = i3 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i9;
     HEAP32[i1 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i1;
     HEAP32[i9 + 12 >> 2] = i3;
     break;
    }
    i1 = i7 >>> 8;
    if (!i1) i4 = 0; else if (i7 >>> 0 > 16777215) i4 = 31; else {
     i13 = (i1 + 1048320 | 0) >>> 16 & 8;
     i14 = i1 << i13;
     i12 = (i14 + 520192 | 0) >>> 16 & 4;
     i14 = i14 << i12;
     i4 = (i14 + 245760 | 0) >>> 16 & 2;
     i4 = 14 - (i12 | i13 | i4) + (i14 << i4 >>> 15) | 0;
     i4 = i7 >>> (i4 + 7 | 0) & 1 | i4 << 1;
    }
    i3 = 20684 + (i4 << 2) | 0;
    HEAP32[i9 + 28 >> 2] = i4;
    HEAP32[i9 + 20 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = HEAP32[5096] | 0;
    i2 = 1 << i4;
    if (!(i1 & i2)) {
     HEAP32[5096] = i1 | i2;
     HEAP32[i3 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i3;
     HEAP32[i9 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i9;
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    L325 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i7 | 0)) {
     i4 = i7 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
     while (1) {
      i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
      i2 = HEAP32[i3 >> 2] | 0;
      if (!i2) break;
      if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i7 | 0)) {
       i1 = i2;
       break L325;
      } else {
       i4 = i4 << 1;
       i1 = i2;
      }
     }
     HEAP32[i3 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i1;
     HEAP32[i9 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i9;
     break L215;
    } while (0);
    i13 = i1 + 8 | 0;
    i14 = HEAP32[i13 >> 2] | 0;
    HEAP32[i14 + 12 >> 2] = i9;
    HEAP32[i13 >> 2] = i9;
    HEAP32[i9 + 8 >> 2] = i14;
    HEAP32[i9 + 12 >> 2] = i1;
    HEAP32[i9 + 24 >> 2] = 0;
   }
  } while (0);
  i1 = HEAP32[5098] | 0;
  if (i1 >>> 0 > i10 >>> 0) {
   i12 = i1 - i10 | 0;
   HEAP32[5098] = i12;
   i14 = HEAP32[5101] | 0;
   i13 = i14 + i10 | 0;
   HEAP32[5101] = i13;
   HEAP32[i13 + 4 >> 2] = i12 | 1;
   HEAP32[i14 + 4 >> 2] = i10 | 3;
   i14 = i14 + 8 | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i36, i37, i2, i3, i5, i40, i31, i4, i32, i33, i1) {
 i36 = i36 | 0;
 i37 = i37 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i40 = i40 | 0;
 i31 = i31 | 0;
 i4 = i4 | 0;
 i32 = i32 | 0;
 i33 = i33 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i34 = 0, i35 = 0, i38 = 0, i39 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i35 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i25 = i47 + 488 | 0;
 i34 = i47;
 i46 = i47 + 480 | 0;
 i38 = i47 + 472 | 0;
 i26 = i47 + 468 | 0;
 i27 = i47 + 496 | 0;
 i28 = i47 + 493 | 0;
 i29 = i47 + 492 | 0;
 i41 = i47 + 456 | 0;
 i42 = i47 + 444 | 0;
 i43 = i47 + 432 | 0;
 i44 = i47 + 420 | 0;
 i45 = i47 + 408 | 0;
 i30 = i47 + 404 | 0;
 i39 = i47 + 400 | 0;
 HEAP32[i25 >> 2] = i1;
 HEAP32[i46 >> 2] = i34;
 HEAP32[i46 + 4 >> 2] = 110;
 HEAP32[i38 >> 2] = i34;
 HEAP32[i26 >> 2] = i34 + 400;
 HEAP32[i41 >> 2] = 0;
 HEAP32[i41 + 4 >> 2] = 0;
 HEAP32[i41 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i41 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i42 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i43 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i44 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i45 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i2, i3, i27, i28, i29, i41, i42, i43, i44, i30);
 HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
 i18 = i4 + 8 | 0;
 i19 = i43 + 11 | 0;
 i20 = i43 + 4 | 0;
 i21 = i44 + 11 | 0;
 i22 = i44 + 4 | 0;
 i23 = i41 + 11 | 0;
 i24 = i41 + 4 | 0;
 i12 = (i5 & 512 | 0) != 0;
 i13 = i42 + 11 | 0;
 i14 = i27 + 3 | 0;
 i15 = i42 + 4 | 0;
 i16 = i45 + 11 | 0;
 i17 = i45 + 4 | 0;
 i34 = 0;
 i11 = 0;
 L21 : while (1) {
  if (i11 >>> 0 >= 4) {
   i35 = 243;
   break;
  }
  i1 = HEAP32[i36 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i36 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i36 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i37 >> 2] | 0;
  do if (!i2) i35 = 31; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i37 >> 2] = 0;
    i35 = 31;
    break;
   } else if (i3) {
    i10 = i2;
    break;
   } else {
    i35 = 243;
    break L21;
   }
  } while (0);
  if ((i35 | 0) == 31) {
   i35 = 0;
   if (i3) {
    i35 = 243;
    break;
   } else i10 = 0;
  }
  L46 : do switch (HEAP8[i27 + i11 >> 0] | 0) {
  case 1:
   {
    if ((i11 | 0) == 3) i1 = i34; else {
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if ((i1 & 255) << 24 >> 24 <= -1) {
      i35 = 45;
      break L21;
     }
     if (!(HEAP16[(HEAP32[i18 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
      i35 = 45;
      break L21;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 1;
      i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i45, i1 & 255);
     i35 = 47;
    }
    break;
   }
  case 0:
   {
    if ((i11 | 0) == 3) i1 = i34; else i35 = 47;
    break;
   }
  case 3:
   {
    i1 = HEAP8[i19 >> 0] | 0;
    i1 = i1 << 24 >> 24 < 0 ? HEAP32[i20 >> 2] | 0 : i1 & 255;
    i4 = HEAP8[i21 >> 0] | 0;
    i4 = i4 << 24 >> 24 < 0 ? HEAP32[i22 >> 2] | 0 : i4 & 255;
    if ((i1 | 0) == (0 - i4 | 0)) i1 = i34; else {
     i5 = (i1 | 0) == 0;
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     i3 = (i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0);
     if (i5 | (i4 | 0) == 0) {
      if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      i1 = i1 & 255;
      if (i5) {
       if ((HEAP8[((HEAP8[i21 >> 0] | 0) < 0 ? HEAP32[i44 >> 2] | 0 : i44) >> 0] | 0) != i1 << 24 >> 24) {
        i1 = i34;
        break L46;
       }
       i1 = HEAP32[i36 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
        HEAP32[i2 >> 2] = i3 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
       }
       HEAP8[i31 >> 0] = 1;
       i1 = HEAP8[i21 >> 0] | 0;
       i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i22 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i44 : i34;
       break L46;
      }
      if ((HEAP8[((HEAP8[i19 >> 0] | 0) < 0 ? HEAP32[i43 >> 2] | 0 : i43) >> 0] | 0) != i1 << 24 >> 24) {
       HEAP8[i31 >> 0] = 1;
       i1 = i34;
       break L46;
      }
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
       HEAP32[i2 >> 2] = i3 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      }
      i1 = HEAP8[i19 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i20 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i43 : i34;
      break L46;
     }
     if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     i2 = HEAP32[i36 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = (i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0);
     if ((HEAP8[((HEAP8[i19 >> 0] | 0) < 0 ? HEAP32[i43 >> 2] | 0 : i43) >> 0] | 0) == (i1 & 255) << 24 >> 24) {
      if (i5) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
       HEAP32[i3 >> 2] = i4 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
      }
      i1 = HEAP8[i19 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i20 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i43 : i34;
      break L46;
     }
     if (i5) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     if ((HEAP8[((HEAP8[i21 >> 0] | 0) < 0 ? HEAP32[i44 >> 2] | 0 : i44) >> 0] | 0) != (i1 & 255) << 24 >> 24) {
      i35 = 105;
      break L21;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     }
     HEAP8[i31 >> 0] = 1;
     i1 = HEAP8[i21 >> 0] | 0;
     i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i22 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i44 : i34;
    }
    break;
   }
  case 2:
   {
    if (i11 >>> 0 < 2 | (i34 | 0) != 0) {
     i1 = HEAP8[i13 >> 0] | 0;
     i3 = i1 << 24 >> 24 < 0;
     i2 = HEAP32[i42 >> 2] | 0;
     i4 = i3 ? i2 : i42;
     i5 = i4;
     if (!i11) i3 = i5; else {
      i9 = i5;
      i35 = 110;
     }
    } else {
     if (!(i12 | (i11 | 0) == 2 & (HEAP8[i14 >> 0] | 0) != 0)) {
      i1 = 0;
      break L46;
     }
     i1 = HEAP8[i13 >> 0] | 0;
     i3 = i1 << 24 >> 24 < 0;
     i2 = HEAP32[i42 >> 2] | 0;
     i9 = i3 ? i2 : i42;
     i4 = i9;
     i35 = 110;
    }
    L109 : do if ((i35 | 0) == 110) {
     i35 = 0;
     if ((HEAPU8[i27 + (i11 + -1) >> 0] | 0) < 2) {
      i5 = i4 + (i3 ? HEAP32[i15 >> 2] | 0 : i1 & 255) | 0;
      i3 = i9;
      while (1) {
       i6 = i3;
       if ((i5 | 0) == (i6 | 0)) break;
       i7 = HEAP8[i6 >> 0] | 0;
       if (i7 << 24 >> 24 <= -1) break;
       if (!(HEAP16[(HEAP32[i18 >> 2] | 0) + (i7 << 24 >> 24 << 1) >> 1] & 8192)) break;
       i3 = i6 + 1 | 0;
      }
      i7 = i3 - i9 | 0;
      i6 = HEAP8[i16 >> 0] | 0;
      i8 = i6 << 24 >> 24 < 0;
      i5 = HEAP32[i17 >> 2] | 0;
      i6 = i6 & 255;
      if (i7 >>> 0 > (i8 ? i5 : i6) >>> 0) i3 = i9; else {
       i48 = (HEAP32[i45 >> 2] | 0) + i5 | 0;
       i5 = i45 + i6 | 0;
       i6 = i8 ? i48 : i5;
       i5 = i8 ? i48 + (0 - i7) | 0 : i5 + (0 - i7) | 0;
       while (1) {
        if ((i5 | 0) == (i6 | 0)) break L109;
        if ((HEAP8[i5 >> 0] | 0) != (HEAP8[i4 >> 0] | 0)) {
         i3 = i9;
         break L109;
        }
        i4 = i4 + 1 | 0;
        i5 = i5 + 1 | 0;
       }
      }
     } else i3 = i9;
    } while (0);
    i5 = i3;
    i3 = i10;
    L124 : while (1) {
     i48 = i1 << 24 >> 24 < 0;
     if ((i5 | 0) == ((i48 ? i2 : i42) + (i48 ? HEAP32[i15 >> 2] | 0 : i1 & 255) | 0)) break;
     i1 = HEAP32[i36 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i36 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i36 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i3) i35 = 136; else {
      i1 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i37 >> 2] = 0;
       i35 = 136;
       break;
      } else if (i2) {
       i4 = i3;
       break;
      } else break L124;
     } while (0);
     if ((i35 | 0) == 136) {
      i35 = 0;
      if (i2) break; else i4 = 0;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if ((HEAP8[i5 >> 0] | 0) != (i1 & 255) << 24 >> 24) break;
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     }
     i5 = i5 + 1 | 0;
     i1 = HEAP8[i13 >> 0] | 0;
     i2 = HEAP32[i42 >> 2] | 0;
     i3 = i4;
    }
    if (i12) {
     i48 = HEAP8[i13 >> 0] | 0;
     i10 = i48 << 24 >> 24 < 0;
     if ((i5 | 0) == ((i10 ? HEAP32[i42 >> 2] | 0 : i42) + (i10 ? HEAP32[i15 >> 2] | 0 : i48 & 255) | 0)) i1 = i34; else {
      i35 = 148;
      break L21;
     }
    } else i1 = i34;
    break;
   }
  case 4:
   {
    i5 = 0;
    i4 = i10;
    i1 = i10;
    L161 : while (1) {
     i2 = HEAP32[i36 >> 2] | 0;
     do if (!i2) i3 = 1; else {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i36 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i36 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i35 = 162; else {
      i2 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i37 >> 2] = 0;
       i1 = 0;
       i35 = 162;
       break;
      } else if (i3) {
       i6 = i4;
       break;
      } else {
       i4 = i1;
       break L161;
      }
     } while (0);
     if ((i35 | 0) == 162) {
      i35 = 0;
      if (i3) {
       i4 = i1;
       break;
      } else i6 = 0;
     }
     i2 = HEAP32[i36 >> 2] | 0;
     i3 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     i3 = i2 & 255;
     if (i3 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[i18 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) i35 = 172; else {
      i2 = HEAP32[i33 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i25 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i32, i33, i25);
       i2 = HEAP32[i33 >> 2] | 0;
      }
      HEAP32[i33 >> 2] = i2 + 1;
      HEAP8[i2 >> 0] = i3;
      i2 = i5 + 1 | 0;
     } else i35 = 172;
     if ((i35 | 0) == 172) {
      i35 = 0;
      i48 = HEAP8[i23 >> 0] | 0;
      if (!((HEAP8[i29 >> 0] | 0) == i3 << 24 >> 24 & (i5 | 0 ? ((i48 << 24 >> 24 < 0 ? HEAP32[i24 >> 2] | 0 : i48 & 255) | 0) != 0 : 0))) {
       i4 = i1;
       break;
      }
      i2 = HEAP32[i38 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i26 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i46, i38, i26);
       i2 = HEAP32[i38 >> 2] | 0;
      }
      HEAP32[i38 >> 2] = i2 + 4;
      HEAP32[i2 >> 2] = i5;
      i2 = 0;
     }
     i3 = HEAP32[i36 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i3) | 0; else {
      HEAP32[i4 >> 2] = i5 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 >> 0] | 0) | 0;
     }
     i5 = i2;
     i4 = i6;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    if (i5 | 0 ? (HEAP32[i46 >> 2] | 0) != (i1 | 0) : 0) {
     if ((i1 | 0) == (HEAP32[i26 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i46, i38, i26);
      i1 = HEAP32[i38 >> 2] | 0;
     }
     HEAP32[i38 >> 2] = i1 + 4;
     HEAP32[i1 >> 2] = i5;
    }
    L213 : do if ((HEAP32[i30 >> 2] | 0) > 0) {
     i1 = HEAP32[i36 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i36 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i36 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i35 = 198; else {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i37 >> 2] = 0;
       i35 = 198;
       break;
      } else if (i2) break; else {
       i35 = 204;
       break L21;
      }
     } while (0);
     if ((i35 | 0) == 198) {
      i35 = 0;
      if (i2) {
       i35 = 204;
       break L21;
      } else i4 = 0;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if ((HEAP8[i28 >> 0] | 0) != (i1 & 255) << 24 >> 24) {
      i35 = 204;
      break L21;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     }
     i3 = i4;
     while (1) {
      if ((HEAP32[i30 >> 2] | 0) <= 0) break L213;
      i1 = HEAP32[i36 >> 2] | 0;
      do if (!i1) i2 = 1; else {
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i36 >> 2] = 0;
        i2 = 1;
        break;
       } else {
        i2 = (HEAP32[i36 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!i3) i35 = 223; else {
       i1 = HEAP32[i3 + 12 >> 2] | 0;
       if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i37 >> 2] = 0;
        i35 = 223;
        break;
       } else if (i2) {
        i4 = i3;
        break;
       } else {
        i35 = 230;
        break L21;
       }
      } while (0);
      if ((i35 | 0) == 223) {
       i35 = 0;
       if (i2) {
        i35 = 230;
        break L21;
       } else i4 = 0;
      }
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if ((i1 & 255) << 24 >> 24 <= -1) {
       i35 = 230;
       break L21;
      }
      if (!(HEAP16[(HEAP32[i18 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 2048)) {
       i35 = 230;
       break L21;
      }
      if ((HEAP32[i33 >> 2] | 0) == (HEAP32[i25 >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i32, i33, i25);
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      i2 = HEAP32[i33 >> 2] | 0;
      HEAP32[i33 >> 2] = i2 + 1;
      HEAP8[i2 >> 0] = i1;
      HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + -1;
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
       HEAP32[i2 >> 2] = i3 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      }
      i3 = i4;
     }
    } while (0);
    if ((HEAP32[i33 >> 2] | 0) == (HEAP32[i32 >> 2] | 0)) {
     i35 = 241;
     break L21;
    } else i1 = i34;
    break;
   }
  default:
   i1 = i34;
  } while (0);
  L289 : do if ((i35 | 0) == 47) {
   i35 = 0;
   i3 = i10;
   while (1) {
    i1 = HEAP32[i36 >> 2] | 0;
    do if (!i1) i2 = 1; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i36 >> 2] = 0;
      i2 = 1;
      break;
     } else {
      i2 = (HEAP32[i36 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!i3) i35 = 61; else {
     i1 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i37 >> 2] = 0;
      i35 = 61;
      break;
     } else if (i2) {
      i4 = i3;
      break;
     } else {
      i1 = i34;
      break L289;
     }
    } while (0);
    if ((i35 | 0) == 61) {
     i35 = 0;
     if (i2) {
      i1 = i34;
      break L289;
     } else i4 = 0;
    }
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
    if ((i1 & 255) << 24 >> 24 <= -1) {
     i1 = i34;
     break L289;
    }
    if (!(HEAP16[(HEAP32[i18 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
     i1 = i34;
     break L289;
    }
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = i1 + 12 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
     HEAP32[i2 >> 2] = i3 + 1;
     i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i45, i1 & 255);
    i3 = i4;
   }
  } while (0);
  i34 = i1;
  i11 = i11 + 1 | 0;
 }
 L326 : do if ((i35 | 0) == 45) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 105) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 148) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 204) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 230) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 241) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 243) {
  L328 : do if (i34 | 0) {
   i5 = i34 + 11 | 0;
   i6 = i34 + 4 | 0;
   i4 = 1;
   L330 : while (1) {
    i1 = HEAP8[i5 >> 0] | 0;
    if (i1 << 24 >> 24 < 0) i1 = HEAP32[i6 >> 2] | 0; else i1 = i1 & 255;
    if (i4 >>> 0 >= i1 >>> 0) break L328;
    i1 = HEAP32[i36 >> 2] | 0;
    do if (!i1) i3 = 1; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i36 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i36 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    i1 = HEAP32[i37 >> 2] | 0;
    do if (!i1) i35 = 262; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i37 >> 2] = 0;
      i35 = 262;
      break;
     } else if (i3) break; else break L330;
    } while (0);
    if ((i35 | 0) == 262) {
     i35 = 0;
     if (i3) break;
    }
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
    if ((HEAP8[i5 >> 0] | 0) < 0) i2 = HEAP32[i34 >> 2] | 0; else i2 = i34;
    if ((HEAP8[i2 + i4 >> 0] | 0) != (i1 & 255) << 24 >> 24) break;
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = i1 + 12 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
     HEAP32[i2 >> 2] = i3 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
    }
    i4 = i4 + 1 | 0;
   }
   HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
   i2 = 0;
   break L326;
  } while (0);
  i2 = HEAP32[i46 >> 2] | 0;
  i1 = HEAP32[i38 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) i2 = 1; else {
   HEAP32[i39 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i41, i2, i1, i39);
   if (!(HEAP32[i39 >> 2] | 0)) {
    i2 = 1;
    break;
   } else {
    HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
    i2 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i45);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i44);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i43);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i42);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i41);
 i1 = HEAP32[i46 >> 2] | 0;
 HEAP32[i46 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i46 + 4 >> 2] & 127](i1);
 STACKTOP = i47;
 return i2 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i36, i37, i2, i3, i4, i40, i30, i31, i32, i33, i1) {
 i36 = i36 | 0;
 i37 = i37 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i40 = i40 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 i32 = i32 | 0;
 i33 = i33 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i34 = 0, i35 = 0, i38 = 0, i39 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i35 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i24 = i47 + 496 | 0;
 i34 = i47;
 i46 = i47 + 488 | 0;
 i38 = i47 + 480 | 0;
 i25 = i47 + 476 | 0;
 i26 = i47 + 500 | 0;
 i27 = i47 + 472 | 0;
 i28 = i47 + 468 | 0;
 i41 = i47 + 456 | 0;
 i42 = i47 + 444 | 0;
 i43 = i47 + 432 | 0;
 i44 = i47 + 420 | 0;
 i45 = i47 + 408 | 0;
 i29 = i47 + 404 | 0;
 i39 = i47 + 400 | 0;
 HEAP32[i24 >> 2] = i1;
 HEAP32[i46 >> 2] = i34;
 HEAP32[i46 + 4 >> 2] = 110;
 HEAP32[i38 >> 2] = i34;
 HEAP32[i25 >> 2] = i34 + 400;
 HEAP32[i41 >> 2] = 0;
 HEAP32[i41 + 4 >> 2] = 0;
 HEAP32[i41 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i41 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i42 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i43 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i44 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i45 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i2, i3, i26, i27, i28, i41, i42, i43, i44, i29);
 HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
 i18 = i43 + 8 + 3 | 0;
 i19 = i43 + 4 | 0;
 i20 = i44 + 8 + 3 | 0;
 i21 = i44 + 4 | 0;
 i22 = i41 + 11 | 0;
 i23 = i41 + 4 | 0;
 i12 = (i4 & 512 | 0) != 0;
 i13 = i42 + 8 + 3 | 0;
 i14 = i26 + 3 | 0;
 i15 = i42 + 4 | 0;
 i16 = i45 + 8 + 3 | 0;
 i17 = i45 + 4 | 0;
 i34 = 0;
 i11 = 0;
 L21 : while (1) {
  if (i11 >>> 0 >= 4) {
   i35 = 239;
   break;
  }
  i1 = HEAP32[i36 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i36 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i36 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i37 >> 2] | 0;
  do if (!i2) i35 = 31; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i37 >> 2] = 0;
    i35 = 31;
    break;
   } else if (i3) {
    i10 = i2;
    break;
   } else {
    i35 = 239;
    break L21;
   }
  } while (0);
  if ((i35 | 0) == 31) {
   i35 = 0;
   if (i3) {
    i35 = 239;
    break;
   } else i10 = 0;
  }
  L46 : do switch (HEAP8[i26 + i11 >> 0] | 0) {
  case 1:
   {
    if ((i11 | 0) == 3) i1 = i34; else {
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2] & 31](i31, 8192, i1) | 0)) {
      i35 = 44;
      break L21;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
     i35 = 46;
    }
    break;
   }
  case 0:
   {
    if ((i11 | 0) == 3) i1 = i34; else i35 = 46;
    break;
   }
  case 3:
   {
    i1 = HEAP8[i18 >> 0] | 0;
    i1 = i1 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i1 & 255;
    i4 = HEAP8[i20 >> 0] | 0;
    i4 = i4 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i4 & 255;
    if ((i1 | 0) == (0 - i4 | 0)) i1 = i34; else {
     i5 = (i1 | 0) == 0;
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     i3 = (i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0);
     if (i5 | (i4 | 0) == 0) {
      if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (i5) {
       if ((i1 | 0) != (HEAP32[((HEAP8[i20 >> 0] | 0) < 0 ? HEAP32[i44 >> 2] | 0 : i44) >> 2] | 0)) {
        i1 = i34;
        break L46;
       }
       i1 = HEAP32[i36 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
        HEAP32[i2 >> 2] = i3 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
       }
       HEAP8[i30 >> 0] = 1;
       i1 = HEAP8[i20 >> 0] | 0;
       i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i44 : i34;
       break L46;
      }
      if ((i1 | 0) != (HEAP32[((HEAP8[i18 >> 0] | 0) < 0 ? HEAP32[i43 >> 2] | 0 : i43) >> 2] | 0)) {
       HEAP8[i30 >> 0] = 1;
       i1 = i34;
       break L46;
      }
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
       HEAP32[i2 >> 2] = i3 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
      }
      i1 = HEAP8[i18 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i43 : i34;
      break L46;
     }
     if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     i2 = HEAP32[i36 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = (i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0);
     if ((i1 | 0) == (HEAP32[((HEAP8[i18 >> 0] | 0) < 0 ? HEAP32[i43 >> 2] | 0 : i43) >> 2] | 0)) {
      if (i5) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
       HEAP32[i3 >> 2] = i4 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
      }
      i1 = HEAP8[i18 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i43 : i34;
      break L46;
     }
     if (i5) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
     if ((i1 | 0) != (HEAP32[((HEAP8[i20 >> 0] | 0) < 0 ? HEAP32[i44 >> 2] | 0 : i44) >> 2] | 0)) {
      i35 = 103;
      break L21;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     }
     HEAP8[i30 >> 0] = 1;
     i1 = HEAP8[i20 >> 0] | 0;
     i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i44 : i34;
    }
    break;
   }
  case 2:
   {
    if (i11 >>> 0 < 2 | (i34 | 0) != 0) {
     i2 = HEAP8[i13 >> 0] | 0;
     i3 = HEAP32[i42 >> 2] | 0;
     i1 = i2 << 24 >> 24 < 0 ? i3 : i42;
     if (i11) i35 = 108;
    } else {
     if (!(i12 | (i11 | 0) == 2 & (HEAP8[i14 >> 0] | 0) != 0)) {
      i1 = 0;
      break L46;
     }
     i2 = HEAP8[i13 >> 0] | 0;
     i3 = HEAP32[i42 >> 2] | 0;
     i1 = i2 << 24 >> 24 < 0 ? i3 : i42;
     i35 = 108;
    }
    L108 : do if ((i35 | 0) == 108) {
     i35 = 0;
     if ((HEAPU8[i26 + (i11 + -1) >> 0] | 0) < 2) {
      i4 = i2;
      while (1) {
       i9 = i4 << 24 >> 24 < 0;
       i2 = i1;
       if (((i9 ? i3 : i42) + ((i9 ? HEAP32[i15 >> 2] | 0 : i4 & 255) << 2) | 0) == (i2 | 0)) {
        i2 = i4;
        break;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2] & 31](i31, 8192, HEAP32[i2 >> 2] | 0) | 0)) {
        i35 = 112;
        break;
       }
       i1 = i2 + 4 | 0;
       i4 = HEAP8[i13 >> 0] | 0;
       i3 = HEAP32[i42 >> 2] | 0;
      }
      if ((i35 | 0) == 112) {
       i35 = 0;
       i2 = HEAP8[i13 >> 0] | 0;
       i3 = HEAP32[i42 >> 2] | 0;
      }
      i5 = i2 << 24 >> 24 < 0 ? i3 : i42;
      i9 = i5;
      i7 = i1 - i9 >> 2;
      i6 = HEAP8[i16 >> 0] | 0;
      i8 = i6 << 24 >> 24 < 0;
      i4 = HEAP32[i17 >> 2] | 0;
      i6 = i6 & 255;
      if (i7 >>> 0 > (i8 ? i4 : i6) >>> 0) i1 = i9; else {
       i48 = (HEAP32[i45 >> 2] | 0) + (i4 << 2) | 0;
       i4 = i45 + (i6 << 2) | 0;
       i6 = i8 ? i48 : i4;
       i4 = (i8 ? i48 : i4) + (0 - i7 << 2) | 0;
       while (1) {
        if ((i4 | 0) == (i6 | 0)) break L108;
        if ((HEAP32[i4 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
         i1 = i9;
         break L108;
        }
        i5 = i5 + 4 | 0;
        i4 = i4 + 4 | 0;
       }
      }
     }
    } while (0);
    i5 = i1;
    i4 = i10;
    L124 : while (1) {
     i48 = i2 << 24 >> 24 < 0;
     if ((i5 | 0) == ((i48 ? i3 : i42) + ((i48 ? HEAP32[i15 >> 2] | 0 : i2 & 255) << 2) | 0)) break;
     i1 = HEAP32[i36 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i36 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i36 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i35 = 134; else {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i37 >> 2] = 0;
       i35 = 134;
       break;
      } else if (i2) break; else break L124;
     } while (0);
     if ((i35 | 0) == 134) {
      i35 = 0;
      if (i2) break; else i4 = 0;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if ((i1 | 0) != (HEAP32[i5 >> 2] | 0)) break;
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     }
     i5 = i5 + 4 | 0;
     i2 = HEAP8[i13 >> 0] | 0;
     i3 = HEAP32[i42 >> 2] | 0;
    }
    if (i12) {
     i48 = HEAP8[i13 >> 0] | 0;
     i10 = i48 << 24 >> 24 < 0;
     if ((i5 | 0) == ((i10 ? HEAP32[i42 >> 2] | 0 : i42) + ((i10 ? HEAP32[i15 >> 2] | 0 : i48 & 255) << 2) | 0)) i1 = i34; else {
      i35 = 146;
      break L21;
     }
    } else i1 = i34;
    break;
   }
  case 4:
   {
    i5 = 0;
    i4 = i10;
    i1 = i10;
    L161 : while (1) {
     i2 = HEAP32[i36 >> 2] | 0;
     do if (!i2) i3 = 1; else {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i36 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i36 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i35 = 160; else {
      i2 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i37 >> 2] = 0;
       i1 = 0;
       i35 = 160;
       break;
      } else if (i3) {
       i6 = i4;
       break;
      } else {
       i4 = i1;
       break L161;
      }
     } while (0);
     if ((i35 | 0) == 160) {
      i35 = 0;
      if (i3) {
       i4 = i1;
       break;
      } else i6 = 0;
     }
     i2 = HEAP32[i36 >> 2] | 0;
     i3 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2] & 31](i31, 2048, i3) | 0) {
      i2 = HEAP32[i33 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i24 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i32, i33, i24);
       i2 = HEAP32[i33 >> 2] | 0;
      }
      HEAP32[i33 >> 2] = i2 + 4;
      HEAP32[i2 >> 2] = i3;
      i2 = i5 + 1 | 0;
     } else {
      i48 = HEAP8[i22 >> 0] | 0;
      if (!((i3 | 0) == (HEAP32[i28 >> 2] | 0) & (i5 | 0 ? ((i48 << 24 >> 24 < 0 ? HEAP32[i23 >> 2] | 0 : i48 & 255) | 0) != 0 : 0))) {
       i4 = i1;
       break;
      }
      i2 = HEAP32[i38 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i25 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i46, i38, i25);
       i2 = HEAP32[i38 >> 2] | 0;
      }
      HEAP32[i38 >> 2] = i2 + 4;
      HEAP32[i2 >> 2] = i5;
      i2 = 0;
     }
     i3 = HEAP32[i36 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i3) | 0; else {
      HEAP32[i4 >> 2] = i5 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i5 >> 2] | 0) | 0;
     }
     i5 = i2;
     i4 = i6;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    if (i5 | 0 ? (HEAP32[i46 >> 2] | 0) != (i1 | 0) : 0) {
     if ((i1 | 0) == (HEAP32[i25 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i46, i38, i25);
      i1 = HEAP32[i38 >> 2] | 0;
     }
     HEAP32[i38 >> 2] = i1 + 4;
     HEAP32[i1 >> 2] = i5;
    }
    L211 : do if ((HEAP32[i29 >> 2] | 0) > 0) {
     i1 = HEAP32[i36 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i36 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i36 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i35 = 195; else {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i37 >> 2] = 0;
       i35 = 195;
       break;
      } else if (i2) break; else {
       i35 = 201;
       break L21;
      }
     } while (0);
     if ((i35 | 0) == 195) {
      i35 = 0;
      if (i2) {
       i35 = 201;
       break L21;
      } else i4 = 0;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if ((i1 | 0) != (HEAP32[i27 >> 2] | 0)) {
      i35 = 201;
      break L21;
     }
     i1 = HEAP32[i36 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     }
     i3 = i4;
     while (1) {
      if ((HEAP32[i29 >> 2] | 0) <= 0) break L211;
      i1 = HEAP32[i36 >> 2] | 0;
      do if (!i1) i2 = 1; else {
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[i36 >> 2] = 0;
        i2 = 1;
        break;
       } else {
        i2 = (HEAP32[i36 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!i3) i35 = 220; else {
       i1 = HEAP32[i3 + 12 >> 2] | 0;
       if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[i37 >> 2] = 0;
        i35 = 220;
        break;
       } else if (i2) {
        i4 = i3;
        break;
       } else {
        i35 = 226;
        break L21;
       }
      } while (0);
      if ((i35 | 0) == 220) {
       i35 = 0;
       if (i2) {
        i35 = 226;
        break L21;
       } else i4 = 0;
      }
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2] & 31](i31, 2048, i1) | 0)) {
       i35 = 226;
       break L21;
      }
      if ((HEAP32[i33 >> 2] | 0) == (HEAP32[i24 >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i32, i33, i24);
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      i2 = HEAP32[i33 >> 2] | 0;
      HEAP32[i33 >> 2] = i2 + 4;
      HEAP32[i2 >> 2] = i1;
      HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
      i1 = HEAP32[i36 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
       HEAP32[i2 >> 2] = i3 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
      }
      i3 = i4;
     }
    } while (0);
    if ((HEAP32[i33 >> 2] | 0) == (HEAP32[i32 >> 2] | 0)) {
     i35 = 237;
     break L21;
    } else i1 = i34;
    break;
   }
  default:
   i1 = i34;
  } while (0);
  L286 : do if ((i35 | 0) == 46) {
   i35 = 0;
   i3 = i10;
   while (1) {
    i1 = HEAP32[i36 >> 2] | 0;
    do if (!i1) i2 = 1; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i36 >> 2] = 0;
      i2 = 1;
      break;
     } else {
      i2 = (HEAP32[i36 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!i3) i35 = 60; else {
     i1 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i37 >> 2] = 0;
      i35 = 60;
      break;
     } else if (i2) {
      i4 = i3;
      break;
     } else {
      i1 = i34;
      break L286;
     }
    } while (0);
    if ((i35 | 0) == 60) {
     i35 = 0;
     if (i2) {
      i1 = i34;
      break L286;
     } else i4 = 0;
    }
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i31 >> 2] | 0) + 12 >> 2] & 31](i31, 8192, i1) | 0)) {
     i1 = i34;
     break L286;
    }
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = i1 + 12 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
     HEAP32[i2 >> 2] = i3 + 4;
     i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
    i3 = i4;
   }
  } while (0);
  i34 = i1;
  i11 = i11 + 1 | 0;
 }
 L322 : do if ((i35 | 0) == 44) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 103) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 146) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 201) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 226) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 237) {
  HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
  i2 = 0;
 } else if ((i35 | 0) == 239) {
  L324 : do if (i34 | 0) {
   i5 = i34 + 8 + 3 | 0;
   i6 = i34 + 4 | 0;
   i4 = 1;
   L326 : while (1) {
    i1 = HEAP8[i5 >> 0] | 0;
    if (i1 << 24 >> 24 < 0) i1 = HEAP32[i6 >> 2] | 0; else i1 = i1 & 255;
    if (i4 >>> 0 >= i1 >>> 0) break L324;
    i1 = HEAP32[i36 >> 2] | 0;
    do if (!i1) i3 = 1; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i36 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i36 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    i1 = HEAP32[i37 >> 2] | 0;
    do if (!i1) i35 = 258; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i37 >> 2] = 0;
      i35 = 258;
      break;
     } else if (i3) break; else break L326;
    } while (0);
    if ((i35 | 0) == 258) {
     i35 = 0;
     if (i3) break;
    }
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if ((HEAP8[i5 >> 0] | 0) < 0) i2 = HEAP32[i34 >> 2] | 0; else i2 = i34;
    if ((i1 | 0) != (HEAP32[i2 + (i4 << 2) >> 2] | 0)) break;
    i1 = HEAP32[i36 >> 2] | 0;
    i2 = i1 + 12 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
     HEAP32[i2 >> 2] = i3 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    }
    i4 = i4 + 1 | 0;
   }
   HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
   i2 = 0;
   break L322;
  } while (0);
  i2 = HEAP32[i46 >> 2] | 0;
  i1 = HEAP32[i38 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) i2 = 1; else {
   HEAP32[i39 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i41, i2, i1, i39);
   if (!(HEAP32[i39 >> 2] | 0)) {
    i2 = 1;
    break;
   } else {
    HEAP32[i40 >> 2] = HEAP32[i40 >> 2] | 4;
    i2 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i45);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i44);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i43);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i42);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i41);
 i1 = HEAP32[i46 >> 2] | 0;
 HEAP32[i46 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i46 + 4 >> 2] & 127](i1);
 STACKTOP = i47;
 return i2 | 0;
}

function _vfscanf(i31, i1, i24) {
 i31 = i31 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0;
 i30 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i26 = i33 + 264 | 0;
 i27 = i33;
 i28 = i33 + 260 | 0;
 i29 = i33 + 272 | 0;
 if ((HEAP32[i31 + 76 >> 2] | 0) > -1) i32 = ___lockfile(i31) | 0; else i32 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 L4 : do if (!(i2 << 24 >> 24)) i1 = 0; else {
  i17 = i31 + 4 | 0;
  i18 = i31 + 100 | 0;
  i19 = i31 + 108 | 0;
  i20 = i31 + 8 | 0;
  i21 = i27 + 10 | 0;
  i22 = i27 + 33 | 0;
  i23 = i27 + 46 | 0;
  i25 = i27 + 94 | 0;
  i16 = i26 + 4 | 0;
  i5 = i1;
  i13 = 0;
  i1 = 0;
  i3 = 0;
  i4 = i2;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i6 = (HEAP8[i5 >> 0] | 0) == 37;
    L10 : do if (i6) {
     i4 = i5 + 1 | 0;
     i7 = HEAP8[i4 >> 0] | 0;
     L12 : do switch (i7 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i15 = 0;
       i4 = i5 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit(i7 & 255) | 0) if ((HEAP8[i5 + 2 >> 0] | 0) == 36) {
        i15 = _arg_n(i24, (HEAPU8[i4 >> 0] | 0) + -48 | 0) | 0;
        i4 = i5 + 3 | 0;
        break L12;
       }
       i14 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i15 = HEAP32[i14 >> 2] | 0;
       HEAP32[i24 >> 2] = i14 + 4;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[i4 >> 0] | 0) | 0)) {
      i11 = 0;
      i7 = i4;
     } else {
      i5 = 0;
      do {
       i5 = (i5 * 10 | 0) + -48 + (HEAPU8[i4 >> 0] | 0) | 0;
       i4 = i4 + 1 | 0;
      } while ((_isdigit(HEAPU8[i4 >> 0] | 0) | 0) != 0);
      i11 = i5;
      i7 = i4;
     }
     i6 = HEAP8[i7 >> 0] | 0;
     i9 = i7 + 1 | 0;
     if (i6 << 24 >> 24 == 109) {
      i4 = (i15 | 0) != 0 & 1;
      i3 = 0;
      i5 = i9;
      i7 = i7 + 2 | 0;
      i6 = HEAP8[i9 >> 0] | 0;
      i2 = 0;
     } else {
      i4 = 0;
      i5 = i7;
      i7 = i9;
     }
     switch (i6 << 24 >> 24) {
     case 104:
      {
       i14 = (HEAP8[i7 >> 0] | 0) == 104;
       i6 = i14 ? -2 : -1;
       i5 = i14 ? i5 + 2 | 0 : i7;
       break;
      }
     case 108:
      {
       i14 = (HEAP8[i7 >> 0] | 0) == 108;
       i6 = i14 ? 3 : 1;
       i5 = i14 ? i5 + 2 | 0 : i7;
       break;
      }
     case 106:
      {
       i6 = 3;
       i5 = i7;
       break;
      }
     case 116:
     case 122:
      {
       i6 = 1;
       i5 = i7;
       break;
      }
     case 76:
      {
       i6 = 2;
       i5 = i7;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i6 = 0;
       break;
      }
     default:
      {
       i30 = 143;
       break L6;
      }
     }
     i10 = HEAPU8[i5 >> 0] | 0;
     i12 = (i10 & 47 | 0) == 3;
     i10 = i12 ? i10 | 32 : i10;
     i12 = i12 ? 1 : i6;
     i9 = i10 & 255;
     switch (i9 << 24 >> 24) {
     case 99:
      {
       i11 = (i11 | 0) > 1 ? i11 : 1;
       break;
      }
     case 91:
      break;
     case 110:
      {
       _store_int(i15, i12, i13, ((i13 | 0) < 0) << 31 >> 31);
       i6 = i13;
       break L8;
      }
     default:
      {
       ___shlim(i31, 0);
       do {
        i6 = HEAP32[i17 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
         HEAP32[i17 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i31) | 0;
       } while ((_isspace(i6) | 0) != 0);
       if (!(HEAP32[i18 >> 2] | 0)) i6 = HEAP32[i17 >> 2] | 0; else {
        i6 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
        HEAP32[i17 >> 2] = i6;
       }
       i13 = (HEAP32[i19 >> 2] | 0) + i13 + i6 - (HEAP32[i20 >> 2] | 0) | 0;
      }
     }
     ___shlim(i31, i11);
     i7 = HEAP32[i17 >> 2] | 0;
     i6 = HEAP32[i18 >> 2] | 0;
     if (i7 >>> 0 < i6 >>> 0) HEAP32[i17 >> 2] = i7 + 1; else {
      if ((___shgetc(i31) | 0) < 0) {
       i30 = 143;
       break L6;
      }
      i6 = HEAP32[i18 >> 2] | 0;
     }
     if (i6 | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
     L59 : do switch (i9 << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       i14 = (i10 | 0) == 99;
       L61 : do if ((i10 | 16 | 0) == 115) {
        _memset(i27 | 0, -1, 257) | 0;
        HEAP8[i27 >> 0] = 0;
        if ((i10 | 0) == 115) {
         HEAP8[i22 >> 0] = 0;
         HEAP16[i21 >> 1] = 0;
         HEAP16[i21 + 2 >> 1] = 0;
         HEAP8[i21 + 4 >> 0] = 0;
        }
       } else {
        i10 = i5 + 1 | 0;
        i9 = (HEAP8[i10 >> 0] | 0) == 94;
        i6 = i9 & 1;
        i5 = i9 ? i5 + 2 | 0 : i10;
        _memset(i27 | 0, i6 | 0, 257) | 0;
        HEAP8[i27 >> 0] = 0;
        switch (HEAP8[i5 >> 0] | 0) {
        case 45:
         {
          i9 = (i6 ^ 1) & 255;
          HEAP8[i23 >> 0] = i9;
          i5 = i5 + 1 | 0;
          break;
         }
        case 93:
         {
          i9 = (i6 ^ 1) & 255;
          HEAP8[i25 >> 0] = i9;
          i5 = i5 + 1 | 0;
          break;
         }
        default:
         i9 = (i6 ^ 1) & 255;
        }
        while (1) {
         i6 = HEAP8[i5 >> 0] | 0;
         L72 : do switch (i6 << 24 >> 24) {
         case 0:
          {
           i30 = 143;
           break L6;
          }
         case 93:
          break L61;
         case 45:
          {
           i7 = i5 + 1 | 0;
           i6 = HEAP8[i7 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 93:
           case 0:
            {
             i6 = 45;
             break L72;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i6 & 255)) {
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i27 + i5 >> 0] = i9;
             i6 = HEAP8[i7 >> 0] | 0;
            } while (i5 >>> 0 < (i6 & 255) >>> 0);
            i5 = i7;
           } else i5 = i7;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i27 + ((i6 & 255) + 1) >> 0] = i9;
         i5 = i5 + 1 | 0;
        }
       } while (0);
       i6 = i14 ? i11 + 1 | 0 : 31;
       i10 = (i12 | 0) == 1;
       i12 = (i4 | 0) != 0;
       L80 : do if (i10) {
        if (i12) {
         i2 = _malloc(i6 << 2) | 0;
         if (!i2) {
          i3 = 0;
          i2 = 0;
          i30 = 143;
          break L6;
         }
        } else i2 = i15;
        HEAP32[i26 >> 2] = 0;
        HEAP32[i16 >> 2] = 0;
        i3 = 0;
        L85 : while (1) {
         i9 = (i2 | 0) == 0;
         do {
          L89 : while (1) {
           i7 = HEAP32[i17 >> 2] | 0;
           if (i7 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
            HEAP32[i17 >> 2] = i7 + 1;
            i7 = HEAPU8[i7 >> 0] | 0;
           } else i7 = ___shgetc(i31) | 0;
           if (!(HEAP8[i27 + (i7 + 1) >> 0] | 0)) break L85;
           HEAP8[i29 >> 0] = i7;
           switch (_mbrtowc(i28, i29, 1, i26) | 0) {
           case -1:
            {
             i3 = 0;
             i30 = 143;
             break L6;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if (!i9) {
           HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i28 >> 2];
           i3 = i3 + 1 | 0;
          }
         } while (!(i12 & (i3 | 0) == (i6 | 0)));
         i6 = i6 << 1 | 1;
         i7 = _realloc(i2, i6 << 2) | 0;
         if (!i7) {
          i3 = 0;
          i30 = 143;
          break L6;
         } else i2 = i7;
        }
        if (!(_mbsinit(i26) | 0)) {
         i3 = 0;
         i30 = 143;
         break L6;
        } else {
         i9 = i3;
         i3 = 0;
         i7 = i2;
        }
       } else {
        if (i12) {
         i3 = _malloc(i6) | 0;
         if (!i3) {
          i3 = 0;
          i2 = 0;
          i30 = 143;
          break L6;
         }
         i2 = 0;
         while (1) {
          i9 = i2;
          do {
           i2 = HEAP32[i17 >> 2] | 0;
           if (i2 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
            HEAP32[i17 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else i2 = ___shgetc(i31) | 0;
           if (!(HEAP8[i27 + (i2 + 1) >> 0] | 0)) {
            i7 = 0;
            i2 = 0;
            break L80;
           }
           i7 = i9;
           i9 = i9 + 1 | 0;
           HEAP8[i3 + i7 >> 0] = i2;
          } while ((i9 | 0) != (i6 | 0));
          i6 = i6 << 1 | 1;
          i7 = _realloc(i3, i6) | 0;
          if (!i7) {
           i2 = 0;
           i30 = 143;
           break L6;
          } else {
           i2 = i9;
           i3 = i7;
          }
         }
        }
        if (!i15) while (1) {
         i2 = HEAP32[i17 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
          HEAP32[i17 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i31) | 0;
         if (!(HEAP8[i27 + (i2 + 1) >> 0] | 0)) {
          i9 = 0;
          i3 = 0;
          i7 = 0;
          i2 = 0;
          break L80;
         }
        }
        i3 = 0;
        while (1) {
         i2 = HEAP32[i17 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
          HEAP32[i17 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i31) | 0;
         if (!(HEAP8[i27 + (i2 + 1) >> 0] | 0)) {
          i9 = i3;
          i3 = i15;
          i7 = 0;
          i2 = 0;
          break L80;
         }
         HEAP8[i15 + i3 >> 0] = i2;
         i3 = i3 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[i18 >> 2] | 0)) i6 = HEAP32[i17 >> 2] | 0; else {
        i6 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
        HEAP32[i17 >> 2] = i6;
       }
       i6 = i6 - (HEAP32[i20 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0;
       if (!i6) break L6;
       if (!((i6 | 0) == (i11 | 0) | i14 ^ 1)) break L6;
       do if (i12) if (i10) {
        HEAP32[i15 >> 2] = i7;
        break;
       } else {
        HEAP32[i15 >> 2] = i3;
        break;
       } while (0);
       if (!i14) {
        if (i7 | 0) HEAP32[i7 + (i9 << 2) >> 2] = 0;
        if (!i3) {
         i3 = 0;
         break L59;
        }
        HEAP8[i3 + i9 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i30 = 131;
       break;
      }
     case 111:
      {
       i6 = 8;
       i30 = 131;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i30 = 131;
       break;
      }
     case 105:
      {
       i6 = 0;
       i30 = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d8 = +___floatscan(i31, i12, 0);
       if ((HEAP32[i19 >> 2] | 0) == ((HEAP32[i20 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0)) break L6;
       if (i15) switch (i12 | 0) {
       case 0:
        {
         HEAPF32[i15 >> 2] = Math_fround(d8);
         break L59;
        }
       case 1:
        {
         HEAPF64[i15 >> 3] = d8;
         break L59;
        }
       case 2:
        {
         HEAPF64[i15 >> 3] = d8;
         break L59;
        }
       default:
        break L59;
       }
       break;
      }
     default:
      {}
     } while (0);
     do if ((i30 | 0) == 131) {
      i30 = 0;
      i6 = ___intscan(i31, i6, 0, -1, -1) | 0;
      i7 = getTempRet0() | 0;
      if ((HEAP32[i19 >> 2] | 0) == ((HEAP32[i20 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0)) break L6;
      if ((i15 | 0) != 0 & (i10 | 0) == 112) {
       HEAP32[i15 >> 2] = i6;
       break;
      } else {
       _store_int(i15, i12, i6, i7);
       break;
      }
     } while (0);
     i1 = i1 + ((i15 | 0) != 0 & 1) | 0;
     i6 = (HEAP32[i19 >> 2] | 0) + i13 + (HEAP32[i17 >> 2] | 0) - (HEAP32[i20 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i5 + (i6 & 1) | 0;
    ___shlim(i31, 0);
    i4 = HEAP32[i17 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
     HEAP32[i17 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i31) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i30 = 23;
     break L6;
    }
    i6 = i13 + 1 | 0;
   } else {
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i31, 0);
    do {
     i4 = HEAP32[i17 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
      HEAP32[i17 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i31) | 0;
    } while ((_isspace(i4) | 0) != 0);
    if (!(HEAP32[i18 >> 2] | 0)) i4 = HEAP32[i17 >> 2] | 0; else {
     i4 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
     HEAP32[i17 >> 2] = i4;
    }
    i6 = (HEAP32[i19 >> 2] | 0) + i13 + i4 - (HEAP32[i20 >> 2] | 0) | 0;
   } while (0);
   i5 = i5 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else i13 = i6;
  }
  if ((i30 | 0) == 23) {
   if (HEAP32[i18 >> 2] | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i4 = 0;
    i1 = i3;
    i30 = 144;
   }
  } else if ((i30 | 0) == 143) if (!i1) {
   i1 = i3;
   i30 = 144;
  }
  if ((i30 | 0) == 144) {
   i3 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i3);
   _free(i2);
  }
 } while (0);
 if (i32 | 0) ___unlockfile(i31);
 STACKTOP = i33;
 return i1 | 0;
}

function _fmt_fp(i25, d4, i27, i11, i26, i18) {
 i25 = i25 | 0;
 d4 = +d4;
 i27 = i27 | 0;
 i11 = i11 | 0;
 i26 = i26 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i28 = 0;
 i12 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i3 = i28 + 32 | 0;
 i14 = i28 + 536 | 0;
 i24 = i28;
 i23 = i24;
 i5 = i28 + 540 | 0;
 HEAP32[i14 >> 2] = 0;
 i22 = i5 + 12 | 0;
 ___DOUBLE_BITS(d4) | 0;
 i1 = getTempRet0() | 0;
 if ((i1 | 0) < 0) {
  d4 = -d4;
  ___DOUBLE_BITS(d4) | 0;
  i21 = 1;
  i20 = 12539;
  i1 = getTempRet0() | 0;
 } else {
  i21 = (i26 & 2049 | 0) != 0 & 1;
  i20 = (i26 & 2048 | 0) == 0 ? ((i26 & 1 | 0) == 0 ? 12540 : 12545) : 12542;
 }
 do if (0 == 0 & (i1 & 2146435072 | 0) == 2146435072) {
  i24 = (i18 & 32 | 0) != 0;
  i1 = i21 + 3 | 0;
  _pad_267(i25, 32, i27, i1, i26 & -65537);
  _out_261(i25, i20, i21);
  _out_261(i25, d4 != d4 | 0.0 != 0.0 ? (i24 ? 12594 : 12566) : i24 ? 12558 : 12562, 3);
  _pad_267(i25, 32, i27, i1, i26 ^ 8192);
 } else {
  d4 = +_frexpl(d4, i14) * 2.0;
  i1 = d4 != 0.0;
  if (i1) HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
  i13 = i18 | 32;
  if ((i13 | 0) == 97) {
   i8 = i18 & 32;
   i10 = (i8 | 0) == 0 ? i20 : i20 + 9 | 0;
   i9 = i21 | 2;
   i1 = 12 - i11 | 0;
   do if (!(i11 >>> 0 > 11 | (i1 | 0) == 0)) {
    d6 = 8.0;
    do {
     i1 = i1 + -1 | 0;
     d6 = d6 * 16.0;
    } while ((i1 | 0) != 0);
    if ((HEAP8[i10 >> 0] | 0) == 45) {
     d4 = -(d6 + (-d4 - d6));
     break;
    } else {
     d4 = d4 + d6 - d6;
     break;
    }
   } while (0);
   i2 = HEAP32[i14 >> 2] | 0;
   i1 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   if ((i1 | 0) == (i22 | 0)) {
    i1 = i5 + 11 | 0;
    HEAP8[i1 >> 0] = 48;
   }
   HEAP8[i1 + -1 >> 0] = (i2 >> 31 & 2) + 43;
   i7 = i1 + -2 | 0;
   HEAP8[i7 >> 0] = i18 + 15;
   i2 = (i11 | 0) < 1;
   i3 = (i26 & 8 | 0) == 0;
   i5 = i24;
   do {
    i21 = ~~d4;
    i1 = i5 + 1 | 0;
    HEAP8[i5 >> 0] = i8 | HEAPU8[1728 + i21 >> 0];
    d4 = (d4 - +(i21 | 0)) * 16.0;
    if ((i1 - i23 | 0) == 1) if (i3 & (i2 & d4 == 0.0)) i5 = i1; else {
     HEAP8[i1 >> 0] = 46;
     i5 = i5 + 2 | 0;
    } else i5 = i1;
   } while (d4 != 0.0);
   if (!i11) i12 = 25; else if ((-2 - i23 + i5 | 0) < (i11 | 0)) {
    i2 = i22;
    i3 = i7;
    i1 = i11 + 2 + i2 - i3 | 0;
   } else i12 = 25;
   if ((i12 | 0) == 25) {
    i2 = i22;
    i3 = i7;
    i1 = i2 - i23 - i3 + i5 | 0;
   }
   i22 = i1 + i9 | 0;
   _pad_267(i25, 32, i27, i22, i26);
   _out_261(i25, i10, i9);
   _pad_267(i25, 48, i27, i22, i26 ^ 65536);
   i23 = i5 - i23 | 0;
   _out_261(i25, i24, i23);
   i24 = i2 - i3 | 0;
   _pad_267(i25, 48, i1 - (i23 + i24) | 0, 0, 0);
   _out_261(i25, i7, i24);
   _pad_267(i25, 32, i27, i22, i26 ^ 8192);
   i1 = i22;
   break;
  }
  i2 = (i11 | 0) < 0 ? 6 : i11;
  if (i1) {
   i1 = (HEAP32[i14 >> 2] | 0) + -28 | 0;
   HEAP32[i14 >> 2] = i1;
   d4 = d4 * 268435456.0;
  } else i1 = HEAP32[i14 >> 2] | 0;
  i19 = (i1 | 0) < 0 ? i3 : i3 + 288 | 0;
  i3 = i19;
  do {
   i17 = ~~d4 >>> 0;
   HEAP32[i3 >> 2] = i17;
   i3 = i3 + 4 | 0;
   d4 = (d4 - +(i17 >>> 0)) * 1.0e9;
  } while (d4 != 0.0);
  i17 = i19;
  if ((i1 | 0) > 0) {
   i8 = i19;
   while (1) {
    i7 = (i1 | 0) < 29 ? i1 : 29;
    i1 = i3 + -4 | 0;
    if (i1 >>> 0 < i8 >>> 0) i5 = i8; else {
     i5 = 0;
     do {
      i12 = _bitshift64Shl(HEAP32[i1 >> 2] | 0, 0, i7 | 0) | 0;
      i12 = _i64Add(i12 | 0, getTempRet0() | 0, i5 | 0, 0) | 0;
      i15 = getTempRet0() | 0;
      i5 = ___udivdi3(i12 | 0, i15 | 0, 1e9, 0) | 0;
      i16 = ___muldi3(i5 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      i16 = _i64Subtract(i12 | 0, i15 | 0, i16 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[i1 >> 2] = i16;
      i1 = i1 + -4 | 0;
     } while (i1 >>> 0 >= i8 >>> 0);
     if (!i5) i5 = i8; else {
      i16 = i8 + -4 | 0;
      HEAP32[i16 >> 2] = i5;
      i5 = i16;
     }
    }
    L57 : do if (i3 >>> 0 > i5 >>> 0) {
     i1 = i3;
     while (1) {
      i3 = i1 + -4 | 0;
      if (HEAP32[i3 >> 2] | 0) {
       i3 = i1;
       break L57;
      }
      if (i3 >>> 0 > i5 >>> 0) i1 = i3; else break;
     }
    } while (0);
    i1 = (HEAP32[i14 >> 2] | 0) - i7 | 0;
    HEAP32[i14 >> 2] = i1;
    if ((i1 | 0) > 0) i8 = i5; else break;
   }
  } else i5 = i19;
  if ((i1 | 0) < 0) {
   i11 = ((i2 + 25 | 0) / 9 | 0) + 1 | 0;
   i12 = (i13 | 0) == 102;
   do {
    i10 = 0 - i1 | 0;
    i10 = (i10 | 0) < 9 ? i10 : 9;
    if (i5 >>> 0 < i3 >>> 0) {
     i7 = (1 << i10) + -1 | 0;
     i8 = 1e9 >>> i10;
     i9 = 0;
     i1 = i5;
     do {
      i16 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = (i16 >>> i10) + i9;
      i9 = Math_imul(i16 & i7, i8) | 0;
      i1 = i1 + 4 | 0;
     } while (i1 >>> 0 < i3 >>> 0);
     i5 = (HEAP32[i5 >> 2] | 0) == 0 ? i5 + 4 | 0 : i5;
     if (i9) {
      HEAP32[i3 >> 2] = i9;
      i3 = i3 + 4 | 0;
     }
    } else i5 = (HEAP32[i5 >> 2] | 0) == 0 ? i5 + 4 | 0 : i5;
    i1 = i12 ? i19 : i5;
    i3 = (i3 - i1 >> 2 | 0) > (i11 | 0) ? i1 + (i11 << 2) | 0 : i3;
    i1 = (HEAP32[i14 >> 2] | 0) + i10 | 0;
    HEAP32[i14 >> 2] = i1;
   } while ((i1 | 0) < 0);
   i12 = i5;
  } else i12 = i5;
  if (i12 >>> 0 < i3 >>> 0) {
   i1 = (i17 - i12 >> 2) * 9 | 0;
   i7 = HEAP32[i12 >> 2] | 0;
   if (i7 >>> 0 >= 10) {
    i5 = 10;
    do {
     i5 = i5 * 10 | 0;
     i1 = i1 + 1 | 0;
    } while (i7 >>> 0 >= i5 >>> 0);
   }
  } else i1 = 0;
  i14 = (i13 | 0) == 103;
  i15 = (i2 | 0) != 0;
  i5 = i2 - ((i13 | 0) == 102 ? 0 : i1) + ((i15 & i14) << 31 >> 31) | 0;
  if ((i5 | 0) < (((i3 - i17 >> 2) * 9 | 0) + -9 | 0)) {
   i16 = i5 + 9216 | 0;
   i5 = (i16 | 0) / 9 | 0;
   i11 = i19 + 4 + (i5 + -1024 << 2) | 0;
   i5 = i16 - (i5 * 9 | 0) | 0;
   if ((i5 | 0) < 8) {
    i7 = 10;
    while (1) {
     i7 = i7 * 10 | 0;
     if ((i5 | 0) < 7) i5 = i5 + 1 | 0; else break;
    }
   } else i7 = 10;
   i9 = HEAP32[i11 >> 2] | 0;
   i5 = (i9 >>> 0) / (i7 >>> 0) | 0;
   i10 = i9 - (Math_imul(i5, i7) | 0) | 0;
   i8 = (i11 + 4 | 0) == (i3 | 0);
   if (i8 & (i10 | 0) == 0) {
    i5 = i11;
    i7 = i12;
   } else {
    d6 = (i5 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    i16 = i7 >>> 1;
    d4 = i10 >>> 0 < i16 >>> 0 ? .5 : i8 & (i10 | 0) == (i16 | 0) ? 1.0 : 1.5;
    if (i21) {
     i16 = (HEAP8[i20 >> 0] | 0) == 45;
     d4 = i16 ? -d4 : d4;
     d6 = i16 ? -d6 : d6;
    }
    i5 = i9 - i10 | 0;
    HEAP32[i11 >> 2] = i5;
    if (d6 + d4 != d6) {
     i16 = i5 + i7 | 0;
     HEAP32[i11 >> 2] = i16;
     if (i16 >>> 0 > 999999999) {
      i7 = i11;
      i1 = i12;
      while (1) {
       i5 = i7 + -4 | 0;
       HEAP32[i7 >> 2] = 0;
       if (i5 >>> 0 < i1 >>> 0) {
        i1 = i1 + -4 | 0;
        HEAP32[i1 >> 2] = 0;
       }
       i16 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
       HEAP32[i5 >> 2] = i16;
       if (i16 >>> 0 > 999999999) i7 = i5; else {
        i7 = i1;
        break;
       }
      }
     } else {
      i5 = i11;
      i7 = i12;
     }
     i1 = (i17 - i7 >> 2) * 9 | 0;
     i9 = HEAP32[i7 >> 2] | 0;
     if (i9 >>> 0 >= 10) {
      i8 = 10;
      do {
       i8 = i8 * 10 | 0;
       i1 = i1 + 1 | 0;
      } while (i9 >>> 0 >= i8 >>> 0);
     }
    } else {
     i5 = i11;
     i7 = i12;
    }
   }
   i16 = i5 + 4 | 0;
   i3 = i3 >>> 0 > i16 >>> 0 ? i16 : i3;
  } else i7 = i12;
  i11 = 0 - i1 | 0;
  L109 : do if (i3 >>> 0 > i7 >>> 0) while (1) {
   i5 = i3 + -4 | 0;
   if (HEAP32[i5 >> 2] | 0) {
    i16 = i3;
    i13 = 1;
    break L109;
   }
   if (i5 >>> 0 > i7 >>> 0) i3 = i5; else {
    i16 = i5;
    i13 = 0;
    break;
   }
  } else {
   i16 = i3;
   i13 = 0;
  } while (0);
  do if (i14) {
   i2 = i2 + ((i15 ^ 1) & 1) | 0;
   if ((i2 | 0) > (i1 | 0) & (i1 | 0) > -5) {
    i9 = i18 + -1 | 0;
    i2 = i2 + -1 - i1 | 0;
   } else {
    i9 = i18 + -2 | 0;
    i2 = i2 + -1 | 0;
   }
   if (!(i26 & 8)) {
    if (i13) {
     i8 = HEAP32[i16 + -4 >> 2] | 0;
     if (!i8) i5 = 9; else if (!((i8 >>> 0) % 10 | 0)) {
      i5 = 0;
      i3 = 10;
      do {
       i3 = i3 * 10 | 0;
       i5 = i5 + 1 | 0;
      } while (!((i8 >>> 0) % (i3 >>> 0) | 0 | 0));
     } else i5 = 0;
    } else i5 = 9;
    i3 = ((i16 - i17 >> 2) * 9 | 0) + -9 | 0;
    if ((i9 | 32 | 0) == 102) {
     i18 = i3 - i5 | 0;
     i18 = (i18 | 0) > 0 ? i18 : 0;
     i2 = (i2 | 0) < (i18 | 0) ? i2 : i18;
     break;
    } else {
     i18 = i3 + i1 - i5 | 0;
     i18 = (i18 | 0) > 0 ? i18 : 0;
     i2 = (i2 | 0) < (i18 | 0) ? i2 : i18;
     break;
    }
   }
  } else i9 = i18; while (0);
  i12 = (i2 | 0) != 0;
  i8 = i12 ? 1 : i26 >>> 3 & 1;
  i10 = (i9 | 32 | 0) == 102;
  if (i10) {
   i15 = 0;
   i1 = (i1 | 0) > 0 ? i1 : 0;
  } else {
   i3 = (i1 | 0) < 0 ? i11 : i1;
   i3 = _fmt_u(i3, ((i3 | 0) < 0) << 31 >> 31, i22) | 0;
   i5 = i22;
   if ((i5 - i3 | 0) < 2) do {
    i3 = i3 + -1 | 0;
    HEAP8[i3 >> 0] = 48;
   } while ((i5 - i3 | 0) < 2);
   HEAP8[i3 + -1 >> 0] = (i1 >> 31 & 2) + 43;
   i1 = i3 + -2 | 0;
   HEAP8[i1 >> 0] = i9;
   i15 = i1;
   i1 = i5 - i1 | 0;
  }
  i1 = i21 + 1 + i2 + i8 + i1 | 0;
  _pad_267(i25, 32, i27, i1, i26);
  _out_261(i25, i20, i21);
  _pad_267(i25, 48, i27, i1, i26 ^ 65536);
  if (i10) {
   i9 = i7 >>> 0 > i19 >>> 0 ? i19 : i7;
   i10 = i24 + 9 | 0;
   i7 = i10;
   i8 = i24 + 8 | 0;
   i5 = i9;
   do {
    i3 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i10) | 0;
    if ((i5 | 0) == (i9 | 0)) {
     if ((i3 | 0) == (i10 | 0)) {
      HEAP8[i8 >> 0] = 48;
      i3 = i8;
     }
    } else if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out_261(i25, i3, i7 - i3 | 0);
    i5 = i5 + 4 | 0;
   } while (i5 >>> 0 <= i19 >>> 0);
   if (!((i26 & 8 | 0) == 0 & (i12 ^ 1))) _out_261(i25, 12570, 1);
   if (i5 >>> 0 < i16 >>> 0 & (i2 | 0) > 0) while (1) {
    i3 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i10) | 0;
    if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out_261(i25, i3, (i2 | 0) < 9 ? i2 : 9);
    i5 = i5 + 4 | 0;
    i3 = i2 + -9 | 0;
    if (!(i5 >>> 0 < i16 >>> 0 & (i2 | 0) > 9)) {
     i2 = i3;
     break;
    } else i2 = i3;
   }
   _pad_267(i25, 48, i2 + 9 | 0, 9, 0);
  } else {
   i14 = i13 ? i16 : i7 + 4 | 0;
   if (i7 >>> 0 < i14 >>> 0 & (i2 | 0) > -1) {
    i11 = i24 + 9 | 0;
    i12 = (i26 & 8 | 0) == 0;
    i13 = i11;
    i9 = 0 - i23 | 0;
    i10 = i24 + 8 | 0;
    i8 = i7;
    do {
     i3 = _fmt_u(HEAP32[i8 >> 2] | 0, 0, i11) | 0;
     if ((i3 | 0) == (i11 | 0)) {
      HEAP8[i10 >> 0] = 48;
      i3 = i10;
     }
     do if ((i8 | 0) == (i7 | 0)) {
      i5 = i3 + 1 | 0;
      _out_261(i25, i3, 1);
      if (i12 & (i2 | 0) < 1) {
       i3 = i5;
       break;
      }
      _out_261(i25, 12570, 1);
      i3 = i5;
     } else {
      if (i3 >>> 0 <= i24 >>> 0) break;
      _memset(i24 | 0, 48, i3 + i9 | 0) | 0;
      do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
     } while (0);
     i23 = i13 - i3 | 0;
     _out_261(i25, i3, (i2 | 0) > (i23 | 0) ? i23 : i2);
     i2 = i2 - i23 | 0;
     i8 = i8 + 4 | 0;
    } while (i8 >>> 0 < i14 >>> 0 & (i2 | 0) > -1);
   }
   _pad_267(i25, 48, i2 + 18 | 0, 18, 0);
   _out_261(i25, i15, i22 - i15 | 0);
  }
  _pad_267(i25, 32, i27, i1, i26 ^ 8192);
 } while (0);
 STACKTOP = i28;
 return ((i1 | 0) < (i27 | 0) ? i27 : i1) | 0;
}

function _printf_core(i19, i1, i24, i25, i26) {
 i19 = i19 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i27 = 0, i28 = 0;
 i13 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i20 = i27 + 56 | 0;
 i21 = i27 + 40 | 0;
 i17 = i27;
 i22 = i27 + 48 | 0;
 i23 = i27 + 60 | 0;
 HEAP32[i20 >> 2] = i1;
 i14 = (i19 | 0) != 0;
 i15 = i17 + 40 | 0;
 i16 = i15;
 i17 = i17 + 39 | 0;
 i18 = i22 + 4 | 0;
 i2 = 0;
 i1 = 0;
 i4 = 0;
 L1 : while (1) {
  do {
   do if ((i1 | 0) > -1) if ((i2 | 0) > (2147483647 - i1 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    i1 = -1;
    break;
   } else {
    i1 = i2 + i1 | 0;
    break;
   } while (0);
   i8 = HEAP32[i20 >> 2] | 0;
   i2 = HEAP8[i8 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i13 = 92;
    break L1;
   }
   i3 = i8;
   L12 : while (1) {
    switch (i2 << 24 >> 24) {
    case 37:
     {
      i13 = 10;
      break L12;
     }
    case 0:
     {
      i2 = i3;
      break L12;
     }
    default:
     {}
    }
    i12 = i3 + 1 | 0;
    HEAP32[i20 >> 2] = i12;
    i2 = HEAP8[i12 >> 0] | 0;
    i3 = i12;
   }
   L15 : do if ((i13 | 0) == 10) {
    i13 = 0;
    i2 = i3;
    do {
     if ((HEAP8[i3 + 1 >> 0] | 0) != 37) break L15;
     i2 = i2 + 1 | 0;
     i3 = i3 + 2 | 0;
     HEAP32[i20 >> 2] = i3;
    } while ((HEAP8[i3 >> 0] | 0) == 37);
   } while (0);
   i2 = i2 - i8 | 0;
   if (i14) _out_261(i19, i8, i2);
  } while ((i2 | 0) != 0);
  i12 = (_isdigit(HEAP8[(HEAP32[i20 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  i3 = HEAP32[i20 >> 2] | 0;
  if (i12) {
   i10 = -1;
   i6 = i4;
   i2 = 1;
  } else if ((HEAP8[i3 + 2 >> 0] | 0) == 36) {
   i10 = (HEAP8[i3 + 1 >> 0] | 0) + -48 | 0;
   i6 = 1;
   i2 = 3;
  } else {
   i10 = -1;
   i6 = i4;
   i2 = 1;
  }
  i2 = i3 + i2 | 0;
  HEAP32[i20 >> 2] = i2;
  i3 = HEAP8[i2 >> 0] | 0;
  i4 = (i3 << 24 >> 24) + -32 | 0;
  if (i4 >>> 0 > 31 | (1 << i4 & 75913 | 0) == 0) i5 = 0; else {
   i5 = 0;
   do {
    i5 = 1 << i4 | i5;
    i2 = i2 + 1 | 0;
    HEAP32[i20 >> 2] = i2;
    i3 = HEAP8[i2 >> 0] | 0;
    i4 = (i3 << 24 >> 24) + -32 | 0;
   } while (!(i4 >>> 0 > 31 | (1 << i4 & 75913 | 0) == 0));
  }
  if (i3 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[i2 + 1 >> 0] | 0) | 0)) i13 = 27; else {
    i3 = HEAP32[i20 >> 2] | 0;
    if ((HEAP8[i3 + 2 >> 0] | 0) == 36) {
     i2 = i3 + 1 | 0;
     HEAP32[i26 + ((HEAP8[i2 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i2 = HEAP32[i25 + ((HEAP8[i2 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i4 = 1;
     i3 = i3 + 3 | 0;
    } else i13 = 27;
   }
   if ((i13 | 0) == 27) {
    i13 = 0;
    if (i6 | 0) {
     i1 = -1;
     break;
    }
    if (i14) {
     i12 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i2 = HEAP32[i12 >> 2] | 0;
     HEAP32[i24 >> 2] = i12 + 4;
    } else i2 = 0;
    i4 = 0;
    i3 = (HEAP32[i20 >> 2] | 0) + 1 | 0;
   }
   HEAP32[i20 >> 2] = i3;
   i12 = (i2 | 0) < 0;
   i11 = i12 ? 0 - i2 | 0 : i2;
   i5 = i12 ? i5 | 8192 : i5;
   i12 = i4;
  } else {
   i2 = _getint_262(i20) | 0;
   if ((i2 | 0) < 0) {
    i1 = -1;
    break;
   }
   i11 = i2;
   i12 = i6;
   i3 = HEAP32[i20 >> 2] | 0;
  }
  do if ((HEAP8[i3 >> 0] | 0) == 46) {
   i2 = i3 + 1 | 0;
   if ((HEAP8[i2 >> 0] | 0) != 42) {
    HEAP32[i20 >> 2] = i2;
    i2 = _getint_262(i20) | 0;
    i3 = HEAP32[i20 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[i3 + 2 >> 0] | 0) | 0) {
    i2 = HEAP32[i20 >> 2] | 0;
    if ((HEAP8[i2 + 3 >> 0] | 0) == 36) {
     i9 = i2 + 2 | 0;
     HEAP32[i26 + ((HEAP8[i9 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i9 = HEAP32[i25 + ((HEAP8[i9 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i3 = i2 + 4 | 0;
     HEAP32[i20 >> 2] = i3;
     i2 = i9;
     break;
    }
   }
   if (i12 | 0) {
    i1 = -1;
    break L1;
   }
   if (i14) {
    i9 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i2 = HEAP32[i9 >> 2] | 0;
    HEAP32[i24 >> 2] = i9 + 4;
   } else i2 = 0;
   i3 = (HEAP32[i20 >> 2] | 0) + 2 | 0;
   HEAP32[i20 >> 2] = i3;
  } else i2 = -1; while (0);
  i9 = 0;
  while (1) {
   if (((HEAP8[i3 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i4 = i3;
   i3 = i3 + 1 | 0;
   HEAP32[i20 >> 2] = i3;
   i4 = HEAP8[(HEAP8[i4 >> 0] | 0) + -65 + (1264 + (i9 * 58 | 0)) >> 0] | 0;
   i6 = i4 & 255;
   if ((i6 + -1 | 0) >>> 0 >= 8) break; else i9 = i6;
  }
  if (!(i4 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i7 = (i10 | 0) > -1;
  do if (i4 << 24 >> 24 == 19) if (i7) {
   i1 = -1;
   break L1;
  } else i13 = 54; else {
   if (i7) {
    HEAP32[i26 + (i10 << 2) >> 2] = i6;
    i7 = i25 + (i10 << 3) | 0;
    i10 = HEAP32[i7 + 4 >> 2] | 0;
    i13 = i21;
    HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i13 + 4 >> 2] = i10;
    i13 = 54;
    break;
   }
   if (!i14) {
    i1 = 0;
    break L1;
   }
   _pop_arg_264(i21, i6, i24);
   i3 = HEAP32[i20 >> 2] | 0;
   i13 = 55;
  } while (0);
  if ((i13 | 0) == 54) {
   i13 = 0;
   if (i14) i13 = 55; else i2 = 0;
  }
  L77 : do if ((i13 | 0) == 55) {
   i13 = 0;
   i3 = HEAP8[i3 + -1 >> 0] | 0;
   i3 = (i9 | 0) != 0 & (i3 & 15 | 0) == 3 ? i3 & -33 : i3;
   i7 = i5 & -65537;
   i10 = (i5 & 8192 | 0) == 0 ? i5 : i7;
   L79 : do switch (i3 | 0) {
   case 110:
    switch ((i9 & 255) << 24 >> 24) {
    case 0:
     {
      HEAP32[HEAP32[i21 >> 2] >> 2] = i1;
      i2 = 0;
      break L77;
     }
    case 1:
     {
      HEAP32[HEAP32[i21 >> 2] >> 2] = i1;
      i2 = 0;
      break L77;
     }
    case 2:
     {
      i2 = HEAP32[i21 >> 2] | 0;
      HEAP32[i2 >> 2] = i1;
      HEAP32[i2 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
      i2 = 0;
      break L77;
     }
    case 3:
     {
      HEAP16[HEAP32[i21 >> 2] >> 1] = i1;
      i2 = 0;
      break L77;
     }
    case 4:
     {
      HEAP8[HEAP32[i21 >> 2] >> 0] = i1;
      i2 = 0;
      break L77;
     }
    case 6:
     {
      HEAP32[HEAP32[i21 >> 2] >> 2] = i1;
      i2 = 0;
      break L77;
     }
    case 7:
     {
      i2 = HEAP32[i21 >> 2] | 0;
      HEAP32[i2 >> 2] = i1;
      HEAP32[i2 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
      i2 = 0;
      break L77;
     }
    default:
     {
      i2 = 0;
      break L77;
     }
    }
   case 112:
    {
     i3 = 120;
     i2 = i2 >>> 0 > 8 ? i2 : 8;
     i4 = i10 | 8;
     i13 = 67;
     break;
    }
   case 88:
   case 120:
    {
     i4 = i10;
     i13 = 67;
     break;
    }
   case 111:
    {
     i4 = i21;
     i3 = HEAP32[i4 >> 2] | 0;
     i4 = HEAP32[i4 + 4 >> 2] | 0;
     i8 = _fmt_o(i3, i4, i15) | 0;
     i7 = i16 - i8 | 0;
     i5 = 0;
     i6 = 12522;
     i2 = (i10 & 8 | 0) == 0 | (i2 | 0) > (i7 | 0) ? i2 : i7 + 1 | 0;
     i7 = i10;
     i13 = 73;
     break;
    }
   case 105:
   case 100:
    {
     i4 = i21;
     i3 = HEAP32[i4 >> 2] | 0;
     i4 = HEAP32[i4 + 4 >> 2] | 0;
     if ((i4 | 0) < 0) {
      i3 = _i64Subtract(0, 0, i3 | 0, i4 | 0) | 0;
      i4 = getTempRet0() | 0;
      i5 = i21;
      HEAP32[i5 >> 2] = i3;
      HEAP32[i5 + 4 >> 2] = i4;
      i5 = 1;
      i6 = 12522;
      i13 = 72;
      break L79;
     } else {
      i5 = (i10 & 2049 | 0) != 0 & 1;
      i6 = (i10 & 2048 | 0) == 0 ? ((i10 & 1 | 0) == 0 ? 12522 : 12524) : 12523;
      i13 = 72;
      break L79;
     }
    }
   case 117:
    {
     i4 = i21;
     i5 = 0;
     i6 = 12522;
     i3 = HEAP32[i4 >> 2] | 0;
     i4 = HEAP32[i4 + 4 >> 2] | 0;
     i13 = 72;
     break;
    }
   case 99:
    {
     HEAP8[i17 >> 0] = HEAP32[i21 >> 2];
     i8 = i17;
     i5 = 0;
     i6 = 12522;
     i4 = 1;
     i3 = i7;
     i2 = i16;
     break;
    }
   case 115:
    {
     i9 = HEAP32[i21 >> 2] | 0;
     i9 = (i9 | 0) == 0 ? 12532 : i9;
     i10 = _memchr(i9, 0, i2) | 0;
     i28 = (i10 | 0) == 0;
     i8 = i9;
     i5 = 0;
     i6 = 12522;
     i4 = i28 ? i2 : i10 - i9 | 0;
     i3 = i7;
     i2 = i28 ? i9 + i2 | 0 : i10;
     break;
    }
   case 67:
    {
     HEAP32[i22 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i18 >> 2] = 0;
     HEAP32[i21 >> 2] = i22;
     i6 = -1;
     i13 = 79;
     break;
    }
   case 83:
    {
     if (!i2) {
      _pad_267(i19, 32, i11, 0, i10);
      i2 = 0;
      i13 = 89;
     } else {
      i6 = i2;
      i13 = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     i2 = _fmt_fp(i19, +HEAPF64[i21 >> 3], i11, i2, i10, i3) | 0;
     break L77;
    }
   default:
    {
     i5 = 0;
     i6 = 12522;
     i4 = i2;
     i3 = i10;
     i2 = i16;
    }
   } while (0);
   L102 : do if ((i13 | 0) == 67) {
    i28 = i21;
    i10 = HEAP32[i28 >> 2] | 0;
    i28 = HEAP32[i28 + 4 >> 2] | 0;
    i8 = _fmt_x(i10, i28, i15, i3 & 32) | 0;
    i6 = (i4 & 8 | 0) == 0 | (i10 | 0) == 0 & (i28 | 0) == 0;
    i5 = i6 ? 0 : 2;
    i6 = i6 ? 12522 : 12522 + (i3 >>> 4) | 0;
    i7 = i4;
    i3 = i10;
    i4 = i28;
    i13 = 73;
   } else if ((i13 | 0) == 72) {
    i8 = _fmt_u(i3, i4, i15) | 0;
    i7 = i10;
    i13 = 73;
   } else if ((i13 | 0) == 79) {
    i13 = 0;
    i5 = HEAP32[i21 >> 2] | 0;
    i2 = 0;
    while (1) {
     i3 = HEAP32[i5 >> 2] | 0;
     if (!i3) break;
     i3 = _wctomb(i23, i3) | 0;
     i4 = (i3 | 0) < 0;
     if (i4 | i3 >>> 0 > (i6 - i2 | 0) >>> 0) {
      i13 = 83;
      break;
     }
     i2 = i3 + i2 | 0;
     if (i6 >>> 0 > i2 >>> 0) i5 = i5 + 4 | 0; else break;
    }
    if ((i13 | 0) == 83) {
     i13 = 0;
     if (i4) {
      i1 = -1;
      break L1;
     }
    }
    _pad_267(i19, 32, i11, i2, i10);
    if (!i2) {
     i2 = 0;
     i13 = 89;
    } else {
     i4 = HEAP32[i21 >> 2] | 0;
     i5 = 0;
     while (1) {
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) {
       i13 = 89;
       break L102;
      }
      i3 = _wctomb(i23, i3) | 0;
      i5 = i3 + i5 | 0;
      if ((i5 | 0) > (i2 | 0)) {
       i13 = 89;
       break L102;
      }
      _out_261(i19, i23, i3);
      if (i5 >>> 0 >= i2 >>> 0) {
       i13 = 89;
       break;
      } else i4 = i4 + 4 | 0;
     }
    }
   } while (0);
   if ((i13 | 0) == 73) {
    i13 = 0;
    i4 = (i3 | 0) != 0 | (i4 | 0) != 0;
    i3 = (i2 | 0) != 0 | i4;
    i4 = i16 - i8 + ((i4 ^ 1) & 1) | 0;
    i8 = i3 ? i8 : i15;
    i4 = i3 ? ((i2 | 0) > (i4 | 0) ? i2 : i4) : 0;
    i3 = (i2 | 0) > -1 ? i7 & -65537 : i7;
    i2 = i16;
   } else if ((i13 | 0) == 89) {
    i13 = 0;
    _pad_267(i19, 32, i11, i2, i10 ^ 8192);
    i2 = (i11 | 0) > (i2 | 0) ? i11 : i2;
    break;
   }
   i10 = i2 - i8 | 0;
   i9 = (i4 | 0) < (i10 | 0) ? i10 : i4;
   i28 = i9 + i5 | 0;
   i2 = (i11 | 0) < (i28 | 0) ? i28 : i11;
   _pad_267(i19, 32, i2, i28, i3);
   _out_261(i19, i6, i5);
   _pad_267(i19, 48, i2, i28, i3 ^ 65536);
   _pad_267(i19, 48, i9, i10, 0);
   _out_261(i19, i8, i10);
   _pad_267(i19, 32, i2, i28, i3 ^ 8192);
  } while (0);
  i4 = i12;
 }
 L123 : do if ((i13 | 0) == 92) if (!i19) if (!i4) i1 = 0; else {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i26 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg_264(i25 + (i1 << 3) | 0, i2, i24);
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 10) {
    i1 = 1;
    break L123;
   }
  }
  while (1) {
   if (HEAP32[i26 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L123;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 10) {
    i1 = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i27;
 return i1 | 0;
}

function _decfloat(i23, i2, i26, i25, i24, i20) {
 i23 = i23 | 0;
 i2 = i2 | 0;
 i26 = i26 | 0;
 i25 = i25 | 0;
 i24 = i24 | 0;
 i20 = i20 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0;
 i18 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i27 = i30;
 i28 = i25 + i26 | 0;
 i29 = 0 - i28 | 0;
 i22 = i23 + 4 | 0;
 i21 = i23 + 100 | 0;
 i3 = 0;
 L1 : while (1) {
  switch (i2 | 0) {
  case 46:
   {
    i18 = 7;
    break L1;
   }
  case 48:
   break;
  default:
   {
    i14 = 0;
    i9 = i3;
    i3 = 0;
    i8 = 0;
    break L1;
   }
  }
  i2 = HEAP32[i22 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) {
   HEAP32[i22 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i23) | 0;
  i3 = 1;
 }
 if ((i18 | 0) == 7) {
  i2 = HEAP32[i22 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) {
   HEAP32[i22 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i23) | 0;
  if ((i2 | 0) == 48) {
   i3 = 0;
   i2 = 0;
   while (1) {
    i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
    i8 = getTempRet0() | 0;
    i2 = HEAP32[i22 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) {
     HEAP32[i22 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i23) | 0;
    if ((i2 | 0) == 48) i2 = i8; else {
     i14 = 1;
     i9 = 1;
     break;
    }
   }
  } else {
   i14 = 1;
   i9 = i3;
   i3 = 0;
   i8 = 0;
  }
 }
 HEAP32[i27 >> 2] = 0;
 i7 = i2 + -48 | 0;
 i5 = (i2 | 0) == 46;
 L22 : do if (i5 | i7 >>> 0 < 10) {
  i19 = i27 + 496 | 0;
  i15 = 0;
  i4 = 0;
  i12 = 0;
  i16 = i14;
  i17 = i9;
  i18 = i7;
  i9 = 0;
  i7 = 0;
  L24 : while (1) {
   do if (i5) if (!i16) {
    i16 = 1;
    i3 = i9;
    i8 = i7;
   } else break L24; else {
    i9 = _i64Add(i9 | 0, i7 | 0, 1, 0) | 0;
    i7 = getTempRet0() | 0;
    i14 = (i2 | 0) != 48;
    if ((i4 | 0) >= 125) {
     if (!i14) break;
     HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 1;
     break;
    }
    i5 = i27 + (i4 << 2) | 0;
    if (!i15) i2 = i18; else i2 = i2 + -48 + ((HEAP32[i5 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i5 >> 2] = i2;
    i15 = i15 + 1 | 0;
    i17 = (i15 | 0) == 9;
    i15 = i17 ? 0 : i15;
    i4 = i4 + (i17 & 1) | 0;
    i12 = i14 ? i9 : i12;
    i17 = 1;
   } while (0);
   i2 = HEAP32[i22 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) {
    HEAP32[i22 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i23) | 0;
   i18 = i2 + -48 | 0;
   i5 = (i2 | 0) == 46;
   if (!(i5 | i18 >>> 0 < 10)) {
    i14 = i16;
    i5 = i17;
    i18 = 31;
    break L22;
   }
  }
  i2 = i15;
  i5 = (i17 | 0) != 0;
  i18 = 39;
 } else {
  i15 = 0;
  i4 = 0;
  i12 = 0;
  i5 = i9;
  i9 = 0;
  i7 = 0;
  i18 = 31;
 } while (0);
 do if ((i18 | 0) == 31) {
  i19 = (i14 | 0) == 0;
  i3 = i19 ? i9 : i3;
  i8 = i19 ? i7 : i8;
  i5 = (i5 | 0) != 0;
  if (!(i5 & (i2 | 32 | 0) == 101)) if ((i2 | 0) > -1) {
   i2 = i15;
   i18 = 39;
   break;
  } else {
   i2 = i15;
   i18 = 41;
   break;
  }
  i5 = _scanexp(i23, i20) | 0;
  i2 = getTempRet0() | 0;
  if ((i5 | 0) == 0 & (i2 | 0) == -2147483648) {
   if (!i20) {
    ___shlim(i23, 0);
    d1 = 0.0;
    break;
   }
   if (!(HEAP32[i21 >> 2] | 0)) {
    i5 = 0;
    i2 = 0;
   } else {
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
    i5 = 0;
    i2 = 0;
   }
  }
  i3 = _i64Add(i5 | 0, i2 | 0, i3 | 0, i8 | 0) | 0;
  i2 = i15;
  i8 = getTempRet0() | 0;
  i18 = 43;
 } while (0);
 if ((i18 | 0) == 39) if (!(HEAP32[i21 >> 2] | 0)) i18 = 41; else {
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
  if (i5) i18 = 43; else i18 = 42;
 }
 if ((i18 | 0) == 41) if (i5) i18 = 43; else i18 = 42;
 do if ((i18 | 0) == 42) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim(i23, 0);
  d1 = 0.0;
 } else if ((i18 | 0) == 43) {
  i5 = HEAP32[i27 >> 2] | 0;
  if (!i5) {
   d1 = +(i24 | 0) * 0.0;
   break;
  }
  if (((i7 | 0) < 0 | (i7 | 0) == 0 & i9 >>> 0 < 10) & ((i3 | 0) == (i9 | 0) & (i8 | 0) == (i7 | 0))) if ((i26 | 0) > 30 | (i5 >>> i26 | 0) == 0) {
   d1 = +(i24 | 0) * +(i5 >>> 0);
   break;
  }
  i23 = (i25 | 0) / -2 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i8 | 0) > (i22 | 0) | (i8 | 0) == (i22 | 0) & i3 >>> 0 > i23 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i24 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i23 = i25 + -106 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i8 | 0) < (i22 | 0) | (i8 | 0) == (i22 | 0) & i3 >>> 0 < i23 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i24 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (i2) {
   if ((i2 | 0) < 9) {
    i7 = i27 + (i4 << 2) | 0;
    i5 = HEAP32[i7 >> 2] | 0;
    while (1) {
     i5 = i5 * 10 | 0;
     if ((i2 | 0) >= 8) break; else i2 = i2 + 1 | 0;
    }
    HEAP32[i7 >> 2] = i5;
   }
   i4 = i4 + 1 | 0;
  }
  if ((i12 | 0) < 9) if ((i12 | 0) <= (i3 | 0) & (i3 | 0) < 18) {
   if ((i3 | 0) == 9) {
    d1 = +(i24 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0);
    break;
   }
   if ((i3 | 0) < 9) {
    d1 = +(i24 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0) / +(HEAP32[2016 + (8 - i3 << 2) >> 2] | 0);
    break;
   }
   i23 = i26 + 27 + (Math_imul(i3, -3) | 0) | 0;
   i2 = HEAP32[i27 >> 2] | 0;
   if ((i23 | 0) > 30 | (i2 >>> i23 | 0) == 0) {
    d1 = +(i24 | 0) * +(i2 >>> 0) * +(HEAP32[2016 + (i3 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  i2 = (i3 | 0) % 9 | 0;
  if (!i2) i5 = 0; else {
   i12 = (i3 | 0) > -1 ? i2 : i2 + 9 | 0;
   i8 = HEAP32[2016 + (8 - i12 << 2) >> 2] | 0;
   if (!i4) {
    i5 = 0;
    i2 = 0;
   } else {
    i9 = 1e9 / (i8 | 0) | 0;
    i7 = 0;
    i5 = 0;
    i2 = 0;
    do {
     i21 = i27 + (i2 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = (i22 >>> 0) / (i8 >>> 0) | 0;
     i22 = i22 - (Math_imul(i23, i8) | 0) | 0;
     i23 = i23 + i7 | 0;
     HEAP32[i21 >> 2] = i23;
     i7 = Math_imul(i9, i22) | 0;
     i23 = (i2 | 0) == (i5 | 0) & (i23 | 0) == 0;
     i3 = i23 ? i3 + -9 | 0 : i3;
     i5 = i23 ? i5 + 1 & 127 : i5;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i4 | 0));
    if (!i7) i2 = i4; else {
     HEAP32[i27 + (i4 << 2) >> 2] = i7;
     i2 = i4 + 1 | 0;
    }
   }
   i4 = i2;
   i3 = 9 - i12 + i3 | 0;
  }
  i2 = 0;
  L104 : while (1) {
   i14 = (i3 | 0) < 18;
   i15 = (i3 | 0) == 18;
   i16 = i27 + (i5 << 2) | 0;
   while (1) {
    if (!i14) {
     if (!i15) break L104;
     if ((HEAP32[i16 >> 2] | 0) >>> 0 >= 9007199) {
      i3 = 18;
      break L104;
     }
    }
    i7 = 0;
    i17 = i4;
    i4 = i4 + 127 | 0;
    while (1) {
     i9 = i4 & 127;
     i8 = i27 + (i9 << 2) | 0;
     i4 = _bitshift64Shl(HEAP32[i8 >> 2] | 0, 0, 29) | 0;
     i4 = _i64Add(i4 | 0, getTempRet0() | 0, i7 | 0, 0) | 0;
     i7 = getTempRet0() | 0;
     if (i7 >>> 0 > 0 | (i7 | 0) == 0 & i4 >>> 0 > 1e9) {
      i12 = ___udivdi3(i4 | 0, i7 | 0, 1e9, 0) | 0;
      i23 = ___muldi3(i12 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      i4 = _i64Subtract(i4 | 0, i7 | 0, i23 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
     } else i12 = 0;
     HEAP32[i8 >> 2] = i4;
     i23 = (i9 | 0) == (i5 | 0);
     i8 = (i9 | 0) != (i17 + 127 & 127 | 0) | i23 ? i17 : (i4 | 0) == 0 ? i9 : i17;
     if (i23) break; else {
      i7 = i12;
      i17 = i8;
      i4 = i9 + -1 | 0;
     }
    }
    i2 = i2 + -29 | 0;
    if (!i12) i4 = i17; else break;
   }
   i5 = i5 + 127 & 127;
   i4 = i8 + 127 & 127;
   i7 = i27 + ((i8 + 126 & 127) << 2) | 0;
   if ((i5 | 0) == (i8 | 0)) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | HEAP32[i27 + (i4 << 2) >> 2]; else i4 = i17;
   HEAP32[i27 + (i5 << 2) >> 2] = i12;
   i3 = i3 + 9 | 0;
  }
  L123 : while (1) {
   i15 = i4 + 1 & 127;
   i16 = i27 + ((i4 + 127 & 127) << 2) | 0;
   while (1) {
    i9 = (i3 | 0) == 18;
    i14 = (i3 | 0) > 27 ? 9 : 1;
    i17 = i5;
    while (1) {
     i8 = 0;
     while (1) {
      i5 = i8 + i17 & 127;
      if ((i5 | 0) == (i4 | 0)) {
       i18 = 92;
       break;
      }
      i5 = HEAP32[i27 + (i5 << 2) >> 2] | 0;
      i7 = HEAP32[8964 + (i8 << 2) >> 2] | 0;
      if (i5 >>> 0 < i7 >>> 0) {
       i18 = 92;
       break;
      }
      if (i5 >>> 0 > i7 >>> 0) break;
      if ((i8 + 1 | 0) >>> 0 < 2) i8 = 1; else {
       i18 = 92;
       break;
      }
     }
     if ((i18 | 0) == 92) {
      i18 = 0;
      if (i9) break L123;
     }
     i2 = i14 + i2 | 0;
     if ((i17 | 0) == (i4 | 0)) i17 = i4; else break;
    }
    i9 = (1 << i14) + -1 | 0;
    i12 = 1e9 >>> i14;
    i8 = 0;
    i5 = i17;
    i7 = i17;
    do {
     i21 = i27 + (i7 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = (i22 >>> i14) + i8 | 0;
     HEAP32[i21 >> 2] = i23;
     i8 = Math_imul(i22 & i9, i12) | 0;
     i23 = (i7 | 0) == (i5 | 0) & (i23 | 0) == 0;
     i3 = i23 ? i3 + -9 | 0 : i3;
     i5 = i23 ? i5 + 1 & 127 : i5;
     i7 = i7 + 1 & 127;
    } while ((i7 | 0) != (i4 | 0));
    if (i8 | 0) {
     if ((i15 | 0) != (i5 | 0)) break;
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 1;
    }
   }
   HEAP32[i27 + (i4 << 2) >> 2] = i8;
   i4 = i15;
  }
  d1 = 0.0;
  i3 = i4;
  i5 = 0;
  do {
   i7 = i5 + i17 & 127;
   i4 = i3 + 1 & 127;
   if ((i7 | 0) == (i3 | 0)) {
    HEAP32[i27 + (i4 + -1 << 2) >> 2] = 0;
    i3 = i4;
   }
   d1 = d1 * 1.0e9 + +((HEAP32[i27 + (i7 << 2) >> 2] | 0) >>> 0);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 2);
  d13 = +(i24 | 0);
  d6 = d1 * d13;
  i5 = i2 + 53 | 0;
  i8 = i5 - i25 | 0;
  i9 = (i8 | 0) < (i26 | 0);
  i7 = i9 ? ((i8 | 0) > 0 ? i8 : 0) : i26;
  if ((i7 | 0) < 53) {
   d31 = +_copysignl(+_scalbn(1.0, 105 - i7 | 0), d6);
   d10 = +_fmodl(d6, +_scalbn(1.0, 53 - i7 | 0));
   d11 = d31;
   d1 = d10;
   d10 = d31 + (d6 - d10);
  } else {
   d11 = 0.0;
   d1 = 0.0;
   d10 = d6;
  }
  i4 = i17 + 2 & 127;
  if ((i4 | 0) == (i3 | 0)) d6 = d1; else {
   i4 = HEAP32[i27 + (i4 << 2) >> 2] | 0;
   do if (i4 >>> 0 < 5e8) {
    if (!i4) if ((i17 + 3 & 127 | 0) == (i3 | 0)) break;
    d1 = d13 * .25 + d1;
   } else {
    if ((i4 | 0) != 5e8) {
     d1 = d13 * .75 + d1;
     break;
    }
    if ((i17 + 3 & 127 | 0) == (i3 | 0)) {
     d1 = d13 * .5 + d1;
     break;
    } else {
     d1 = d13 * .75 + d1;
     break;
    }
   } while (0);
   if ((53 - i7 | 0) > 1) if (+_fmodl(d1, 1.0) != 0.0) d6 = d1; else d6 = d1 + 1.0; else d6 = d1;
  }
  d1 = d10 + d6 - d11;
  do if ((i5 & 2147483647 | 0) > (-2 - i28 | 0)) {
   i3 = !(+Math_abs(+d1) >= 9007199254740992.0);
   i2 = i2 + ((i3 ^ 1) & 1) | 0;
   d1 = i3 ? d1 : d1 * .5;
   if ((i2 + 50 | 0) <= (i29 | 0)) if (!(d6 != 0.0 & (i9 & ((i7 | 0) != (i8 | 0) | i3)))) break;
   HEAP32[(___errno_location() | 0) >> 2] = 34;
  } while (0);
  d1 = +_scalbnl(d1, i2);
 } while (0);
 STACKTOP = i30;
 return +d1;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i35, i36, i37, i38, i39, i40, i41, i1) {
 i35 = i35 | 0;
 i36 = i36 | 0;
 i37 = i37 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i40 = i40 | 0;
 i41 = i41 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0;
 i42 = 0;
 i43 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i43 + 128 | 0;
 i1 = i43 + 112 | 0;
 i33 = i43 + 124 | 0;
 i34 = i43 + 120 | 0;
 i3 = i43 + 116 | 0;
 i4 = i43 + 108 | 0;
 i5 = i43 + 104 | 0;
 i6 = i43 + 100 | 0;
 i7 = i43 + 96 | 0;
 i8 = i43 + 92 | 0;
 i9 = i43 + 88 | 0;
 i10 = i43 + 84 | 0;
 i11 = i43 + 80 | 0;
 i12 = i43 + 76 | 0;
 i13 = i43 + 72 | 0;
 i14 = i43 + 68 | 0;
 i15 = i43 + 64 | 0;
 i16 = i43 + 60 | 0;
 i17 = i43 + 56 | 0;
 i18 = i43 + 52 | 0;
 i19 = i43 + 48 | 0;
 i20 = i43 + 44 | 0;
 i21 = i43 + 40 | 0;
 i22 = i43 + 36 | 0;
 i23 = i43 + 32 | 0;
 i24 = i43 + 28 | 0;
 i25 = i43 + 24 | 0;
 i26 = i43 + 20 | 0;
 i27 = i43 + 16 | 0;
 i28 = i43 + 12 | 0;
 i29 = i43 + 8 | 0;
 i30 = i43 + 4 | 0;
 i31 = i43;
 HEAP32[i39 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv(i2, i38);
 i32 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 21956) | 0;
 __ZNSt3__26localeD2Ev(i2);
 do switch (i41 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i33 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i34 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i34 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 99:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 12 >> 2] & 63](i34) | 0;
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i4 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 8 + 3 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + ((i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i5 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 12 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i7 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 6064, 6096) | 0;
   i42 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 6096, 6128) | 0;
   i42 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i10 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i11 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i12 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 28 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i13 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i14 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i14 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 4 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i15 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i16 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i17 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 6128, 6172) | 0;
   i42 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i20 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 6176, 6196) | 0;
   i42 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i21 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i22 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 6208, 6240) | 0;
   i42 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i24 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 120:
  {
   i41 = HEAP32[(HEAP32[i35 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i26 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i41 & 63](i35, i1, i2, i38, i39, i40) | 0;
   break;
  }
 case 88:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 24 >> 2] & 63](i34) | 0;
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i28 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 8 + 3 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + ((i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i29 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i29 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i30 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i31 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 default:
  {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i42 = 26;
  }
 } while (0);
 if ((i42 | 0) == 26) i1 = HEAP32[i36 >> 2] | 0;
 STACKTOP = i43;
 return i1 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i35, i36, i37, i38, i39, i40, i41, i1) {
 i35 = i35 | 0;
 i36 = i36 | 0;
 i37 = i37 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i40 = i40 | 0;
 i41 = i41 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0;
 i42 = 0;
 i43 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i43 + 128 | 0;
 i1 = i43 + 112 | 0;
 i33 = i43 + 124 | 0;
 i34 = i43 + 120 | 0;
 i3 = i43 + 116 | 0;
 i4 = i43 + 108 | 0;
 i5 = i43 + 104 | 0;
 i6 = i43 + 100 | 0;
 i7 = i43 + 96 | 0;
 i8 = i43 + 92 | 0;
 i9 = i43 + 88 | 0;
 i10 = i43 + 84 | 0;
 i11 = i43 + 80 | 0;
 i12 = i43 + 76 | 0;
 i13 = i43 + 72 | 0;
 i14 = i43 + 68 | 0;
 i15 = i43 + 64 | 0;
 i16 = i43 + 60 | 0;
 i17 = i43 + 56 | 0;
 i18 = i43 + 52 | 0;
 i19 = i43 + 48 | 0;
 i20 = i43 + 44 | 0;
 i21 = i43 + 40 | 0;
 i22 = i43 + 36 | 0;
 i23 = i43 + 32 | 0;
 i24 = i43 + 28 | 0;
 i25 = i43 + 24 | 0;
 i26 = i43 + 20 | 0;
 i27 = i43 + 16 | 0;
 i28 = i43 + 12 | 0;
 i29 = i43 + 8 | 0;
 i30 = i43 + 4 | 0;
 i31 = i43;
 HEAP32[i39 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv(i2, i38);
 i32 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 21924) | 0;
 __ZNSt3__26localeD2Ev(i2);
 do switch (i41 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i33 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i34 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i34 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 99:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 12 >> 2] & 63](i34) | 0;
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i4 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 11 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + (i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) | 0;
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i5 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 12 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i7 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 13977, 13985) | 0;
   i42 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 13985, 13993) | 0;
   i42 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i10 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i11 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i12 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 28 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i13 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i14 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i14 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 4 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i15 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i16 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i17 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 13993, 14004) | 0;
   i42 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i20 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 14004, 14009) | 0;
   i42 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i21 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i22 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 14009, 14017) | 0;
   i42 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i24 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 120:
  {
   i41 = HEAP32[(HEAP32[i35 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i26 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i41 & 63](i35, i1, i2, i38, i39, i40) | 0;
   break;
  }
 case 88:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 24 >> 2] & 63](i34) | 0;
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i28 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 11 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + (i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) | 0;
   HEAP32[i1 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i29 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i29 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i30 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i31 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 default:
  {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i42 = 26;
  }
 } while (0);
 if ((i42 | 0) == 26) i1 = HEAP32[i36 >> 2] | 0;
 STACKTOP = i43;
 return i1 | 0;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i3, i2, i4, i7, i8, i9, i11, i5, i13) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 i13 = i13 | 0;
 var i6 = 0, i10 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i14 + 12 | 0;
 i12 = i14;
 if (i1) {
  i6 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22156) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 63](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 63](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 63](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 63](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  }
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 63](i6) | 0;
  HEAP8[i8 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 63](i6) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i12, i6);
  i1 = i9 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i9 + 4 >> 2] = 0;
   i1 = i9;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i9;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i9, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i12, i6);
  i1 = i11 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i11 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i11 + 4 >> 2] = 0;
   i1 = i11;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i11, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i11;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i11, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0;
 } else {
  i6 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22148) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 63](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 63](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 63](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 63](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  }
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 63](i6) | 0;
  HEAP8[i8 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 63](i6) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i12, i6);
  i1 = i9 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i9 + 4 >> 2] = 0;
   i1 = i9;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i9;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i9, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i12, i6);
  i1 = i11 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i11 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i11 + 4 >> 2] = 0;
   i1 = i11;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i11, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i11;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i11, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0;
 }
 HEAP32[i13 >> 2] = i1;
 STACKTOP = i14;
 return;
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i3, i2, i4, i6, i7, i8, i10, i5, i12) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i12 = i12 | 0;
 var i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i13 + 12 | 0;
 i11 = i13;
 if (i1) {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22172) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  }
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0;
 } else {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22164) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  }
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0;
 }
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i3, i6, i7, i8, i10, i5, i4, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i13 + 12 | 0;
 i11 = i13;
 if (i1) {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22156) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i11, i2);
  i1 = i4 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i4 + 4 >> 2] = 0;
   i1 = i4;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i4, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i4;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i4, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i11, i2);
  i1 = i5 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i5 + 4 >> 2] = 0;
   i1 = i5;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i5, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  HEAP8[i6 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i11, i2);
  i1 = i10 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i10 + 4 >> 2] = 0;
   i1 = i10;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i10, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i10;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i10, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0;
 } else {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22148) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i11, i2);
  i1 = i4 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i4 + 4 >> 2] = 0;
   i1 = i4;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i4, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i4;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i4, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i11, i2);
  i1 = i5 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i5 + 4 >> 2] = 0;
   i1 = i5;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i5, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  HEAP8[i6 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i11, i2);
  i1 = i10 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i10 + 4 >> 2] = 0;
   i1 = i10;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i10, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i10;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i10, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0;
 }
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i3, i6, i7, i8, i10, i5, i4, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i13 + 12 | 0;
 i11 = i13;
 if (i1) {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22172) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i11, i2);
  i1 = i4 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i9);
   HEAP32[i4 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i4, 0);
  HEAP32[i4 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i11, i2);
  i1 = i5 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP32[i5 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i5, 0);
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0;
 } else {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22164) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 63](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i11, i2);
  i1 = i4 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i9);
   HEAP32[i4 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i4, 0);
  HEAP32[i4 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i11, i2);
  i1 = i5 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP32[i5 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i5, 0);
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0;
 }
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function ___intscan(i13, i4, i6, i1, i2) {
 i13 = i13 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i4 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 100 | 0;
  do {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
  } while ((_isspace(i3) | 0) != 0);
  L11 : do switch (i3 | 0) {
  case 43:
  case 45:
   {
    i3 = ((i3 | 0) == 45) << 31 >> 31;
    i5 = HEAP32[i15 >> 2] | 0;
    if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i5 + 1;
     i12 = i3;
     i3 = HEAPU8[i5 >> 0] | 0;
     break L11;
    } else {
     i12 = i3;
     i3 = ___shgetc(i13) | 0;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i4 | 0) == 0;
  do if ((i4 | 16 | 0) == 16 & (i3 | 0) == 48) {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((i3 | 32 | 0) != 120) if (i5) {
    i11 = 8;
    i10 = 47;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((HEAPU8[1745 + i3 >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) == 0;
    if (!i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i11 = 16;
    i10 = 47;
   }
  } else {
   i4 = i5 ? 10 : i4;
   if (i4 >>> 0 > (HEAPU8[1745 + i3 >> 0] | 0) >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((i10 | 0) == 32) if ((i4 | 0) == 10) {
   i4 = i3 + -48 | 0;
   if (i4 >>> 0 < 10) {
    i3 = 0;
    do {
     i3 = (i3 * 10 | 0) + i4 | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i5 = HEAPU8[i4 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i4 = i5 + -48 | 0;
    } while (i4 >>> 0 < 10 & i3 >>> 0 < 429496729);
    if (i4 >>> 0 < 10) {
     i9 = 0;
     do {
      i6 = ___muldi3(i3 | 0, i9 | 0, 10, 0) | 0;
      i7 = getTempRet0() | 0;
      i8 = ((i4 | 0) < 0) << 31 >> 31;
      i11 = ~i8;
      if (i7 >>> 0 > i11 >>> 0 | (i7 | 0) == (i11 | 0) & i6 >>> 0 > ~i4 >>> 0) {
       i6 = 10;
       i4 = i9;
       i10 = 76;
       break L43;
      }
      i3 = _i64Add(i6 | 0, i7 | 0, i4 | 0, i8 | 0) | 0;
      i9 = getTempRet0() | 0;
      i4 = HEAP32[i15 >> 2] | 0;
      if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i4 + 1;
       i5 = HEAPU8[i4 >> 0] | 0;
      } else i5 = ___shgetc(i13) | 0;
      i4 = i5 + -48 | 0;
     } while (i4 >>> 0 < 10 & (i9 >>> 0 < 429496729 | (i9 | 0) == 429496729 & i3 >>> 0 < 2576980378));
     if (i4 >>> 0 > 9) {
      i5 = i12;
      i4 = i9;
     } else {
      i6 = 10;
      i4 = i9;
      i10 = 76;
     }
    } else {
     i5 = i12;
     i4 = 0;
    }
   } else {
    i5 = i12;
    i4 = 0;
    i3 = 0;
   }
  } else {
   i11 = i4;
   i10 = 47;
  } while (0);
  L63 : do if ((i10 | 0) == 47) {
   if (!(i11 + -1 & i11)) {
    i10 = HEAP8[12572 + ((i11 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i6 = HEAP8[1745 + i3 >> 0] | 0;
    i4 = i6 & 255;
    if (i11 >>> 0 > i4 >>> 0) {
     i3 = 0;
     do {
      i3 = i4 | i3 << i10;
      i4 = HEAP32[i15 >> 2] | 0;
      if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i4 + 1;
       i5 = HEAPU8[i4 >> 0] | 0;
      } else i5 = ___shgetc(i13) | 0;
      i6 = HEAP8[1745 + i5 >> 0] | 0;
      i4 = i6 & 255;
     } while (i3 >>> 0 < 134217728 & i11 >>> 0 > i4 >>> 0);
     i7 = i4;
     i4 = 0;
    } else {
     i5 = i3;
     i7 = i4;
     i4 = 0;
     i3 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i9 = getTempRet0() | 0;
    if (i11 >>> 0 <= i7 >>> 0 | (i9 >>> 0 < i4 >>> 0 | (i9 | 0) == (i4 | 0) & i8 >>> 0 < i3 >>> 0)) {
     i6 = i11;
     i10 = 76;
     break;
    }
    while (1) {
     i3 = _bitshift64Shl(i3 | 0, i4 | 0, i10 | 0) | 0;
     i4 = getTempRet0() | 0;
     i3 = i3 | i6 & 255;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[1745 + i5 >> 0] | 0;
     if (i11 >>> 0 <= (i6 & 255) >>> 0 | (i4 >>> 0 > i9 >>> 0 | (i4 | 0) == (i9 | 0) & i3 >>> 0 > i8 >>> 0)) {
      i6 = i11;
      i10 = 76;
      break L63;
     }
    }
   }
   i4 = HEAP8[1745 + i3 >> 0] | 0;
   i6 = i4 & 255;
   if (i11 >>> 0 > i6 >>> 0) {
    i3 = 0;
    do {
     i3 = i6 + (Math_imul(i3, i11) | 0) | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i5 = HEAPU8[i4 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i4 = HEAP8[1745 + i5 >> 0] | 0;
     i6 = i4 & 255;
    } while (i3 >>> 0 < 119304647 & i11 >>> 0 > i6 >>> 0);
    i7 = i4;
    i4 = 0;
   } else {
    i5 = i3;
    i7 = i4;
    i3 = 0;
    i4 = 0;
   }
   if (i11 >>> 0 > i6 >>> 0) {
    i9 = ___udivdi3(-1, -1, i11 | 0, 0) | 0;
    i10 = getTempRet0() | 0;
    i6 = i7;
    while (1) {
     if (i4 >>> 0 > i10 >>> 0 | (i4 | 0) == (i10 | 0) & i3 >>> 0 > i9 >>> 0) {
      i6 = i11;
      i10 = 76;
      break L63;
     }
     i7 = ___muldi3(i3 | 0, i4 | 0, i11 | 0, 0) | 0;
     i8 = getTempRet0() | 0;
     i6 = i6 & 255;
     if (i8 >>> 0 > 4294967295 | (i8 | 0) == -1 & i7 >>> 0 > ~i6 >>> 0) {
      i6 = i11;
      i10 = 76;
      break L63;
     }
     i3 = _i64Add(i7 | 0, i8 | 0, i6 | 0, 0) | 0;
     i4 = getTempRet0() | 0;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[1745 + i5 >> 0] | 0;
     if (i11 >>> 0 <= (i6 & 255) >>> 0) {
      i6 = i11;
      i10 = 76;
      break;
     }
    }
   } else {
    i6 = i11;
    i10 = 76;
   }
  } while (0);
  if ((i10 | 0) == 76) if (i6 >>> 0 > (HEAPU8[1745 + i5 >> 0] | 0) >>> 0) {
   do {
    i3 = HEAP32[i15 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
    } else i3 = ___shgetc(i13) | 0;
   } while (i6 >>> 0 > (HEAPU8[1745 + i3 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i5 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
   i4 = i2;
   i3 = i1;
  } else i5 = i12;
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i4 >>> 0 < i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i5 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = getTempRet0() | 0;
    break;
   }
   if (i4 >>> 0 > i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 > i1 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    break;
   }
  }
  i1 = ((i5 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i3 ^ i5 | 0, i4 ^ i1 | 0, i5 | 0, i1 | 0) | 0;
  i2 = getTempRet0() | 0;
 } while (0);
 setTempRet0(i2 | 0);
 return i1 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i10, i18, i19, i13, i20, i14, i1, i15) {
 i10 = i10 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i13 = i13 | 0;
 i20 = i20 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i22 + 12 | 0;
 i8 = i22 + 8 | 0;
 i16 = i22 + 4 | 0;
 i17 = i22;
 __ZNKSt3__28ios_base6getlocEv(i9, i13);
 i11 = __ZNKSt3__26locale9use_facetERNS0_2idE(i9, 21924) | 0;
 __ZNSt3__26localeD2Ev(i9);
 HEAP32[i20 >> 2] = 0;
 i12 = i11 + 8 | 0;
 i3 = 0;
 L1 : while (1) {
  i2 = HEAP32[i18 >> 2] | 0;
  if (!((i1 | 0) != (i15 | 0) & (i3 | 0) == 0)) break;
  i4 = i2;
  if (!i2) {
   i2 = 0;
   i5 = 1;
   i7 = i4;
  } else {
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i18 >> 2] = 0;
    i2 = 0;
    i5 = 1;
    i7 = 0;
   } else {
    i5 = 0;
    i7 = i4;
   }
  }
  i6 = HEAP32[i19 >> 2] | 0;
  i3 = i6;
  do if (!i6) i21 = 15; else {
   i4 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i4 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i4, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i3 = 0;
    i21 = 15;
    break;
   } else if (i5) break; else {
    i21 = 63;
    break L1;
   }
  } while (0);
  if ((i21 | 0) == 15) {
   i21 = 0;
   if (i5) {
    i21 = 63;
    break;
   } else i6 = 0;
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 31](i11, HEAP8[i1 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
   i6 = i1 + 1 | 0;
   if ((i6 | 0) == (i15 | 0)) {
    i21 = 63;
    break L1;
   }
   i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 31](i11, HEAP8[i6 >> 0] | 0, 0) | 0;
   switch (i4 << 24 >> 24) {
   case 48:
   case 69:
    {
     i1 = i1 + 2 | 0;
     if ((i1 | 0) == (i15 | 0)) {
      i21 = 63;
      break L1;
     }
     i5 = i4;
     i2 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 31](i11, HEAP8[i1 >> 0] | 0, 0) | 0;
     i1 = i6;
     break;
    }
   default:
    {
     i5 = 0;
     i2 = i4;
    }
   }
   i6 = HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[i16 >> 2] = i7;
   HEAP32[i17 >> 2] = i3;
   HEAP32[i8 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i18 >> 2] = FUNCTION_TABLE_iiiiiiiii[i6 & 15](i10, i8, i9, i13, i20, i14, i2, i5) | 0;
   i1 = i1 + 2 | 0;
  } else {
   i3 = HEAP8[i1 >> 0] | 0;
   if (i3 << 24 >> 24 > -1) {
    i4 = HEAP32[i12 >> 2] | 0;
    if (HEAP16[i4 + (i3 << 24 >> 24 << 1) >> 1] & 8192) {
     do {
      i1 = i1 + 1 | 0;
      if ((i1 | 0) == (i15 | 0)) {
       i1 = i15;
       break;
      }
      i3 = HEAP8[i1 >> 0] | 0;
      if (i3 << 24 >> 24 <= -1) break;
     } while ((HEAP16[i4 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0);
     while (1) {
      if (!i2) {
       i2 = 0;
       i4 = 1;
      } else {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i18 >> 2] = 0;
        i2 = 0;
        i4 = 1;
       } else i4 = 0;
      }
      do if (!i6) i21 = 42; else {
       i3 = HEAP32[i6 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i19 >> 2] = 0;
        i21 = 42;
        break;
       } else if (i4) break; else break L24;
      } while (0);
      if ((i21 | 0) == 42) {
       i21 = 0;
       if (i4) break L24; else i6 = 0;
      }
      i4 = i2 + 12 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      i5 = i2 + 16 | 0;
      if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      if ((i3 & 255) << 24 >> 24 <= -1) break L24;
      if (!(HEAP16[(HEAP32[i12 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break L24;
      i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
       HEAP32[i4 >> 2] = i3 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      }
     }
    }
   }
   i4 = i2 + 12 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   i5 = i2 + 16 | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 31](i11, i3 & 255) | 0;
   if (i7 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 31](i11, HEAP8[i1 >> 0] | 0) | 0) << 24 >> 24) {
    HEAP32[i20 >> 2] = 4;
    break;
   }
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
    HEAP32[i4 >> 2] = i3 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   }
   i1 = i1 + 1 | 0;
  } while (0);
  i3 = HEAP32[i20 >> 2] | 0;
 }
 if ((i21 | 0) == 63) HEAP32[i20 >> 2] = 4;
 if (!i2) {
  i2 = 0;
  i4 = 1;
 } else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i18 >> 2] = 0;
   i2 = 0;
   i4 = 1;
  } else i4 = 0;
 }
 i1 = HEAP32[i19 >> 2] | 0;
 do if (!i1) i21 = 76; else {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i21 = 76;
   break;
  } else if (i4) break; else {
   i21 = 78;
   break;
  }
 } while (0);
 if ((i21 | 0) == 76) if (i4) i21 = 78;
 if ((i21 | 0) == 78) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 2;
 STACKTOP = i22;
 return i2 | 0;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!i1) return;
 i3 = i1 + -8 | 0;
 i5 = HEAP32[5099] | 0;
 i1 = HEAP32[i1 + -4 >> 2] | 0;
 i2 = i1 & -8;
 i9 = i3 + i2 | 0;
 do if (!(i1 & 1)) {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!(i1 & 3)) return;
  i7 = i3 + (0 - i4) | 0;
  i6 = i4 + i2 | 0;
  if (i7 >>> 0 < i5 >>> 0) return;
  if ((HEAP32[5100] | 0) == (i7 | 0)) {
   i1 = i9 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i8 = i7;
    i2 = i6;
    break;
   }
   HEAP32[5097] = i6;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i7 + 4 >> 2] = i6 | 1;
   HEAP32[i7 + i6 >> 2] = i6;
   return;
  }
  i3 = i4 >>> 3;
  if (i4 >>> 0 < 256) {
   i1 = HEAP32[i7 + 8 >> 2] | 0;
   i2 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[5095] = HEAP32[5095] & ~(1 << i3);
    i8 = i7;
    i2 = i6;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i7;
    i2 = i6;
    break;
   }
  }
  i5 = HEAP32[i7 + 24 >> 2] | 0;
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i7 | 0)) {
   i2 = i7 + 16 | 0;
   i3 = i2 + 4 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
   } else i2 = i3;
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
  } else {
   i8 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i8 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i8;
  } while (0);
  if (!i5) {
   i8 = i7;
   i2 = i6;
  } else {
   i2 = HEAP32[i7 + 28 >> 2] | 0;
   i3 = 20684 + (i2 << 2) | 0;
   if ((HEAP32[i3 >> 2] | 0) == (i7 | 0)) {
    HEAP32[i3 >> 2] = i1;
    if (!i1) {
     HEAP32[5096] = HEAP32[5096] & ~(1 << i2);
     i8 = i7;
     i2 = i6;
     break;
    }
   } else {
    i8 = i5 + 16 | 0;
    HEAP32[((HEAP32[i8 >> 2] | 0) == (i7 | 0) ? i8 : i5 + 20 | 0) >> 2] = i1;
    if (!i1) {
     i8 = i7;
     i2 = i6;
     break;
    }
   }
   HEAP32[i1 + 24 >> 2] = i5;
   i2 = i7 + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) {
    HEAP32[i1 + 16 >> 2] = i3;
    HEAP32[i3 + 24 >> 2] = i1;
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i2) {
    i8 = i7;
    i2 = i6;
   } else {
    HEAP32[i1 + 20 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i1;
    i8 = i7;
    i2 = i6;
   }
  }
 } else {
  i8 = i3;
  i7 = i3;
 } while (0);
 if (i7 >>> 0 >= i9 >>> 0) return;
 i1 = i9 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!(i4 & 1)) return;
 if (!(i4 & 2)) {
  if ((HEAP32[5101] | 0) == (i9 | 0)) {
   i9 = (HEAP32[5098] | 0) + i2 | 0;
   HEAP32[5098] = i9;
   HEAP32[5101] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   if ((i8 | 0) != (HEAP32[5100] | 0)) return;
   HEAP32[5100] = 0;
   HEAP32[5097] = 0;
   return;
  }
  if ((HEAP32[5100] | 0) == (i9 | 0)) {
   i9 = (HEAP32[5097] | 0) + i2 | 0;
   HEAP32[5097] = i9;
   HEAP32[5100] = i7;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i7 + i9 >> 2] = i9;
   return;
  }
  i5 = (i4 & -8) + i2 | 0;
  i3 = i4 >>> 3;
  do if (i4 >>> 0 < 256) {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[5095] = HEAP32[5095] & ~(1 << i3);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i9 + 24 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i9 | 0)) {
    i2 = i9 + 16 | 0;
    i3 = i2 + 4 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     }
    } else i2 = i3;
    while (1) {
     i4 = i1 + 20 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i4 = i1 + 16 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) break; else {
       i1 = i3;
       i2 = i4;
      }
     } else {
      i1 = i3;
      i2 = i4;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i9 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i9 + 28 >> 2] | 0;
    i2 = 20684 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[5096] = HEAP32[5096] & ~(1 << i1);
      break;
     }
    } else {
     i4 = i6 + 16 | 0;
     HEAP32[((HEAP32[i4 >> 2] | 0) == (i9 | 0) ? i4 : i6 + 20 | 0) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i1 = i9 + 16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     HEAP32[i3 + 16 >> 2] = i2;
     HEAP32[i2 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i8 + 4 >> 2] = i5 | 1;
  HEAP32[i7 + i5 >> 2] = i5;
  if ((i8 | 0) == (HEAP32[5100] | 0)) {
   HEAP32[5097] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i4 & -2;
  HEAP32[i8 + 4 >> 2] = i2 | 1;
  HEAP32[i7 + i2 >> 2] = i2;
  i5 = i2;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i3 = 20420 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[5095] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[5095] = i2 | i1;
   i1 = i3;
   i2 = i3 + 8 | 0;
  } else {
   i2 = i3 + 8 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i8;
  HEAP32[i1 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i3;
  return;
 }
 i1 = i5 >>> 8;
 if (!i1) i4 = 0; else if (i5 >>> 0 > 16777215) i4 = 31; else {
  i7 = (i1 + 1048320 | 0) >>> 16 & 8;
  i9 = i1 << i7;
  i6 = (i9 + 520192 | 0) >>> 16 & 4;
  i9 = i9 << i6;
  i4 = (i9 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i6 | i7 | i4) + (i9 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 }
 i1 = 20684 + (i4 << 2) | 0;
 HEAP32[i8 + 28 >> 2] = i4;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i2 = HEAP32[5096] | 0;
 i3 = 1 << i4;
 L112 : do if (!(i2 & i3)) {
  HEAP32[5096] = i2 | i3;
  HEAP32[i1 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
 } else {
  i1 = HEAP32[i1 >> 2] | 0;
  L115 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
   while (1) {
    i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) break;
    if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i1 = i2;
     break L115;
    } else {
     i4 = i4 << 1;
     i1 = i2;
    }
   }
   HEAP32[i3 >> 2] = i8;
   HEAP32[i8 + 24 >> 2] = i1;
   HEAP32[i8 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i8;
   break L112;
  } while (0);
  i7 = i1 + 8 | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  HEAP32[i9 + 12 >> 2] = i8;
  HEAP32[i7 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i9;
  HEAP32[i8 + 12 >> 2] = i1;
  HEAP32[i8 + 24 >> 2] = 0;
 } while (0);
 i9 = (HEAP32[5103] | 0) + -1 | 0;
 HEAP32[5103] = i9;
 if (i9 | 0) return;
 i1 = 20836;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[5103] = -1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i10, i17, i18, i12, i19, i13, i1, i14) {
 i10 = i10 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i12 = i12 | 0;
 i19 = i19 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i21 + 12 | 0;
 i8 = i21 + 8 | 0;
 i15 = i21 + 4 | 0;
 i16 = i21;
 __ZNKSt3__28ios_base6getlocEv(i9, i12);
 i11 = __ZNKSt3__26locale9use_facetERNS0_2idE(i9, 21956) | 0;
 __ZNSt3__26localeD2Ev(i9);
 HEAP32[i19 >> 2] = 0;
 i3 = 0;
 L1 : while (1) {
  i2 = HEAP32[i17 >> 2] | 0;
  if (!((i1 | 0) != (i14 | 0) & (i3 | 0) == 0)) break;
  i4 = i2;
  if (!i2) {
   i2 = 0;
   i5 = 1;
   i7 = i4;
  } else {
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i17 >> 2] = 0;
    i2 = 0;
    i5 = 1;
    i7 = 0;
   } else {
    i5 = 0;
    i7 = i4;
   }
  }
  i6 = HEAP32[i18 >> 2] | 0;
  i3 = i6;
  do if (!i6) i20 = 15; else {
   i4 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i4 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i4, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i18 >> 2] = 0;
    i3 = 0;
    i20 = 15;
    break;
   } else if (i5) break; else {
    i20 = 60;
    break L1;
   }
  } while (0);
  if ((i20 | 0) == 15) {
   i20 = 0;
   if (i5) {
    i20 = 60;
    break;
   } else i6 = 0;
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] & 31](i11, HEAP32[i1 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
   i6 = i1 + 4 | 0;
   if ((i6 | 0) == (i14 | 0)) {
    i20 = 60;
    break L1;
   }
   i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] & 31](i11, HEAP32[i6 >> 2] | 0, 0) | 0;
   switch (i4 << 24 >> 24) {
   case 48:
   case 69:
    {
     i1 = i1 + 8 | 0;
     if ((i1 | 0) == (i14 | 0)) {
      i20 = 60;
      break L1;
     }
     i5 = i4;
     i2 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] & 31](i11, HEAP32[i1 >> 2] | 0, 0) | 0;
     i1 = i6;
     break;
    }
   default:
    {
     i5 = 0;
     i2 = i4;
    }
   }
   i6 = HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[i15 >> 2] = i7;
   HEAP32[i16 >> 2] = i3;
   HEAP32[i8 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i17 >> 2] = FUNCTION_TABLE_iiiiiiiii[i6 & 15](i10, i8, i9, i12, i19, i13, i2, i5) | 0;
   i1 = i1 + 8 | 0;
  } else {
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 31](i11, 8192, HEAP32[i1 >> 2] | 0) | 0)) {
    i4 = i2 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i2 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, i3) | 0;
    if ((i7 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP32[i1 >> 2] | 0) | 0)) {
     HEAP32[i19 >> 2] = 4;
     break;
    }
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
     HEAP32[i4 >> 2] = i3 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    }
    i1 = i1 + 4 | 0;
    break;
   }
   do {
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i14 | 0)) {
     i1 = i14;
     break;
    }
   } while (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 31](i11, 8192, HEAP32[i1 >> 2] | 0) | 0);
   while (1) {
    if (!i2) {
     i2 = 0;
     i4 = 1;
    } else {
     i3 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i17 >> 2] = 0;
      i2 = 0;
      i4 = 1;
     } else i4 = 0;
    }
    do if (!i6) i20 = 40; else {
     i3 = HEAP32[i6 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i18 >> 2] = 0;
      i20 = 40;
      break;
     } else if (i4) break; else break L24;
    } while (0);
    if ((i20 | 0) == 40) {
     i20 = 0;
     if (i4) break L24; else i6 = 0;
    }
    i4 = i2 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i2 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 31](i11, 8192, i3) | 0)) break L24;
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
     HEAP32[i4 >> 2] = i3 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    }
   }
  } while (0);
  i3 = HEAP32[i19 >> 2] | 0;
 }
 if ((i20 | 0) == 60) HEAP32[i19 >> 2] = 4;
 if (!i2) {
  i2 = 0;
  i4 = 1;
 } else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i17 >> 2] = 0;
   i2 = 0;
   i4 = 1;
  } else i4 = 0;
 }
 i1 = HEAP32[i18 >> 2] | 0;
 do if (!i1) i20 = 73; else {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i18 >> 2] = 0;
   i20 = 73;
   break;
  } else if (i4) break; else {
   i20 = 75;
   break;
  }
 } while (0);
 if ((i20 | 0) == 73) if (i4) i20 = 75;
 if ((i20 | 0) == 75) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 STACKTOP = i21;
 return i2 | 0;
}

function _dispose_chunk(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i2 + i1 | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 do if (!(i3 & 1)) {
  i5 = HEAP32[i2 >> 2] | 0;
  if (!(i3 & 3)) return;
  i7 = i2 + (0 - i5) | 0;
  i1 = i5 + i1 | 0;
  if ((HEAP32[5100] | 0) == (i7 | 0)) {
   i2 = i8 + 4 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 & 3 | 0) != 3) break;
   HEAP32[5097] = i1;
   HEAP32[i2 >> 2] = i3 & -2;
   HEAP32[i7 + 4 >> 2] = i1 | 1;
   HEAP32[i8 >> 2] = i1;
   return;
  }
  i4 = i5 >>> 3;
  if (i5 >>> 0 < 256) {
   i2 = HEAP32[i7 + 8 >> 2] | 0;
   i3 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i3 | 0) == (i2 | 0)) {
    HEAP32[5095] = HEAP32[5095] & ~(1 << i4);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i3;
    HEAP32[i3 + 8 >> 2] = i2;
    break;
   }
  }
  i6 = HEAP32[i7 + 24 >> 2] | 0;
  i2 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i2 | 0) == (i7 | 0)) {
   i3 = i7 + 16 | 0;
   i4 = i3 + 4 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (!i2) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i2 = 0;
     break;
    }
   } else i3 = i4;
   while (1) {
    i5 = i2 + 20 | 0;
    i4 = HEAP32[i5 >> 2] | 0;
    if (!i4) {
     i5 = i2 + 16 | 0;
     i4 = HEAP32[i5 >> 2] | 0;
     if (!i4) break; else {
      i2 = i4;
      i3 = i5;
     }
    } else {
     i2 = i4;
     i3 = i5;
    }
   }
   HEAP32[i3 >> 2] = 0;
  } else {
   i5 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i5 + 12 >> 2] = i2;
   HEAP32[i2 + 8 >> 2] = i5;
  } while (0);
  if (i6) {
   i3 = HEAP32[i7 + 28 >> 2] | 0;
   i4 = 20684 + (i3 << 2) | 0;
   if ((HEAP32[i4 >> 2] | 0) == (i7 | 0)) {
    HEAP32[i4 >> 2] = i2;
    if (!i2) {
     HEAP32[5096] = HEAP32[5096] & ~(1 << i3);
     break;
    }
   } else {
    i5 = i6 + 16 | 0;
    HEAP32[((HEAP32[i5 >> 2] | 0) == (i7 | 0) ? i5 : i6 + 20 | 0) >> 2] = i2;
    if (!i2) break;
   }
   HEAP32[i2 + 24 >> 2] = i6;
   i3 = i7 + 16 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (i4 | 0) {
    HEAP32[i2 + 16 >> 2] = i4;
    HEAP32[i4 + 24 >> 2] = i2;
   }
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   if (i3) {
    HEAP32[i2 + 20 >> 2] = i3;
    HEAP32[i3 + 24 >> 2] = i2;
   }
  }
 } else i7 = i2; while (0);
 i2 = i8 + 4 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if (!(i4 & 2)) {
  if ((HEAP32[5101] | 0) == (i8 | 0)) {
   i8 = (HEAP32[5098] | 0) + i1 | 0;
   HEAP32[5098] = i8;
   HEAP32[5101] = i7;
   HEAP32[i7 + 4 >> 2] = i8 | 1;
   if ((i7 | 0) != (HEAP32[5100] | 0)) return;
   HEAP32[5100] = 0;
   HEAP32[5097] = 0;
   return;
  }
  if ((HEAP32[5100] | 0) == (i8 | 0)) {
   i8 = (HEAP32[5097] | 0) + i1 | 0;
   HEAP32[5097] = i8;
   HEAP32[5100] = i7;
   HEAP32[i7 + 4 >> 2] = i8 | 1;
   HEAP32[i7 + i8 >> 2] = i8;
   return;
  }
  i5 = (i4 & -8) + i1 | 0;
  i3 = i4 >>> 3;
  do if (i4 >>> 0 < 256) {
   i2 = HEAP32[i8 + 8 >> 2] | 0;
   i1 = HEAP32[i8 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[5095] = HEAP32[5095] & ~(1 << i3);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i8 + 24 >> 2] | 0;
   i1 = HEAP32[i8 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i8 | 0)) {
    i2 = i8 + 16 | 0;
    i3 = i2 + 4 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     }
    } else i2 = i3;
    while (1) {
     i4 = i1 + 20 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i4 = i1 + 16 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) break; else {
       i1 = i3;
       i2 = i4;
      }
     } else {
      i1 = i3;
      i2 = i4;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i8 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i8 + 28 >> 2] | 0;
    i2 = 20684 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i8 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[5096] = HEAP32[5096] & ~(1 << i1);
      break;
     }
    } else {
     i4 = i6 + 16 | 0;
     HEAP32[((HEAP32[i4 >> 2] | 0) == (i8 | 0) ? i4 : i6 + 20 | 0) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i1 = i8 + 16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     HEAP32[i3 + 16 >> 2] = i2;
     HEAP32[i2 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i7 + 4 >> 2] = i5 | 1;
  HEAP32[i7 + i5 >> 2] = i5;
  if ((i7 | 0) == (HEAP32[5100] | 0)) {
   HEAP32[5097] = i5;
   return;
  }
 } else {
  HEAP32[i2 >> 2] = i4 & -2;
  HEAP32[i7 + 4 >> 2] = i1 | 1;
  HEAP32[i7 + i1 >> 2] = i1;
  i5 = i1;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i3 = 20420 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[5095] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[5095] = i2 | i1;
   i1 = i3;
   i2 = i3 + 8 | 0;
  } else {
   i2 = i3 + 8 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i7;
  HEAP32[i1 + 12 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i1;
  HEAP32[i7 + 12 >> 2] = i3;
  return;
 }
 i1 = i5 >>> 8;
 if (!i1) i4 = 0; else if (i5 >>> 0 > 16777215) i4 = 31; else {
  i6 = (i1 + 1048320 | 0) >>> 16 & 8;
  i8 = i1 << i6;
  i3 = (i8 + 520192 | 0) >>> 16 & 4;
  i8 = i8 << i3;
  i4 = (i8 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i3 | i6 | i4) + (i8 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 }
 i1 = 20684 + (i4 << 2) | 0;
 HEAP32[i7 + 28 >> 2] = i4;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 i2 = HEAP32[5096] | 0;
 i3 = 1 << i4;
 if (!(i2 & i3)) {
  HEAP32[5096] = i2 | i3;
  HEAP32[i1 >> 2] = i7;
  HEAP32[i7 + 24 >> 2] = i1;
  HEAP32[i7 + 12 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i7;
  return;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 L104 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
  i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
  while (1) {
   i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if (!i2) break;
   if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
    i1 = i2;
    break L104;
   } else {
    i4 = i4 << 1;
    i1 = i2;
   }
  }
  HEAP32[i3 >> 2] = i7;
  HEAP32[i7 + 24 >> 2] = i1;
  HEAP32[i7 + 12 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i7;
  return;
 } while (0);
 i6 = i1 + 8 | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 HEAP32[i8 + 12 >> 2] = i7;
 HEAP32[i6 >> 2] = i7;
 HEAP32[i7 + 8 >> 2] = i8;
 HEAP32[i7 + 12 >> 2] = i1;
 HEAP32[i7 + 24 >> 2] = 0;
 return;
}

function _hexfloat(i18, i22, i21, i23, i19) {
 i18 = i18 | 0;
 i22 = i22 | 0;
 i21 = i21 | 0;
 i23 = i23 | 0;
 i19 = i19 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0;
 i16 = 0;
 i20 = i18 + 4 | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 i17 = i18 + 100 | 0;
 if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
  HEAP32[i20 >> 2] = i2 + 1;
  i2 = HEAPU8[i2 >> 0] | 0;
 } else i2 = ___shgetc(i18) | 0;
 i3 = 0;
 L5 : while (1) {
  switch (i2 | 0) {
  case 46:
   {
    i16 = 10;
    break L5;
   }
  case 48:
   break;
  default:
   {
    i9 = 0;
    i6 = i3;
    i5 = 0;
    i3 = 0;
    break L5;
   }
  }
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i18) | 0;
  i3 = 1;
 }
 if ((i16 | 0) == 10) {
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i18) | 0;
  if ((i2 | 0) == 48) {
   i5 = 0;
   i3 = 0;
   do {
    i2 = HEAP32[i20 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
     HEAP32[i20 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i18) | 0;
    i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
    i3 = getTempRet0() | 0;
   } while ((i2 | 0) == 48);
   i9 = 1;
   i6 = 1;
  } else {
   i9 = 1;
   i6 = i3;
   i5 = 0;
   i3 = 0;
  }
 }
 i8 = 0;
 d7 = 1.0;
 d1 = 0.0;
 i15 = 0;
 i12 = i9;
 i13 = i6;
 i14 = 0;
 i6 = 0;
 while (1) {
  i10 = i2 + -48 | 0;
  i9 = i2 | 32;
  if (i10 >>> 0 < 10) i16 = 24; else {
   i11 = (i2 | 0) == 46;
   if (!(i11 | (i9 + -97 | 0) >>> 0 < 6)) break;
   if (i11) if (!i12) {
    i12 = 1;
    d4 = d7;
    i10 = i15;
    i11 = i13;
    i5 = i6;
    i3 = i14;
    i9 = i14;
   } else {
    i2 = 46;
    break;
   } else i16 = 24;
  }
  if ((i16 | 0) == 24) {
   i16 = 0;
   i2 = (i2 | 0) > 57 ? i9 + -87 | 0 : i10;
   do if ((i14 | 0) < 0 | (i14 | 0) == 0 & i6 >>> 0 < 8) {
    d4 = d7;
    i2 = i2 + (i15 << 4) | 0;
   } else if ((i14 | 0) < 0 | (i14 | 0) == 0 & i6 >>> 0 < 14) {
    d7 = d7 * .0625;
    d4 = d7;
    d1 = d1 + d7 * +(i2 | 0);
    i2 = i15;
    break;
   } else {
    i2 = (i8 | 0) != 0 | (i2 | 0) == 0;
    i8 = i2 ? i8 : 1;
    d4 = d7;
    d1 = i2 ? d1 : d1 + d7 * .5;
    i2 = i15;
    break;
   } while (0);
   i6 = _i64Add(i6 | 0, i14 | 0, 1, 0) | 0;
   i10 = i2;
   i11 = 1;
   i9 = getTempRet0() | 0;
  }
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i18) | 0;
  d7 = d4;
  i15 = i10;
  i13 = i11;
  i14 = i9;
 }
 do if (!i13) {
  i2 = (HEAP32[i17 >> 2] | 0) == 0;
  if (!i2) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  if (!i19) ___shlim(i18, 0); else if (!i2) {
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   if (!((i12 | 0) == 0 | i2)) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  }
  d1 = +(i23 | 0) * 0.0;
 } else {
  i8 = (i12 | 0) == 0;
  i9 = i8 ? i6 : i5;
  i8 = i8 ? i14 : i3;
  if ((i14 | 0) < 0 | (i14 | 0) == 0 & i6 >>> 0 < 8) {
   i3 = i15;
   i5 = i14;
   do {
    i3 = i3 << 4;
    i16 = i6;
    i6 = _i64Add(i6 | 0, i5 | 0, 1, 0) | 0;
    i15 = i5;
    i5 = getTempRet0() | 0;
   } while ((i15 | 0) < 0 | (i15 | 0) == 0 & i16 >>> 0 < 7);
   i6 = i3;
  } else i6 = i15;
  if ((i2 | 32 | 0) == 112) {
   i3 = _scanexp(i18, i19) | 0;
   i2 = getTempRet0() | 0;
   if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
    if (!i19) {
     ___shlim(i18, 0);
     d1 = 0.0;
     break;
    }
    if (!(HEAP32[i17 >> 2] | 0)) {
     i3 = 0;
     i2 = 0;
    } else {
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
     i3 = 0;
     i2 = 0;
    }
   }
  } else if (!(HEAP32[i17 >> 2] | 0)) {
   i3 = 0;
   i2 = 0;
  } else {
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   i3 = 0;
   i2 = 0;
  }
  i5 = _bitshift64Shl(i9 | 0, i8 | 0, 2) | 0;
  i5 = _i64Add(i5 | 0, getTempRet0() | 0, -32, -1) | 0;
  i5 = _i64Add(i5 | 0, getTempRet0() | 0, i3 | 0, i2 | 0) | 0;
  i2 = getTempRet0() | 0;
  if (!i6) {
   d1 = +(i23 | 0) * 0.0;
   break;
  }
  i20 = 0 - i21 | 0;
  i19 = ((i20 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) > (i19 | 0) | (i2 | 0) == (i19 | 0) & i5 >>> 0 > i20 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i23 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i20 = i21 + -106 | 0;
  i19 = ((i20 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) < (i19 | 0) | (i2 | 0) == (i19 | 0) & i5 >>> 0 < i20 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i23 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if ((i6 | 0) > -1) {
   i3 = i6;
   do {
    i20 = !(d1 >= .5);
    i3 = i3 << 1 | (i20 ^ 1) & 1;
    d1 = d1 + (i20 ? d1 : d1 + -1.0);
    i5 = _i64Add(i5 | 0, i2 | 0, -1, -1) | 0;
    i2 = getTempRet0() | 0;
   } while ((i3 | 0) > -1);
   d7 = d1;
   i6 = i3;
  } else d7 = d1;
  i20 = ((i22 | 0) < 0) << 31 >> 31;
  i21 = _i64Subtract(32, 0, i21 | 0, ((i21 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = _i64Add(i21 | 0, getTempRet0() | 0, i5 | 0, i2 | 0) | 0;
  i21 = getTempRet0() | 0;
  if ((i21 | 0) < (i20 | 0) | (i21 | 0) == (i20 | 0) & i2 >>> 0 < i22 >>> 0) if ((i2 | 0) > 0) i16 = 65; else {
   i3 = 0;
   i2 = 84;
   i16 = 67;
  } else {
   i2 = i22;
   i16 = 65;
  }
  if ((i16 | 0) == 65) if ((i2 | 0) < 53) {
   i3 = i2;
   i2 = 84 - i2 | 0;
   i16 = 67;
  } else {
   d4 = 0.0;
   d1 = +(i23 | 0);
  }
  if ((i16 | 0) == 67) {
   d1 = +(i23 | 0);
   d4 = +_copysignl(+_scalbn(1.0, i2), d1);
   i2 = i3;
  }
  i23 = (i6 & 1 | 0) == 0 & (d7 != 0.0 & (i2 | 0) < 32);
  d1 = (i23 ? 0.0 : d7) * d1 + (d4 + d1 * +((i6 + (i23 & 1) | 0) >>> 0)) - d4;
  if (!(d1 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
  d1 = +_scalbnl(d1, i5);
 } while (0);
 return +d1;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i13, i14, i10, i7) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i12 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i13 >> 2] | 0;
 do if (!i2) i11 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i13 >> 2] = 0;
   i11 = 14;
   break;
  } else if (i3) {
   i11 = 17;
   break;
  } else {
   i11 = 16;
   break;
  }
 } while (0);
 if ((i11 | 0) == 14) if (i3) i11 = 16; else {
  i2 = 0;
  i11 = 17;
 }
 L22 : do if ((i11 | 0) == 16) {
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 6;
  i1 = 0;
 } else if ((i11 | 0) == 17) {
  i1 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  i3 = i1 & 255;
  if (i3 << 24 >> 24 > -1) {
   i9 = i10 + 8 | 0;
   if (HEAP16[(HEAP32[i9 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 2048) {
    i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 31](i10, i3, 0) | 0) << 24 >> 24;
    i3 = HEAP32[i12 >> 2] | 0;
    i4 = i3 + 12 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i3) | 0; else {
     HEAP32[i4 >> 2] = i5 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 >> 0] | 0) | 0;
    }
    i6 = i2;
    i5 = i2;
    while (1) {
     i1 = i1 + -48 | 0;
     i8 = i7 + -1 | 0;
     i2 = HEAP32[i12 >> 2] | 0;
     do if (!i2) i4 = 1; else {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i12 >> 2] = 0;
       i4 = 1;
       break;
      } else {
       i4 = (HEAP32[i12 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!i5) {
      i2 = 1;
      i5 = 0;
     } else {
      i2 = HEAP32[i5 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i13 >> 2] = 0;
       i2 = 1;
       i6 = 0;
       i5 = 0;
      } else i2 = 0;
     }
     i3 = HEAP32[i12 >> 2] | 0;
     if (!((i7 | 0) > 1 & (i4 ^ i2))) break;
     i2 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     i3 = i2 & 255;
     if (i3 << 24 >> 24 <= -1) break L22;
     if (!(HEAP16[(HEAP32[i9 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break L22;
     i1 = (i1 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 31](i10, i3, 0) | 0) << 24 >> 24) | 0;
     i2 = HEAP32[i12 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
      HEAP32[i3 >> 2] = i4 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     }
     i7 = i8;
    }
    do if (!i3) i3 = 1; else {
     i2 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i12 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i12 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!i6) i11 = 63; else {
     i2 = HEAP32[i6 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i13 >> 2] = 0;
      i11 = 63;
      break;
     } else if (i3) break L22; else break;
    } while (0);
    if ((i11 | 0) == 63) if (!i3) break;
    HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 2;
    break;
   }
  }
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 4;
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i12 = i24 + 160 | 0;
 i13 = i24 + 328 | 0;
 i14 = i24 + 324 | 0;
 i22 = i24 + 312 | 0;
 i21 = i24 + 300 | 0;
 i16 = i24 + 296 | 0;
 i17 = i24;
 i18 = i24 + 292 | 0;
 i19 = i24 + 288 | 0;
 i15 = i24 + 333 | 0;
 i11 = i24 + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i21 + 11 | 0;
 i9 = i21 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i6 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i15, i11, i2, i16, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF32[i20 >> 2] = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27));
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 48;
   break;
  } else if (i2) break; else {
   i23 = 50;
   break;
  }
 } while (0);
 if ((i23 | 0) == 48) if (i2) i23 = 50;
 if ((i23 | 0) == 50) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i24 + 160 | 0;
 i13 = i24 + 231 | 0;
 i14 = i24 + 230 | 0;
 i22 = i24 + 216 | 0;
 i21 = i24 + 204 | 0;
 i16 = i24 + 200 | 0;
 i17 = i24;
 i18 = i24 + 196 | 0;
 i19 = i24 + 192 | 0;
 i15 = i24 + 229 | 0;
 i11 = i24 + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i21 + 11 | 0;
 i9 = i21 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i6 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1 & 255, i15, i11, i2, i16, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF32[i20 >> 2] = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27));
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 48;
   break;
  } else if (i2) break; else {
   i23 = 50;
   break;
  }
 } while (0);
 if ((i23 | 0) == 48) if (i2) i23 = 50;
 if ((i23 | 0) == 50) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i12 = i24 + 160 | 0;
 i13 = i24 + 328 | 0;
 i14 = i24 + 324 | 0;
 i22 = i24 + 312 | 0;
 i21 = i24 + 300 | 0;
 i16 = i24 + 296 | 0;
 i17 = i24;
 i18 = i24 + 292 | 0;
 i19 = i24 + 288 | 0;
 i15 = i24 + 333 | 0;
 i11 = i24 + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i21 + 11 | 0;
 i9 = i21 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i6 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i15, i11, i2, i16, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 48;
   break;
  } else if (i2) break; else {
   i23 = 50;
   break;
  }
 } while (0);
 if ((i23 | 0) == 48) if (i2) i23 = 50;
 if ((i23 | 0) == 50) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i12 = i24 + 160 | 0;
 i13 = i24 + 328 | 0;
 i14 = i24 + 324 | 0;
 i22 = i24 + 312 | 0;
 i21 = i24 + 300 | 0;
 i16 = i24 + 296 | 0;
 i17 = i24;
 i18 = i24 + 292 | 0;
 i19 = i24 + 288 | 0;
 i15 = i24 + 333 | 0;
 i11 = i24 + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i21 + 11 | 0;
 i9 = i21 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i6 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i15, i11, i2, i16, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 48;
   break;
  } else if (i2) break; else {
   i23 = 50;
   break;
  }
 } while (0);
 if ((i23 | 0) == 48) if (i2) i23 = 50;
 if ((i23 | 0) == 50) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i24 + 160 | 0;
 i13 = i24 + 231 | 0;
 i14 = i24 + 230 | 0;
 i22 = i24 + 216 | 0;
 i21 = i24 + 204 | 0;
 i16 = i24 + 200 | 0;
 i17 = i24;
 i18 = i24 + 196 | 0;
 i19 = i24 + 192 | 0;
 i15 = i24 + 229 | 0;
 i11 = i24 + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i21 + 11 | 0;
 i9 = i21 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i6 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1 & 255, i15, i11, i2, i16, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 48;
   break;
  } else if (i2) break; else {
   i23 = 50;
   break;
  }
 } while (0);
 if ((i23 | 0) == 48) if (i2) i23 = 50;
 if ((i23 | 0) == 50) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i24 + 160 | 0;
 i13 = i24 + 231 | 0;
 i14 = i24 + 230 | 0;
 i22 = i24 + 216 | 0;
 i21 = i24 + 204 | 0;
 i16 = i24 + 200 | 0;
 i17 = i24;
 i18 = i24 + 196 | 0;
 i19 = i24 + 192 | 0;
 i15 = i24 + 229 | 0;
 i11 = i24 + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i21 + 11 | 0;
 i9 = i21 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i6 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i21, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1 & 255, i15, i11, i2, i16, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 48;
   break;
  } else if (i2) break; else {
   i23 = 50;
   break;
  }
 } while (0);
 if ((i23 | 0) == 48) if (i2) i23 = 50;
 if ((i23 | 0) == 50) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i12 = i25 + 300 | 0;
 i22 = i25 + 288 | 0;
 i23 = i25 + 276 | 0;
 i13 = i25 + 272 | 0;
 i14 = i25;
 i15 = i25 + 268 | 0;
 i16 = i25 + 264 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i16 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 i17 = getTempRet0() | 0;
 HEAP32[i18 >> 2] = i16;
 HEAP32[i18 + 4 >> 2] = i17;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i25 + 224 | 0;
 i22 = i25 + 212 | 0;
 i23 = i25 + 200 | 0;
 i13 = i25 + 196 | 0;
 i14 = i25;
 i15 = i25 + 192 | 0;
 i16 = i25 + 188 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i16 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 i17 = getTempRet0() | 0;
 HEAP32[i18 >> 2] = i16;
 HEAP32[i18 + 4 >> 2] = i17;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i12 = i25 + 300 | 0;
 i22 = i25 + 288 | 0;
 i23 = i25 + 276 | 0;
 i13 = i25 + 272 | 0;
 i14 = i25;
 i15 = i25 + 268 | 0;
 i16 = i25 + 264 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i16 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 i17 = getTempRet0() | 0;
 HEAP32[i18 >> 2] = i16;
 HEAP32[i18 + 4 >> 2] = i17;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i25 + 224 | 0;
 i22 = i25 + 212 | 0;
 i23 = i25 + 200 | 0;
 i13 = i25 + 196 | 0;
 i14 = i25;
 i15 = i25 + 192 | 0;
 i16 = i25 + 188 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i16 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 i17 = getTempRet0() | 0;
 HEAP32[i18 >> 2] = i16;
 HEAP32[i18 + 4 >> 2] = i17;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i15, i16, i1, i17, i13, i18, i14) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 i13 = i13 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21;
 i4 = (i17 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i2 = i3;
   i19 = i3;
  }
 } else {
  i2 = i3;
  i19 = 0;
 }
 i6 = i1;
 i7 = i2;
 i3 = 0;
 while (1) {
  if ((i6 | 0) == (i17 | 0)) break;
  i5 = HEAP8[i6 + 11 >> 0] | 0;
  if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
  if (!i5) {
   HEAP8[i7 >> 0] = 2;
   i4 = i4 + -1 | 0;
   i3 = i3 + 1 | 0;
  } else HEAP8[i7 >> 0] = 1;
  i6 = i6 + 12 | 0;
  i7 = i7 + 1 | 0;
 }
 i12 = 0;
 i10 = i3;
 while (1) {
  i3 = HEAP32[i15 >> 2] | 0;
  do if (!i3) i7 = 1; else {
   i5 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i15 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i15 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i5 = HEAP32[i16 >> 2] | 0;
  if (!i5) {
   i3 = 1;
   i5 = 0;
  } else {
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i16 >> 2] = 0;
    i3 = 1;
    i5 = 0;
   } else i3 = 0;
  }
  i6 = HEAP32[i15 >> 2] | 0;
  if (!((i4 | 0) != 0 & (i7 ^ i3))) break;
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  i3 = i3 & 255;
  if (!i14) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 31](i13, i3) | 0;
  i11 = i12 + 1 | 0;
  i8 = i1;
  i7 = 0;
  i9 = i2;
  while (1) {
   if ((i8 | 0) == (i17 | 0)) break;
   do if ((HEAP8[i9 >> 0] | 0) == 1) {
    i6 = i8 + 11 | 0;
    if ((HEAP8[i6 >> 0] | 0) < 0) i5 = HEAP32[i8 >> 2] | 0; else i5 = i8;
    i5 = HEAP8[i5 + i12 >> 0] | 0;
    if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 31](i13, i5) | 0;
    if (i3 << 24 >> 24 != i5 << 24 >> 24) {
     HEAP8[i9 >> 0] = 0;
     i5 = i7;
     i6 = i10;
     i4 = i4 + -1 | 0;
     break;
    }
    i5 = HEAP8[i6 >> 0] | 0;
    if (i5 << 24 >> 24 < 0) i5 = HEAP32[i8 + 4 >> 2] | 0; else i5 = i5 & 255;
    if ((i5 | 0) == (i11 | 0)) {
     HEAP8[i9 >> 0] = 2;
     i5 = 1;
     i6 = i10 + 1 | 0;
     i4 = i4 + -1 | 0;
    } else {
     i5 = 1;
     i6 = i10;
    }
   } else {
    i5 = i7;
    i6 = i10;
   } while (0);
   i8 = i8 + 12 | 0;
   i7 = i5;
   i9 = i9 + 1 | 0;
   i10 = i6;
  }
  L67 : do if (i7) {
   i3 = HEAP32[i15 >> 2] | 0;
   i5 = i3 + 12 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i6 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i3) | 0; else {
    HEAP32[i5 >> 2] = i6 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i6 >> 0] | 0) | 0;
   }
   if ((i10 + i4 | 0) >>> 0 > 1) {
    i6 = i1;
    i7 = i2;
    i3 = i10;
    while (1) {
     if ((i6 | 0) == (i17 | 0)) break L67;
     if ((HEAP8[i7 >> 0] | 0) == 2) {
      i5 = HEAP8[i6 + 11 >> 0] | 0;
      if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
      if ((i5 | 0) != (i11 | 0)) {
       HEAP8[i7 >> 0] = 0;
       i3 = i3 + -1 | 0;
      }
     }
     i6 = i6 + 12 | 0;
     i7 = i7 + 1 | 0;
    }
   } else i3 = i10;
  } else i3 = i10; while (0);
  i12 = i11;
  i10 = i3;
 }
 do if (!i6) i4 = 1; else {
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i5) i20 = 41; else {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i16 >> 2] = 0;
   i20 = 41;
   break;
  } else if (i4) break; else {
   i20 = 79;
   break;
  }
 } while (0);
 if ((i20 | 0) == 41) if (i4) i20 = 79;
 if ((i20 | 0) == 79) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 while (1) {
  if ((i1 | 0) == (i17 | 0)) {
   i20 = 84;
   break;
  }
  if ((HEAP8[i2 >> 0] | 0) == 2) break;
  i1 = i1 + 12 | 0;
  i2 = i2 + 1 | 0;
 }
 if ((i20 | 0) == 84) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i17;
 }
 _free(i19);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i15, i16, i1, i17, i13, i18, i14) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 i13 = i13 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21;
 i4 = (i17 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i2 = i3;
   i19 = i3;
  }
 } else {
  i2 = i3;
  i19 = 0;
 }
 i3 = 0;
 i6 = i1;
 i7 = i2;
 while (1) {
  if ((i6 | 0) == (i17 | 0)) break;
  i5 = HEAP8[i6 + 8 + 3 >> 0] | 0;
  if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
  if (!i5) {
   HEAP8[i7 >> 0] = 2;
   i3 = i3 + 1 | 0;
   i4 = i4 + -1 | 0;
  } else HEAP8[i7 >> 0] = 1;
  i6 = i6 + 12 | 0;
  i7 = i7 + 1 | 0;
 }
 i12 = 0;
 i10 = i3;
 while (1) {
  i3 = HEAP32[i15 >> 2] | 0;
  do if (!i3) i7 = 1; else {
   i5 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i15 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i15 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i5 = HEAP32[i16 >> 2] | 0;
  if (!i5) {
   i3 = 1;
   i5 = 0;
  } else {
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i16 >> 2] = 0;
    i3 = 1;
    i5 = 0;
   } else i3 = 0;
  }
  i6 = HEAP32[i15 >> 2] | 0;
  if (!((i4 | 0) != 0 & (i7 ^ i3))) break;
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (!i14) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, i3) | 0;
  i11 = i12 + 1 | 0;
  i8 = i1;
  i7 = 0;
  i9 = i2;
  while (1) {
   if ((i8 | 0) == (i17 | 0)) break;
   do if ((HEAP8[i9 >> 0] | 0) == 1) {
    i6 = i8 + 8 + 3 | 0;
    if ((HEAP8[i6 >> 0] | 0) < 0) i5 = HEAP32[i8 >> 2] | 0; else i5 = i8;
    i5 = HEAP32[i5 + (i12 << 2) >> 2] | 0;
    if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, i5) | 0;
    if ((i3 | 0) != (i5 | 0)) {
     HEAP8[i9 >> 0] = 0;
     i5 = i7;
     i6 = i10;
     i4 = i4 + -1 | 0;
     break;
    }
    i5 = HEAP8[i6 >> 0] | 0;
    if (i5 << 24 >> 24 < 0) i5 = HEAP32[i8 + 4 >> 2] | 0; else i5 = i5 & 255;
    if ((i5 | 0) == (i11 | 0)) {
     HEAP8[i9 >> 0] = 2;
     i5 = 1;
     i6 = i10 + 1 | 0;
     i4 = i4 + -1 | 0;
    } else {
     i5 = 1;
     i6 = i10;
    }
   } else {
    i5 = i7;
    i6 = i10;
   } while (0);
   i8 = i8 + 12 | 0;
   i7 = i5;
   i9 = i9 + 1 | 0;
   i10 = i6;
  }
  L67 : do if (i7) {
   i3 = HEAP32[i15 >> 2] | 0;
   i5 = i3 + 12 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i6 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i3) | 0; else {
    HEAP32[i5 >> 2] = i6 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i6 >> 2] | 0) | 0;
   }
   if ((i10 + i4 | 0) >>> 0 > 1) {
    i6 = i1;
    i7 = i2;
    i3 = i10;
    while (1) {
     if ((i6 | 0) == (i17 | 0)) break L67;
     if ((HEAP8[i7 >> 0] | 0) == 2) {
      i5 = HEAP8[i6 + 8 + 3 >> 0] | 0;
      if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
      if ((i5 | 0) != (i11 | 0)) {
       HEAP8[i7 >> 0] = 0;
       i3 = i3 + -1 | 0;
      }
     }
     i6 = i6 + 12 | 0;
     i7 = i7 + 1 | 0;
    }
   } else i3 = i10;
  } else i3 = i10; while (0);
  i12 = i11;
  i10 = i3;
 }
 do if (!i6) i4 = 1; else {
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i5) i20 = 41; else {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i16 >> 2] = 0;
   i20 = 41;
   break;
  } else if (i4) break; else {
   i20 = 79;
   break;
  }
 } while (0);
 if ((i20 | 0) == 41) if (i4) i20 = 79;
 if ((i20 | 0) == 79) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 while (1) {
  if ((i1 | 0) == (i17 | 0)) {
   i20 = 84;
   break;
  }
  if ((HEAP8[i2 >> 0] | 0) == 2) break;
  i1 = i1 + 12 | 0;
  i2 = i2 + 1 | 0;
 }
 if ((i20 | 0) == 84) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i17;
 }
 _free(i19);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i12 = i25 + 300 | 0;
 i22 = i25 + 288 | 0;
 i23 = i25 + 276 | 0;
 i13 = i25 + 272 | 0;
 i14 = i25;
 i15 = i25 + 268 | 0;
 i16 = i25 + 264 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP16[i18 >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i12 = i25 + 300 | 0;
 i22 = i25 + 288 | 0;
 i23 = i25 + 276 | 0;
 i13 = i25 + 272 | 0;
 i14 = i25;
 i15 = i25 + 268 | 0;
 i16 = i25 + 264 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i12 = i25 + 300 | 0;
 i22 = i25 + 288 | 0;
 i23 = i25 + 276 | 0;
 i13 = i25 + 272 | 0;
 i14 = i25;
 i15 = i25 + 268 | 0;
 i16 = i25 + 264 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i25 + 224 | 0;
 i22 = i25 + 212 | 0;
 i23 = i25 + 200 | 0;
 i13 = i25 + 196 | 0;
 i14 = i25;
 i15 = i25 + 192 | 0;
 i16 = i25 + 188 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP16[i18 >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i25 + 224 | 0;
 i22 = i25 + 212 | 0;
 i23 = i25 + 200 | 0;
 i13 = i25 + 196 | 0;
 i14 = i25;
 i15 = i25 + 192 | 0;
 i16 = i25 + 188 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i25 + 224 | 0;
 i22 = i25 + 212 | 0;
 i23 = i25 + 200 | 0;
 i13 = i25 + 196 | 0;
 i14 = i25;
 i15 = i25 + 192 | 0;
 i16 = i25 + 188 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i12 = i25 + 300 | 0;
 i22 = i25 + 288 | 0;
 i23 = i25 + 276 | 0;
 i13 = i25 + 272 | 0;
 i14 = i25;
 i15 = i25 + 268 | 0;
 i16 = i25 + 264 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i19, i20, i2, i21, i18) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i25 + 224 | 0;
 i22 = i25 + 212 | 0;
 i23 = i25 + 200 | 0;
 i13 = i25 + 196 | 0;
 i14 = i25;
 i15 = i25 + 192 | 0;
 i16 = i25 + 188 | 0;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 i11 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i25 + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i22, i2, i12);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i8 = i23 + 11 | 0;
 i9 = i23 + 8 | 0;
 if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
 i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i6 = i23 + 4 | 0;
 i4 = HEAP32[i19 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i10 = 0;
  } else {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i19 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i10 = 0;
   } else {
    i7 = i3;
    i5 = 0;
    i10 = i4;
   }
  }
  i3 = HEAP32[i20 >> 2] | 0;
  do if (!i3) i24 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i20 >> 2] = 0;
    i24 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i24 | 0) == 19) {
   i24 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i8 >> 0] | 0;
  i4 = i4 << 24 >> 24 < 0 ? HEAP32[i6 >> 2] | 0 : i4 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i4 << 1, 0);
   if ((HEAP8[i8 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i23, i1, 0);
   i2 = (HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i23 >> 2] | 0 : i23;
   HEAP32[i13 >> 2] = i2 + i4;
  }
  i4 = i10 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i10 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i22, i14, i15, i11) | 0) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 63](i10) | 0; else {
   HEAP32[i4 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  }
  i3 = i7;
  i4 = i10;
 }
 i12 = HEAP8[i22 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i21, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i14, HEAP32[i15 >> 2] | 0, i21);
 if (!i10) i2 = 1; else {
  i1 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i10) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i24 = 48; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i24 = 48;
   break;
  } else if (i2) break; else {
   i24 = 50;
   break;
  }
 } while (0);
 if ((i24 | 0) == 48) if (i2) i24 = 50;
 if ((i24 | 0) == 50) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 i24 = HEAP32[i19 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i22, i23, i2, i24, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i16 = i21 + 264 | 0;
 i14 = i21 + 160 | 0;
 i18 = i21 + 292 | 0;
 i19 = i21 + 280 | 0;
 i15 = i21 + 276 | 0;
 i11 = i21;
 i12 = i21 + 272 | 0;
 i13 = i21 + 268 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i18 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i19, i2);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i19, 21956) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 7](i1, 6016, 6042, i14) | 0;
 __ZNSt3__26localeD2Ev(i19);
 HEAP32[i19 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i19 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i10 = i19 + 11 | 0;
 i9 = i19 + 8 | 0;
 if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, i1, 0);
 i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i13 >> 2] = 0;
 i8 = i19 + 4 | 0;
 i4 = HEAP32[i22 >> 2] | 0;
 i3 = i4;
 L12 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i4 = 0;
  } else {
   i2 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i22 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i4 = 0;
   } else {
    i7 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i23 >> 2] | 0;
  do if (!i3) i20 = 22; else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i20 = 22;
    break;
   } else if (i5) break; else break L12;
  } while (0);
  if ((i20 | 0) == 22) {
   i20 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i2 = HEAP8[i10 >> 0] | 0;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i2 & 255;
  if ((HEAP32[i15 >> 2] | 0) == (i1 + i2 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, i2 << 1, 0);
   if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, i1, 0);
   i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
   HEAP32[i15 >> 2] = i1 + i2;
  }
  i5 = i4 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i4 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i2, 16, i1, i15, i13, 0, i18, i11, i12, i14) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 63](i4) | 0; else {
   HEAP32[i5 >> 2] = i2 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  }
  i3 = i7;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, (HEAP32[i15 >> 2] | 0) - i1 | 0, 0);
 i14 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 i15 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i16 >> 2] = i17;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i14, i15, 13271, i16) | 0) != 1) HEAP32[i24 >> 2] = 4;
 if (!i4) i2 = 1; else {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i22 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i20 = 50; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i20 = 50;
   break;
  } else if (i2) break; else {
   i20 = 52;
   break;
  }
 } while (0);
 if ((i20 | 0) == 50) if (i2) i20 = 52;
 if ((i20 | 0) == 52) HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 2;
 i24 = HEAP32[i22 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i21;
 return i24 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i22, i23, i2, i24, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i16 = i21 + 192 | 0;
 i14 = i21 + 160 | 0;
 i18 = i21 + 220 | 0;
 i19 = i21 + 208 | 0;
 i15 = i21 + 204 | 0;
 i11 = i21;
 i12 = i21 + 200 | 0;
 i13 = i21 + 196 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i18 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i19, i2);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i19, 21924) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 7](i1, 6016, 6042, i14) | 0;
 __ZNSt3__26localeD2Ev(i19);
 HEAP32[i19 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i19 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i10 = i19 + 11 | 0;
 i9 = i19 + 8 | 0;
 if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, i1, 0);
 i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i13 >> 2] = 0;
 i8 = i19 + 4 | 0;
 i4 = HEAP32[i22 >> 2] | 0;
 i3 = i4;
 L12 : while (1) {
  if (!i4) {
   i7 = 0;
   i5 = 1;
   i4 = 0;
  } else {
   i2 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i22 >> 2] = 0;
    i7 = 0;
    i5 = 1;
    i4 = 0;
   } else {
    i7 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i23 >> 2] | 0;
  do if (!i3) i20 = 22; else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i20 = 22;
    break;
   } else if (i5) break; else break L12;
  } while (0);
  if ((i20 | 0) == 22) {
   i20 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i2 = HEAP8[i10 >> 0] | 0;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i2 & 255;
  if ((HEAP32[i15 >> 2] | 0) == (i1 + i2 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, i2 << 1, 0);
   if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, i1, 0);
   i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
   HEAP32[i15 >> 2] = i1 + i2;
  }
  i5 = i4 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i4 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i2 & 255, 16, i1, i15, i13, 0, i18, i11, i12, i14) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 63](i4) | 0; else {
   HEAP32[i5 >> 2] = i2 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  }
  i3 = i7;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i19, (HEAP32[i15 >> 2] | 0) - i1 | 0, 0);
 i14 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 i15 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i16 >> 2] = i17;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i14, i15, 13271, i16) | 0) != 1) HEAP32[i24 >> 2] = 4;
 if (!i4) i2 = 1; else {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i22 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i20 = 50; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i20 = 50;
   break;
  } else if (i2) break; else {
   i20 = 52;
   break;
  }
 } while (0);
 if ((i20 | 0) == 50) if (i2) i20 = 52;
 if ((i20 | 0) == 52) HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 2;
 i24 = HEAP32[i22 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i21;
 return i24 | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i11, i12, i13, i9, i7) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0;
 i1 = HEAP32[i11 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i11 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i11 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i12 >> 2] | 0;
 do if (!i2) i10 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i12 >> 2] = 0;
   i10 = 14;
   break;
  } else if (i3) {
   i10 = 17;
   break;
  } else {
   i10 = 16;
   break;
  }
 } while (0);
 if ((i10 | 0) == 14) if (i3) i10 = 16; else {
  i2 = 0;
  i10 = 17;
 }
 L22 : do if ((i10 | 0) == 16) {
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 6;
  i1 = 0;
 } else if ((i10 | 0) == 17) {
  i1 = HEAP32[i11 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 31](i9, 2048, i1) | 0)) {
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 4;
   i1 = 0;
   break;
  }
  i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] & 31](i9, i1, 0) | 0) << 24 >> 24;
  i3 = HEAP32[i11 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i3) | 0; else {
   HEAP32[i4 >> 2] = i5 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i5 >> 2] | 0) | 0;
  }
  i6 = i2;
  i5 = i2;
  while (1) {
   i1 = i1 + -48 | 0;
   i8 = i7 + -1 | 0;
   i2 = HEAP32[i11 >> 2] | 0;
   do if (!i2) i4 = 1; else {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i11 >> 2] = 0;
     i4 = 1;
     break;
    } else {
     i4 = (HEAP32[i11 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!i5) {
    i2 = 1;
    i5 = 0;
   } else {
    i2 = HEAP32[i5 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i12 >> 2] = 0;
     i2 = 1;
     i6 = 0;
     i5 = 0;
    } else i2 = 0;
   }
   i3 = HEAP32[i11 >> 2] | 0;
   if (!((i7 | 0) > 1 & (i4 ^ i2))) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 31](i9, 2048, i2) | 0)) break L22;
   i1 = (i1 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] & 31](i9, i2, 0) | 0) << 24 >> 24) | 0;
   i2 = HEAP32[i11 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
    HEAP32[i3 >> 2] = i4 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
   }
   i7 = i8;
  }
  do if (!i3) i3 = 1; else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i11 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i11 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!i6) i10 = 61; else {
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 63](i6) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i12 >> 2] = 0;
    i10 = 61;
    break;
   } else if (i3) break L22; else break;
  } while (0);
  if ((i10 | 0) == 61) if (!i3) break;
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 2;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__26locale5__impC2Em(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 11776;
 i2 = i1 + 8 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em(i2, 28);
 i3 = i1 + 144 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(i3, 13274, __ZNSt3__211char_traitsIcE6lengthEPKc(13274) | 0);
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 >> 2];
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_(i1, 19768);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_(i1, 19776);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_(i1, 19784);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_(i1, 19800);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i1, 19808);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i1, 19816);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i1, 19832);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i1, 19840);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_(i1, 19848);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_(i1, 19872);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 19904);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 19912);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 19920);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 19928);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i1, 19936);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i1, 19944);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i1, 19952);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i1, 19960);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 19968);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 19976);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 19984);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 19992);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 2e4);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 20016);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 20032);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 20048);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_(i1, 20064);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_(i1, 20072);
 return;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i28, i29, i30, i31, i1, i21, i22, i23, i24, i25, i10, i11, i12, i26, i13) {
 i28 = i28 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i26 = i26 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i27 = 0, i32 = 0;
 HEAP32[i30 >> 2] = i28;
 i14 = i26 + 8 + 3 | 0;
 i27 = i26 + 4 | 0;
 i15 = i12 + 8 + 3 | 0;
 i16 = i12 + 4 | 0;
 i17 = (i31 & 512 | 0) == 0;
 i18 = (i13 | 0) > 0;
 i19 = i11 + 11 | 0;
 i20 = i11 + 4 | 0;
 i9 = 0;
 while (1) {
  if ((i9 | 0) == 4) break;
  L4 : do switch (HEAP8[i24 + i9 >> 0] | 0) {
  case 0:
   {
    HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 44 >> 2] & 31](i22, 32) | 0;
    i8 = HEAP32[i30 >> 2] | 0;
    HEAP32[i30 >> 2] = i8 + 4;
    HEAP32[i8 >> 2] = i7;
    break;
   }
  case 3:
   {
    i8 = HEAP8[i14 >> 0] | 0;
    i2 = i8 << 24 >> 24 < 0;
    if ((i2 ? HEAP32[i27 >> 2] | 0 : i8 & 255) | 0) {
     i7 = HEAP32[(i2 ? HEAP32[i26 >> 2] | 0 : i26) >> 2] | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     HEAP32[i30 >> 2] = i8 + 4;
     HEAP32[i8 >> 2] = i7;
    }
    break;
   }
  case 2:
   {
    i6 = HEAP8[i15 >> 0] | 0;
    i2 = i6 << 24 >> 24 < 0;
    i6 = i2 ? HEAP32[i16 >> 2] | 0 : i6 & 255;
    if (!(i17 | (i6 | 0) == 0)) {
     i5 = i2 ? HEAP32[i12 >> 2] | 0 : i12;
     i3 = i5 + (i6 << 2) | 0;
     i4 = HEAP32[i30 >> 2] | 0;
     i2 = i4;
     while (1) {
      if ((i5 | 0) == (i3 | 0)) break;
      HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
      i2 = i2 + 4 | 0;
      i5 = i5 + 4 | 0;
     }
     HEAP32[i30 >> 2] = i4 + (i6 << 2);
    }
    break;
   }
  case 4:
   {
    i3 = HEAP32[i30 >> 2] | 0;
    i1 = i23 ? i1 + 4 | 0 : i1;
    i2 = i1;
    while (1) {
     if (i2 >>> 0 >= i21 >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i22 >> 2] | 0) + 12 >> 2] & 31](i22, 2048, HEAP32[i2 >> 2] | 0) | 0)) break;
     i2 = i2 + 4 | 0;
    }
    if (i18) {
     i5 = i13;
     while (1) {
      i4 = (i5 | 0) > 0;
      if (!(i2 >>> 0 > i1 >>> 0 & i4)) break;
      i8 = i2 + -4 | 0;
      i6 = HEAP32[i8 >> 2] | 0;
      i7 = HEAP32[i30 >> 2] | 0;
      HEAP32[i30 >> 2] = i7 + 4;
      HEAP32[i7 >> 2] = i6;
      i5 = i5 + -1 | 0;
      i2 = i8;
     }
     if (i4) i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 44 >> 2] & 31](i22, 48) | 0; else i7 = 0;
     i6 = HEAP32[i30 >> 2] | 0;
     while (1) {
      i4 = i6 + 4 | 0;
      if ((i5 | 0) <= 0) break;
      HEAP32[i6 >> 2] = i7;
      i5 = i5 + -1 | 0;
      i6 = i4;
     }
     HEAP32[i30 >> 2] = i4;
     HEAP32[i6 >> 2] = i25;
     i4 = i2;
    } else i4 = i2;
    if ((i4 | 0) == (i1 | 0)) {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 44 >> 2] & 31](i22, 48) | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     i2 = i8 + 4 | 0;
     HEAP32[i30 >> 2] = i2;
     HEAP32[i8 >> 2] = i7;
    } else {
     i8 = HEAP8[i19 >> 0] | 0;
     i2 = i8 << 24 >> 24 < 0;
     if (!((i2 ? HEAP32[i20 >> 2] | 0 : i8 & 255) | 0)) i2 = -1; else i2 = HEAP8[(i2 ? HEAP32[i11 >> 2] | 0 : i11) >> 0] | 0;
     i5 = 0;
     i6 = 0;
     i8 = i4;
     while (1) {
      if ((i8 | 0) == (i1 | 0)) break;
      i4 = HEAP32[i30 >> 2] | 0;
      if ((i6 | 0) == (i2 | 0)) {
       i7 = i4 + 4 | 0;
       HEAP32[i30 >> 2] = i7;
       HEAP32[i4 >> 2] = i10;
       i4 = i5 + 1 | 0;
       i5 = HEAP8[i19 >> 0] | 0;
       i2 = i5 << 24 >> 24 < 0;
       if (i4 >>> 0 < (i2 ? HEAP32[i20 >> 2] | 0 : i5 & 255) >>> 0) {
        i2 = HEAP8[(i2 ? HEAP32[i11 >> 2] | 0 : i11) + i4 >> 0] | 0;
        i2 = i2 << 24 >> 24 | 0;
        i2 = (i2 | 0) == 127 ? -1 : i2 | 0;
        i5 = i4;
        i6 = 0;
        i4 = i7;
       } else {
        i2 = i6;
        i5 = i4;
        i6 = 0;
        i4 = i7;
       }
      }
      i7 = i8 + -4 | 0;
      i32 = HEAP32[i7 >> 2] | 0;
      HEAP32[i30 >> 2] = i4 + 4;
      HEAP32[i4 >> 2] = i32;
      i6 = i6 + 1 | 0;
      i8 = i7;
     }
     i2 = HEAP32[i30 >> 2] | 0;
    }
    if ((i3 | 0) != (i2 | 0)) while (1) {
     i2 = i2 + -4 | 0;
     if (i3 >>> 0 >= i2 >>> 0) break L4;
     i32 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i2 >> 2] = i32;
     i3 = i3 + 4 | 0;
    }
    break;
   }
  default:
   {}
  } while (0);
  i9 = i9 + 1 | 0;
 }
 i2 = HEAP8[i14 >> 0] | 0;
 i1 = i2 << 24 >> 24 < 0;
 i2 = i1 ? HEAP32[i27 >> 2] | 0 : i2 & 255;
 if (i2 >>> 0 > 1) {
  i3 = HEAP32[i26 >> 2] | 0;
  i5 = i1 ? i3 + 4 | 0 : i27;
  i2 = (i1 ? i3 : i26) + (i2 << 2) | 0;
  i3 = HEAP32[i30 >> 2] | 0;
  i4 = i2 - i5 | 0;
  i1 = i3;
  while (1) {
   if ((i5 | 0) == (i2 | 0)) break;
   HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
  }
  HEAP32[i30 >> 2] = i3 + (i4 >>> 2 << 2);
 }
 switch ((i31 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i29 >> 2] = i28;
 }
 return;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i27, i28, i29, i30, i1, i20, i21, i22, i23, i24, i8, i9, i10, i26, i11) {
 i27 = i27 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i26 = i26 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i25 = 0, i31 = 0, i32 = 0, i33 = 0;
 HEAP32[i29 >> 2] = i27;
 i12 = i26 + 11 | 0;
 i25 = i26 + 4 | 0;
 i13 = i10 + 11 | 0;
 i14 = i10 + 4 | 0;
 i15 = (i30 & 512 | 0) == 0;
 i16 = i21 + 8 | 0;
 i17 = (i11 | 0) > 0;
 i18 = i9 + 11 | 0;
 i19 = i9 + 4 | 0;
 i7 = 0;
 while (1) {
  if ((i7 | 0) == 4) break;
  L4 : do switch (HEAP8[i23 + i7 >> 0] | 0) {
  case 0:
   {
    HEAP32[i28 >> 2] = HEAP32[i29 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i28 >> 2] = HEAP32[i29 >> 2];
    i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i21 >> 2] | 0) + 28 >> 2] & 31](i21, 32) | 0;
    i6 = HEAP32[i29 >> 2] | 0;
    HEAP32[i29 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = i5;
    break;
   }
  case 3:
   {
    i6 = HEAP8[i12 >> 0] | 0;
    i2 = i6 << 24 >> 24 < 0;
    if ((i2 ? HEAP32[i25 >> 2] | 0 : i6 & 255) | 0) {
     i5 = HEAP8[(i2 ? HEAP32[i26 >> 2] | 0 : i26) >> 0] | 0;
     i6 = HEAP32[i29 >> 2] | 0;
     HEAP32[i29 >> 2] = i6 + 1;
     HEAP8[i6 >> 0] = i5;
    }
    break;
   }
  case 2:
   {
    i3 = HEAP8[i13 >> 0] | 0;
    i2 = i3 << 24 >> 24 < 0;
    i3 = i2 ? HEAP32[i14 >> 2] | 0 : i3 & 255;
    if (!(i15 | (i3 | 0) == 0)) {
     i6 = i2 ? HEAP32[i10 >> 2] | 0 : i10;
     i4 = i6 + i3 | 0;
     i2 = HEAP32[i29 >> 2] | 0;
     i3 = i6;
     while (1) {
      if ((i3 | 0) == (i4 | 0)) break;
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      i2 = i2 + 1 | 0;
      i3 = i3 + 1 | 0;
     }
     HEAP32[i29 >> 2] = i2;
    }
    break;
   }
  case 4:
   {
    i3 = HEAP32[i29 >> 2] | 0;
    i1 = i22 ? i1 + 1 | 0 : i1;
    i4 = i1;
    while (1) {
     if (i4 >>> 0 >= i20 >>> 0) break;
     i2 = HEAP8[i4 >> 0] | 0;
     if (i2 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[i16 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break;
     i4 = i4 + 1 | 0;
    }
    if (i17) {
     i5 = i11;
     while (1) {
      i2 = (i5 | 0) > 0;
      if (!(i4 >>> 0 > i1 >>> 0 & i2)) break;
      i6 = i4 + -1 | 0;
      i31 = HEAP8[i6 >> 0] | 0;
      i2 = HEAP32[i29 >> 2] | 0;
      HEAP32[i29 >> 2] = i2 + 1;
      HEAP8[i2 >> 0] = i31;
      i5 = i5 + -1 | 0;
      i4 = i6;
     }
     if (i2) i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i21 >> 2] | 0) + 28 >> 2] & 31](i21, 48) | 0; else i6 = 0;
     i2 = i5;
     while (1) {
      i5 = HEAP32[i29 >> 2] | 0;
      HEAP32[i29 >> 2] = i5 + 1;
      if ((i2 | 0) <= 0) break;
      HEAP8[i5 >> 0] = i6;
      i2 = i2 + -1 | 0;
     }
     HEAP8[i5 >> 0] = i24;
    }
    L36 : do if ((i4 | 0) == (i1 | 0)) {
     i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i21 >> 2] | 0) + 28 >> 2] & 31](i21, 48) | 0;
     i31 = HEAP32[i29 >> 2] | 0;
     HEAP32[i29 >> 2] = i31 + 1;
     HEAP8[i31 >> 0] = i6;
    } else {
     i31 = HEAP8[i18 >> 0] | 0;
     i2 = i31 << 24 >> 24 < 0;
     if (!((i2 ? HEAP32[i19 >> 2] | 0 : i31 & 255) | 0)) i2 = -1; else i2 = HEAP8[(i2 ? HEAP32[i9 >> 2] | 0 : i9) >> 0] | 0;
     i5 = 0;
     i6 = 0;
     while (1) {
      if ((i4 | 0) == (i1 | 0)) break L36;
      if ((i6 | 0) == (i2 | 0)) {
       i31 = HEAP32[i29 >> 2] | 0;
       HEAP32[i29 >> 2] = i31 + 1;
       HEAP8[i31 >> 0] = i8;
       i5 = i5 + 1 | 0;
       i31 = HEAP8[i18 >> 0] | 0;
       i2 = i31 << 24 >> 24 < 0;
       if (i5 >>> 0 < (i2 ? HEAP32[i19 >> 2] | 0 : i31 & 255) >>> 0) {
        i2 = HEAP8[(i2 ? HEAP32[i9 >> 2] | 0 : i9) + i5 >> 0] | 0;
        i2 = i2 << 24 >> 24 | 0;
        i2 = (i2 | 0) == 127 ? -1 : i2 | 0;
        i6 = 0;
       } else {
        i2 = i6;
        i6 = 0;
       }
      }
      i31 = i4 + -1 | 0;
      i33 = HEAP8[i31 >> 0] | 0;
      i32 = HEAP32[i29 >> 2] | 0;
      HEAP32[i29 >> 2] = i32 + 1;
      HEAP8[i32 >> 0] = i33;
      i6 = i6 + 1 | 0;
      i4 = i31;
     }
    } while (0);
    i2 = HEAP32[i29 >> 2] | 0;
    if ((i3 | 0) != (i2 | 0)) while (1) {
     i2 = i2 + -1 | 0;
     if (i3 >>> 0 >= i2 >>> 0) break L4;
     i33 = HEAP8[i3 >> 0] | 0;
     HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
     HEAP8[i2 >> 0] = i33;
     i3 = i3 + 1 | 0;
    }
    break;
   }
  default:
   {}
  } while (0);
  i7 = i7 + 1 | 0;
 }
 i1 = HEAP8[i12 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 i1 = i2 ? HEAP32[i25 >> 2] | 0 : i1 & 255;
 if (i1 >>> 0 > 1) {
  i33 = i2 ? HEAP32[i26 >> 2] | 0 : i26;
  i3 = i33 + i1 | 0;
  i2 = HEAP32[i29 >> 2] | 0;
  i1 = i33;
  while (1) {
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i3 | 0)) break;
   HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
   i2 = i2 + 1 | 0;
  }
  HEAP32[i29 >> 2] = i2;
 }
 switch ((i30 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[i28 >> 2] = HEAP32[i29 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i28 >> 2] = i27;
 }
 return;
}

function _mbsrtowcs(i5, i9, i1, i3) {
 i5 = i5 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if (!i3) i8 = 5; else {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!i4) i8 = 5; else if (!i5) {
   i6 = i2;
   i3 = i1;
   i8 = 26;
  } else {
   HEAP32[i3 >> 2] = 0;
   i7 = i1;
   i6 = i2;
   i8 = 48;
  }
 }
 L5 : do if ((i8 | 0) == 5) {
  i3 = (i5 | 0) != 0;
  if (HEAP32[HEAP32[(___pthread_self_421() | 0) + 188 >> 2] >> 2] | 0) if (i3) {
   i3 = i1;
   i8 = 33;
   break;
  } else {
   i3 = i1;
   i8 = 15;
   break;
  }
  if (!i3) {
   i1 = _strlen(i2) | 0;
   i8 = 63;
   break;
  }
  L13 : do if (i1) {
   i3 = i1;
   while (1) {
    i4 = HEAP8[i2 >> 0] | 0;
    if (!(i4 << 24 >> 24)) break;
    i2 = i2 + 1 | 0;
    HEAP32[i5 >> 2] = i4 << 24 >> 24 & 57343;
    i3 = i3 + -1 | 0;
    if (!i3) break L13; else i5 = i5 + 4 | 0;
   }
   HEAP32[i5 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   i1 = i1 - i3 | 0;
   i8 = 63;
   break L5;
  } while (0);
  HEAP32[i9 >> 2] = i2;
  i8 = 63;
 } while (0);
 L20 : while (1) {
  L21 : do if ((i8 | 0) == 15) {
   while (1) {
    i4 = HEAP8[i2 >> 0] | 0;
    if (((i4 & 255) + -1 | 0) >>> 0 < 127) if (!(i2 & 3)) {
     i8 = HEAP32[i2 >> 2] | 0;
     i4 = i8 & 255;
     if (!((i8 + -16843009 | i8) & -2139062144)) {
      do {
       i2 = i2 + 4 | 0;
       i3 = i3 + -4 | 0;
       i4 = HEAP32[i2 >> 2] | 0;
      } while (!((i4 + -16843009 | i4) & -2139062144 | 0));
      i4 = i4 & 255;
     }
    }
    i4 = i4 & 255;
    if ((i4 + -1 | 0) >>> 0 >= 127) break;
    i3 = i3 + -1 | 0;
    i2 = i2 + 1 | 0;
   }
   i4 = i4 + -194 | 0;
   if (i4 >>> 0 > 50) i8 = 57; else {
    i4 = HEAP32[1056 + (i4 << 2) >> 2] | 0;
    i6 = i2 + 1 | 0;
    i8 = 26;
    continue L20;
   }
  } else if ((i8 | 0) == 26) {
   i8 = (HEAPU8[i6 >> 0] | 0) >>> 3;
   if ((i8 + -16 | i8 + (i4 >> 26)) >>> 0 > 7) {
    i2 = i6;
    i8 = 56;
   } else {
    i2 = i6 + 1 | 0;
    if (i4 & 33554432) {
     if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
      i2 = i6;
      i8 = 56;
      break;
     }
     i2 = i6 + 2 | 0;
     if (i4 & 524288) {
      if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
       i2 = i6;
       i8 = 56;
       break;
      }
      i2 = i6 + 3 | 0;
     }
    }
    i3 = i3 + -1 | 0;
    i8 = 15;
    continue L20;
   }
  } else if ((i8 | 0) == 33) {
   i8 = 0;
   L23 : do if (i3) {
    while (1) {
     i4 = HEAPU8[i2 >> 0] | 0;
     i6 = i4 + -1 | 0;
     if (i6 >>> 0 < 127) {
      if ((i2 & 3 | 0) == 0 & i3 >>> 0 > 4) {
       while (1) {
        i4 = HEAP32[i2 >> 2] | 0;
        if ((i4 + -16843009 | i4) & -2139062144 | 0) {
         i8 = 42;
         break;
        }
        HEAP32[i5 >> 2] = i4 & 255;
        HEAP32[i5 + 4 >> 2] = HEAPU8[i2 + 1 >> 0];
        HEAP32[i5 + 8 >> 2] = HEAPU8[i2 + 2 >> 0];
        i6 = i2 + 4 | 0;
        i4 = i5 + 16 | 0;
        HEAP32[i5 + 12 >> 2] = HEAPU8[i2 + 3 >> 0];
        i3 = i3 + -4 | 0;
        if (i3 >>> 0 > 4) {
         i5 = i4;
         i2 = i6;
        } else {
         i8 = 41;
         break;
        }
       }
       if ((i8 | 0) == 41) {
        i5 = i4;
        i2 = i6;
        i4 = HEAP8[i6 >> 0] | 0;
       } else if ((i8 | 0) == 42) i4 = i4 & 255;
       i4 = i4 & 255;
       i6 = i4 + -1 | 0;
       i8 = 44;
      }
     } else i8 = 44;
     if ((i8 | 0) == 44) {
      i8 = 0;
      if (i6 >>> 0 >= 127) break;
     }
     i2 = i2 + 1 | 0;
     HEAP32[i5 >> 2] = i4;
     i3 = i3 + -1 | 0;
     if (!i3) break L23; else i5 = i5 + 4 | 0;
    }
    i4 = i4 + -194 | 0;
    if (i4 >>> 0 > 50) {
     i8 = 57;
     break L21;
    }
    i4 = HEAP32[1056 + (i4 << 2) >> 2] | 0;
    i7 = i3;
    i6 = i2 + 1 | 0;
    i8 = 48;
    continue L20;
   } while (0);
   HEAP32[i9 >> 2] = i2;
   i8 = 63;
   continue L20;
  } else if ((i8 | 0) == 48) {
   i8 = 0;
   i3 = HEAPU8[i6 >> 0] | 0;
   i2 = i3 >>> 3;
   if ((i2 + -16 | i2 + (i4 >> 26)) >>> 0 > 7) {
    i2 = i6;
    i3 = i7;
    i8 = 56;
   } else {
    i2 = i6 + 1 | 0;
    i3 = i3 + -128 | i4 << 6;
    do if ((i3 | 0) < 0) {
     i4 = (HEAPU8[i2 >> 0] | 0) + -128 | 0;
     if (i4 >>> 0 <= 63) {
      i2 = i6 + 2 | 0;
      i3 = i4 | i3 << 6;
      if ((i3 | 0) >= 0) break;
      i4 = (HEAPU8[i2 >> 0] | 0) + -128 | 0;
      if (i4 >>> 0 <= 63) {
       i2 = i6 + 3 | 0;
       i3 = i4 | i3 << 6;
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 84;
     i2 = i6 + -1 | 0;
     break L21;
    } while (0);
    HEAP32[i5 >> 2] = i3;
    i5 = i5 + 4 | 0;
    i3 = i7 + -1 | 0;
    i8 = 33;
    continue L20;
   }
  } else if ((i8 | 0) == 63) return i1 | 0; while (0);
  if ((i8 | 0) == 56) {
   i2 = i2 + -1 | 0;
   if (!i4) i8 = 57; else {
    i1 = i5;
    i8 = 61;
   }
  }
  if ((i8 | 0) == 57) if (!(HEAP8[i2 >> 0] | 0)) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = 0;
    HEAP32[i9 >> 2] = 0;
   }
   i1 = i1 - i3 | 0;
   i8 = 63;
   continue;
  } else {
   i1 = i5;
   i8 = 61;
  }
  if ((i8 | 0) == 61) {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   if (!i1) {
    i1 = -1;
    i8 = 63;
    continue;
   }
  }
  HEAP32[i9 >> 2] = i2;
  i1 = -1;
  i8 = 63;
 }
 return 0;
}

function ___floatscan(i11, i2, i9) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0;
 i5 = 0;
 switch (i2 | 0) {
 case 0:
  {
   i7 = -149;
   i8 = 24;
   i5 = 4;
   break;
  }
 case 1:
  {
   i7 = -1074;
   i8 = 53;
   i5 = 4;
   break;
  }
 case 2:
  {
   i7 = -1074;
   i8 = 53;
   i5 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i5 | 0) == 4) {
  i12 = i11 + 4 | 0;
  i10 = i11 + 100 | 0;
  do {
   i2 = HEAP32[i12 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i12 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i11) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i4 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i2 + 1;
     i3 = HEAPU8[i2 >> 0] | 0;
     break L13;
    } else {
     i3 = ___shgetc(i11) | 0;
     break L13;
    }
   }
  default:
   {
    i3 = i2;
    i4 = 1;
   }
  } while (0);
  i2 = 0;
  while (1) {
   if ((i3 | 32 | 0) != (HEAP8[12585 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i12 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i11) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= 8) {
    i2 = 8;
    break;
   }
  }
  L29 : do switch (i2 & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    i5 = 23;
    break;
   }
  default:
   {
    i6 = (i9 | 0) != 0;
    if (i6 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i5 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     while (1) {
      if ((i3 | 32 | 0) != (HEAP8[12594 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i11) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= 3) {
       i2 = 3;
       break;
      }
     }
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i12 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i12 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i11) | 0;
      if ((i2 | 0) != 40) {
       if (!(HEAP32[i10 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      i2 = 1;
      while (1) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i11) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26)) if (!((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26)) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i10 >> 2] | 0) == 0;
      if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      if (!i6) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i11, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      if ((i3 | 0) == 48) {
       i2 = HEAP32[i12 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i11) | 0;
       if ((i2 | 32 | 0) == 120) {
        d1 = +_hexfloat(i11, i8, i7, i4, i9);
        break L4;
       }
       if (!(HEAP32[i10 >> 2] | 0)) i2 = 48; else {
        HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
        i2 = 48;
       }
      } else i2 = i3;
      d1 = +_decfloat(i11, i2, i8, i7, i4, i9);
      break L4;
     }
    default:
     {
      if (HEAP32[i10 >> 2] | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim(i11, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i5 | 0) == 23) {
   i3 = (HEAP32[i10 >> 2] | 0) == 0;
   if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
   if ((i9 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +Math_fround(Math_fround(i4 | 0) * Math_fround(inf));
 } while (0);
 return +d1;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i11, i12, i13, i14, i15, i16, i1) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = i20;
 i18 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21956) | 0;
 i9 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21964) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 63](i17, i9);
 HEAP32[i16 >> 2] = i14;
 i1 = HEAP8[i11 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 31](i18, i1) | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i10;
   i1 = i11 + 1 | 0;
   break;
  }
 default:
  i1 = i11;
 }
 i10 = i13;
 L4 : do if ((i10 - i1 | 0) > 1) if ((HEAP8[i1 >> 0] | 0) == 48) {
  i2 = i1 + 1 | 0;
  switch (HEAP8[i2 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i19 = 4;
    break L4;
   }
  }
  i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 31](i18, 48) | 0;
  i8 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i8 + 4;
  HEAP32[i8 >> 2] = i7;
  i1 = i1 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 31](i18, HEAP8[i2 >> 0] | 0) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i2 + 4;
  HEAP32[i2 >> 2] = i8;
  i2 = i1;
  while (1) {
   if (i2 >>> 0 >= i13 >>> 0) break L4;
   i8 = HEAP8[i2 >> 0] | 0;
   if (!(_isxdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L4;
   i2 = i2 + 1 | 0;
  }
 } else i19 = 4; else i19 = 4; while (0);
 L12 : do if ((i19 | 0) == 4) {
  i2 = i1;
  while (1) {
   if (i2 >>> 0 >= i13 >>> 0) break L12;
   i8 = HEAP8[i2 >> 0] | 0;
   if (!(_isdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L12;
   i2 = i2 + 1 | 0;
  }
 } while (0);
 i7 = i17 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i17 + 4 | 0;
 L19 : do if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 48 >> 2] & 7](i18, i1, i2, HEAP32[i16 >> 2] | 0) | 0;
  i1 = (HEAP32[i16 >> 2] | 0) + (i2 - i1 << 2) | 0;
  HEAP32[i16 >> 2] = i1;
  i3 = i18;
 } else {
  L22 : do if ((i1 | 0) != (i2 | 0)) {
   i3 = i2;
   i4 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L22;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 63](i9) | 0;
  i5 = i1;
  i3 = 0;
  i4 = 0;
  while (1) {
   if (i5 >>> 0 >= i2 >>> 0) break;
   i21 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i17 >> 2] | 0 : i17) + i3 >> 0] | 0;
   if (i21 << 24 >> 24 > 0 & (i4 | 0) == (i21 << 24 >> 24 | 0)) {
    i4 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i4 + 4;
    HEAP32[i4 >> 2] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 31](i18, HEAP8[i5 >> 0] | 0) | 0;
   i21 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i21 + 4;
   HEAP32[i21 >> 2] = i22;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i1 = i14 + (i1 - i11 << 2) | 0;
  i4 = HEAP32[i16 >> 2] | 0;
  if ((i1 | 0) == (i4 | 0)) i3 = i18; else {
   i3 = i4;
   while (1) {
    i3 = i3 + -4 | 0;
    if (i1 >>> 0 >= i3 >>> 0) {
     i3 = i18;
     i1 = i4;
     break L19;
    }
    i22 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i3 >> 2] = i22;
    i1 = i1 + 4 | 0;
   }
  }
 } while (0);
 while (1) {
  if (i2 >>> 0 >= i13 >>> 0) break;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24 == 46) {
   i19 = 32;
   break;
  }
  i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 31](i18, i1) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  i1 = i22 + 4 | 0;
  HEAP32[i16 >> 2] = i1;
  HEAP32[i22 >> 2] = i21;
  i2 = i2 + 1 | 0;
 }
 if ((i19 | 0) == 32) {
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 63](i9) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  i1 = i22 + 4 | 0;
  HEAP32[i16 >> 2] = i1;
  HEAP32[i22 >> 2] = i21;
  i2 = i2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 48 >> 2] & 7](i18, i2, i13, i1) | 0;
 i22 = (HEAP32[i16 >> 2] | 0) + (i10 - i2 << 2) | 0;
 HEAP32[i16 >> 2] = i22;
 HEAP32[i15 >> 2] = (i12 | 0) == (i13 | 0) ? i22 : i14 + (i12 - i11 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 STACKTOP = i20;
 return;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i11, i12, i13, i14, i15, i16, i1) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = i20;
 i18 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21924) | 0;
 i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21940) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 63](i17, i10);
 HEAP32[i16 >> 2] = i14;
 i1 = HEAP8[i11 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 31](i18, i1) | 0;
   i2 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i9;
   i2 = i11 + 1 | 0;
   break;
  }
 default:
  i2 = i11;
 }
 i9 = i13;
 L4 : do if ((i9 - i2 | 0) > 1) if ((HEAP8[i2 >> 0] | 0) == 48) {
  i1 = i2 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i19 = 4;
    break L4;
   }
  }
  i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 31](i18, 48) | 0;
  i8 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i8 + 1;
  HEAP8[i8 >> 0] = i7;
  i2 = i2 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 31](i18, HEAP8[i1 >> 0] | 0) | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i1 + 1;
  HEAP8[i1 >> 0] = i8;
  i1 = i2;
  while (1) {
   if (i1 >>> 0 >= i13 >>> 0) break L4;
   i8 = HEAP8[i1 >> 0] | 0;
   if (!(_isxdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L4;
   i1 = i1 + 1 | 0;
  }
 } else i19 = 4; else i19 = 4; while (0);
 L12 : do if ((i19 | 0) == 4) {
  i1 = i2;
  while (1) {
   if (i1 >>> 0 >= i13 >>> 0) break L12;
   i8 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L12;
   i1 = i1 + 1 | 0;
  }
 } while (0);
 i7 = i17 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i17 + 4 | 0;
 L19 : do if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 32 >> 2] & 7](i18, i2, i1, HEAP32[i16 >> 2] | 0) | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (i1 - i2);
  i3 = i18;
 } else {
  L22 : do if ((i2 | 0) != (i1 | 0)) {
   i3 = i1;
   i4 = i2;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L22;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 63](i10) | 0;
  i5 = i2;
  i4 = 0;
  i3 = 0;
  while (1) {
   if (i5 >>> 0 >= i1 >>> 0) break;
   i21 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i17 >> 2] | 0 : i17) + i3 >> 0] | 0;
   if (i21 << 24 >> 24 > 0 & (i4 | 0) == (i21 << 24 >> 24 | 0)) {
    i4 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 31](i18, HEAP8[i5 >> 0] | 0) | 0;
   i21 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i21 + 1;
   HEAP8[i21 >> 0] = i22;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i3 = i14 + (i2 - i11) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  if ((i3 | 0) == (i2 | 0)) i3 = i18; else while (1) {
   i2 = i2 + -1 | 0;
   if (i3 >>> 0 >= i2 >>> 0) {
    i3 = i18;
    break L19;
   }
   i22 = HEAP8[i3 >> 0] | 0;
   HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
   HEAP8[i2 >> 0] = i22;
   i3 = i3 + 1 | 0;
  }
 } while (0);
 while (1) {
  if (i1 >>> 0 >= i13 >>> 0) break;
  i2 = HEAP8[i1 >> 0] | 0;
  if (i2 << 24 >> 24 == 46) {
   i19 = 32;
   break;
  }
  i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i18, i2) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i22 + 1;
  HEAP8[i22 >> 0] = i21;
  i1 = i1 + 1 | 0;
 }
 if ((i19 | 0) == 32) {
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 63](i10) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i22 + 1;
  HEAP8[i22 >> 0] = i21;
  i1 = i1 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 32 >> 2] & 7](i18, i1, i13, HEAP32[i16 >> 2] | 0) | 0;
 i22 = (HEAP32[i16 >> 2] | 0) + (i9 - i1) | 0;
 HEAP32[i16 >> 2] = i22;
 HEAP32[i15 >> 2] = (i12 | 0) == (i13 | 0) ? i22 : i14 + (i12 - i11) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 STACKTOP = i20;
 return;
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (setTempRet0(i12 | 0), i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (!i2) {
  if (i1) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  if (!i9) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i12 = 0;
   i13 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i12 = 0;
   i13 = 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i12 = 0;
  i13 = 0;
  return (setTempRet0(i12 | 0), i13) | 0;
 } else {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (setTempRet0(i12 | 0), i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (setTempRet0(i12 | 0), i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2 | 0) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13 | 0) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (setTempRet0(i14 | 0), i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (setTempRet0(i14 | 0), i15) | 0;
  }
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = getTempRet0() | 0;
  i4 = i3;
  i3 = 0;
  do {
   i16 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i16 = i5 << 1 | i16 >>> 31 | 0;
   i11 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7 | 0, i8 | 0, i16 | 0, i11 | 0) | 0;
   i14 = getTempRet0() | 0;
   i15 = ((i14 | 0) < 0 ? -1 : 0) << 1 | 0;
   i12 = i14 >> 31 | i15;
   i3 = i12 & 1;
   i5 = _i64Subtract(i16 | 0, i11 | 0, i12 & i10 | 0, (((i14 | 0) < 0 ? -1 : 0) >> 31 | i15) & i9 | 0) | 0;
   i6 = getTempRet0() | 0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13 | 0) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i15 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i16 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (setTempRet0(i15 | 0), i16) | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i21, i9, i25, i26, d5) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i9 = i9 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 i11 = i28 + 912 | 0;
 i3 = i28 + 904 | 0;
 i1 = i28 + 800 | 0;
 i4 = i28 + 984 | 0;
 i2 = i28 + 400 | 0;
 i27 = i28 + 980 | 0;
 i12 = i28 + 988 | 0;
 i13 = i28 + 976 | 0;
 i14 = i28 + 972 | 0;
 i22 = i28 + 960 | 0;
 i23 = i28 + 948 | 0;
 i24 = i28 + 936 | 0;
 i8 = i28 + 932 | 0;
 i10 = i28;
 i15 = i28 + 928 | 0;
 i16 = i28 + 920 | 0;
 i17 = i28 + 924 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i11 >> 3] = d5;
 i1 = _snprintf(i1, 100, 14758, i11) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i4, i1, 14758, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1 << 2) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i18 = i3;
   i20 = i1;
   i30 = i3;
   i31 = i2;
  }
 } else {
  i18 = i2;
  i20 = i1;
  i30 = 0;
  i31 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i27, i25);
 i7 = __ZNKSt3__26locale9use_facetERNS0_2idE(i27, 21956) | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 7](i7, i6, i6 + i20 | 0, i18) | 0;
 if (!i20) i6 = 0; else i6 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i24 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i9, i6, i27, i12, i13, i14, i22, i23, i24, i8);
 i4 = HEAP32[i8 >> 2] | 0;
 if ((i20 | 0) > (i4 | 0)) {
  i3 = HEAP8[i24 + 8 + 3 >> 0] | 0;
  i1 = HEAP8[i23 + 8 + 3 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 1 + (i20 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i24 + 8 + 3 >> 0] | 0;
  i1 = HEAP8[i23 + 8 + 3 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 2 | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i2 + i3 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1 << 2) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i29 = i1;
  }
 } else {
  i19 = i10;
  i29 = 0;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i19, i15, i16, HEAP32[i25 + 4 >> 2] | 0, i18, i18 + (i20 << 2) | 0, i7, i6, i12, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i23, i24, i4);
 HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i19, i21, i1, i25, i26) | 0;
 if (i29 | 0) _free(i29);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i24);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 __ZNSt3__26localeD2Ev(i27);
 if (i30 | 0) _free(i30);
 if (i31 | 0) _free(i31);
 STACKTOP = i28;
 return i1 | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i21, i9, i25, i26, d5) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i9 = i9 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i11 = i28 + 336 | 0;
 i3 = i28 + 328 | 0;
 i1 = i28 + 224 | 0;
 i4 = i28 + 400 | 0;
 i2 = i28 + 112 | 0;
 i27 = i28 + 396 | 0;
 i12 = i28 + 408 | 0;
 i13 = i28 + 405 | 0;
 i14 = i28 + 404 | 0;
 i22 = i28 + 384 | 0;
 i23 = i28 + 372 | 0;
 i24 = i28 + 360 | 0;
 i8 = i28 + 356 | 0;
 i10 = i28;
 i15 = i28 + 352 | 0;
 i16 = i28 + 344 | 0;
 i17 = i28 + 348 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i11 >> 3] = d5;
 i1 = _snprintf(i1, 100, 14758, i11) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i4, i1, 14758, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i18 = i3;
   i20 = i1;
   i30 = i3;
   i31 = i2;
  }
 } else {
  i18 = i2;
  i20 = i1;
  i30 = 0;
  i31 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i27, i25);
 i7 = __ZNKSt3__26locale9use_facetERNS0_2idE(i27, 21924) | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] & 7](i7, i6, i6 + i20 | 0, i18) | 0;
 if (!i20) i6 = 0; else i6 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i24 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i9, i6, i27, i12, i13, i14, i22, i23, i24, i8);
 i4 = HEAP32[i8 >> 2] | 0;
 if ((i20 | 0) > (i4 | 0)) {
  i3 = HEAP8[i24 + 11 >> 0] | 0;
  i1 = HEAP8[i23 + 11 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 1 + (i20 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i24 + 11 >> 0] | 0;
  i1 = HEAP8[i23 + 11 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 2 | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i2 + i3 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i29 = i1;
  }
 } else {
  i19 = i10;
  i29 = 0;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i19, i15, i16, HEAP32[i25 + 4 >> 2] | 0, i18, i18 + i20 | 0, i7, i6, i12, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i23, i24, i4);
 HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i19, i21, i1, i25, i26) | 0;
 if (i29 | 0) _free(i29);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 __ZNSt3__26localeD2Ev(i27);
 if (i30 | 0) _free(i30);
 if (i31 | 0) _free(i31);
 STACKTOP = i28;
 return i1 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi(i11, i18) {
 i11 = i11 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i9 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i19 + 8 | 0;
 i15 = i19 + 4 | 0;
 i16 = i19;
 i17 = i11 + 64 | 0;
 if (!(HEAP32[i17 >> 2] | 0)) {
  i18 = -1;
  STACKTOP = i19;
  return i18 | 0;
 }
 i2 = i11 + 92 | 0;
 if (!(HEAP32[i2 >> 2] & 16)) {
  HEAP32[i11 + 8 >> 2] = 0;
  HEAP32[i11 + 12 >> 2] = 0;
  HEAP32[i11 + 16 >> 2] = 0;
  i1 = HEAP32[i11 + 52 >> 2] | 0;
  do if (i1 >>> 0 > 8) if (!(HEAP8[i11 + 98 >> 0] | 0)) {
   i5 = HEAP32[i11 + 56 >> 2] | 0;
   i6 = i5 + ((HEAP32[i11 + 60 >> 2] | 0) + -1) | 0;
   HEAP32[i11 + 24 >> 2] = i5;
   i4 = i11 + 20 | 0;
   HEAP32[i4 >> 2] = i5;
   i1 = i11 + 28 | 0;
   HEAP32[i1 >> 2] = i6;
   i3 = i5;
   break;
  } else {
   i5 = HEAP32[i11 + 32 >> 2] | 0;
   i6 = i5 + (i1 + -1) | 0;
   HEAP32[i11 + 24 >> 2] = i5;
   i4 = i11 + 20 | 0;
   HEAP32[i4 >> 2] = i5;
   i1 = i11 + 28 | 0;
   HEAP32[i1 >> 2] = i6;
   i3 = i5;
   break;
  } else {
   HEAP32[i11 + 24 >> 2] = 0;
   i4 = i11 + 20 | 0;
   HEAP32[i4 >> 2] = 0;
   i1 = i11 + 28 | 0;
   HEAP32[i1 >> 2] = 0;
   i3 = 0;
   i6 = 0;
   i5 = 0;
  } while (0);
  HEAP32[i2 >> 2] = 16;
  i14 = i4;
  i7 = i1;
  i13 = i1;
  i12 = i4;
 } else {
  i12 = i11 + 20 | 0;
  i3 = HEAP32[i12 >> 2] | 0;
  i6 = i11 + 28 | 0;
  i14 = i12;
  i7 = i6;
  i13 = i6;
  i5 = i3;
  i6 = HEAP32[i6 >> 2] | 0;
 }
 i10 = (i18 | 0) == -1;
 i1 = i11 + 24 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i10) {
  if (!i2) {
   HEAP32[i1 >> 2] = i8;
   HEAP32[i12 >> 2] = i8;
   HEAP32[i7 >> 2] = i8 + 1;
   i2 = i8;
  }
  HEAP8[i2 >> 0] = i18;
  i2 = (HEAP32[i1 >> 2] | 0) + 1 | 0;
  HEAP32[i1 >> 2] = i2;
  i3 = HEAP32[i12 >> 2] | 0;
 }
 L21 : do if ((i2 | 0) == (i3 | 0)) i9 = 33; else {
  do if (!(HEAP8[i11 + 98 >> 0] | 0)) {
   i7 = i11 + 32 | 0;
   HEAP32[i15 >> 2] = HEAP32[i7 >> 2];
   i8 = i11 + 68 | 0;
   i9 = i11 + 72 | 0;
   i4 = i11 + 52 | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   if (!i2) {
    i19 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev(i19);
    ___cxa_throw(i19 | 0, 7928, 105);
   }
   while (1) {
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, i9, HEAP32[i12 >> 2] | 0, HEAP32[i1 >> 2] | 0, i16, i3, i3 + (HEAP32[i4 >> 2] | 0) | 0, i15) | 0;
    i3 = HEAP32[i12 >> 2] | 0;
    if ((HEAP32[i16 >> 2] | 0) == (i3 | 0)) {
     i9 = 31;
     break;
    }
    if ((i2 | 0) == 3) {
     i9 = 23;
     break;
    }
    if (i2 >>> 0 >= 2) {
     i9 = 31;
     break;
    }
    i3 = HEAP32[i7 >> 2] | 0;
    i11 = (HEAP32[i15 >> 2] | 0) - i3 | 0;
    if ((_fwrite(i3, 1, i11, HEAP32[i17 >> 2] | 0) | 0) != (i11 | 0)) {
     i9 = 31;
     break;
    }
    if ((i2 | 0) != 1) {
     i9 = 29;
     break;
    }
    i2 = HEAP32[i1 >> 2] | 0;
    HEAP32[i14 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i13 >> 2] = i2;
    HEAP32[i1 >> 2] = i2;
    i2 = HEAP32[i8 >> 2] | 0;
    if (!i2) {
     i9 = 20;
     break;
    }
   }
   if ((i9 | 0) == 20) {
    i19 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev(i19);
    ___cxa_throw(i19 | 0, 7928, 105);
   } else if ((i9 | 0) == 23) {
    i16 = (HEAP32[i1 >> 2] | 0) - i3 | 0;
    if ((_fwrite(i3, 1, i16, HEAP32[i17 >> 2] | 0) | 0) == (i16 | 0)) i9 = 30; else i9 = 31;
   } else if ((i9 | 0) == 29) i9 = 30;
   if ((i9 | 0) == 30) break; else if ((i9 | 0) == 31) {
    i1 = -1;
    break L21;
   }
  } else {
   i16 = i2 - i3 | 0;
   if ((_fwrite(i3, 1, i16, HEAP32[i17 >> 2] | 0) | 0) != (i16 | 0)) {
    i1 = -1;
    break L21;
   }
  } while (0);
  HEAP32[i1 >> 2] = i5;
  HEAP32[i14 >> 2] = i5;
  HEAP32[i13 >> 2] = i6;
  i9 = 33;
 } while (0);
 if ((i9 | 0) == 33) i1 = i10 ? 0 : i18;
 i18 = i1;
 STACKTOP = i19;
 return i18 | 0;
}

function _try_realloc_chunk(i12, i9) {
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i12 + 4 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i1 = i11 & -8;
 i6 = i12 + i1 | 0;
 if (!(i11 & 3)) {
  if (i9 >>> 0 < 256) {
   i12 = 0;
   return i12 | 0;
  }
  if (i1 >>> 0 >= (i9 + 4 | 0) >>> 0) if ((i1 - i9 | 0) >>> 0 <= HEAP32[5215] << 1 >>> 0) return i12 | 0;
  i12 = 0;
  return i12 | 0;
 }
 if (i1 >>> 0 >= i9 >>> 0) {
  i1 = i1 - i9 | 0;
  if (i1 >>> 0 <= 15) return i12 | 0;
  i8 = i12 + i9 | 0;
  HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
  HEAP32[i8 + 4 >> 2] = i1 | 3;
  i11 = i6 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i8, i1);
  return i12 | 0;
 }
 if ((HEAP32[5101] | 0) == (i6 | 0)) {
  i8 = (HEAP32[5098] | 0) + i1 | 0;
  i1 = i8 - i9 | 0;
  i2 = i12 + i9 | 0;
  if (i8 >>> 0 <= i9 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
  HEAP32[i2 + 4 >> 2] = i1 | 1;
  HEAP32[5101] = i2;
  HEAP32[5098] = i1;
  return i12 | 0;
 }
 if ((HEAP32[5100] | 0) == (i6 | 0)) {
  i2 = (HEAP32[5097] | 0) + i1 | 0;
  if (i2 >>> 0 < i9 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  i1 = i2 - i9 | 0;
  if (i1 >>> 0 > 15) {
   i8 = i12 + i9 | 0;
   i2 = i12 + i2 | 0;
   HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
   HEAP32[i8 + 4 >> 2] = i1 | 1;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i8;
  } else {
   HEAP32[i10 >> 2] = i11 & 1 | i2 | 2;
   i2 = i12 + i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[5097] = i1;
  HEAP32[5100] = i2;
  return i12 | 0;
 }
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 & 2 | 0) {
  i12 = 0;
  return i12 | 0;
 }
 i7 = (i2 & -8) + i1 | 0;
 if (i7 >>> 0 < i9 >>> 0) {
  i12 = 0;
  return i12 | 0;
 }
 i8 = i7 - i9 | 0;
 i3 = i2 >>> 3;
 do if (i2 >>> 0 < 256) {
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP32[5095] = HEAP32[5095] & ~(1 << i3);
   break;
  } else {
   HEAP32[i2 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i2;
   break;
  }
 } else {
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i2 = i6 + 16 | 0;
   i3 = i2 + 4 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    }
   } else i2 = i3;
   while (1) {
    i4 = i1 + 20 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i4 = i1 + 16 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) break; else {
      i1 = i3;
      i2 = i4;
     }
    } else {
     i1 = i3;
     i2 = i4;
    }
   }
   HEAP32[i2 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (i5 | 0) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 20684 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[5096] = HEAP32[5096] & ~(1 << i1);
     break;
    }
   } else {
    i4 = i5 + 16 | 0;
    HEAP32[((HEAP32[i4 >> 2] | 0) == (i6 | 0) ? i4 : i5 + 20 | 0) >> 2] = i3;
    if (!i3) break;
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i1 = i6 + 16 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) {
    HEAP32[i3 + 16 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
  }
 } while (0);
 if (i8 >>> 0 < 16) {
  HEAP32[i10 >> 2] = i11 & 1 | i7 | 2;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  return i12 | 0;
 } else {
  i6 = i12 + i9 | 0;
  HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
  HEAP32[i6 + 4 >> 2] = i8 | 3;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i6, i8);
  return i12 | 0;
 }
 return 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i14 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = i18 + 4 | 0;
 i13 = i18;
 i10 = i12 + 64 | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  i17 = -1;
  STACKTOP = i18;
  return i17 | 0;
 }
 i1 = i12 + 92 | 0;
 if (!(HEAP32[i1 >> 2] & 8)) {
  HEAP32[i12 + 24 >> 2] = 0;
  HEAP32[i12 + 20 >> 2] = 0;
  HEAP32[i12 + 28 >> 2] = 0;
  i15 = (HEAP8[i12 + 98 >> 0] | 0) == 0;
  i16 = HEAP32[(i15 ? i12 + 56 | 0 : i12 + 32 | 0) >> 2] | 0;
  i15 = i16 + (HEAP32[(i15 ? i12 + 60 | 0 : i12 + 52 | 0) >> 2] | 0) | 0;
  HEAP32[i12 + 8 >> 2] = i16;
  i16 = i12 + 12 | 0;
  HEAP32[i16 >> 2] = i15;
  HEAP32[i12 + 16 >> 2] = i15;
  HEAP32[i1 >> 2] = 8;
  i2 = 1;
  i1 = i15;
 } else {
  i1 = i12 + 12 | 0;
  i2 = 0;
  i16 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 if (!i1) {
  i3 = i17 + 1 | 0;
  HEAP32[i12 + 8 >> 2] = i17;
  HEAP32[i16 >> 2] = i3;
  HEAP32[i12 + 16 >> 2] = i3;
 } else i3 = i1;
 i15 = i12 + 16 | 0;
 if (i2) {
  i1 = HEAP32[i15 >> 2] | 0;
  i11 = 0;
 } else {
  i1 = HEAP32[i15 >> 2] | 0;
  i11 = (i1 - (HEAP32[i12 + 8 >> 2] | 0) | 0) / 2 | 0;
  i11 = i11 >>> 0 < 4 ? i11 : 4;
 }
 do if ((i3 | 0) == (i1 | 0)) {
  i1 = i12 + 8 | 0;
  _memmove(HEAP32[i1 >> 2] | 0, i3 + (0 - i11) | 0, i11 | 0) | 0;
  if (HEAP8[i12 + 98 >> 0] | 0) {
   i2 = HEAP32[i1 >> 2] | 0;
   i2 = _fread(i2 + i11 | 0, 1, (HEAP32[i15 >> 2] | 0) - i11 - i2 | 0, HEAP32[i10 >> 2] | 0) | 0;
   if (!i2) {
    i2 = -1;
    break;
   }
   i14 = (HEAP32[i1 >> 2] | 0) + i11 | 0;
   HEAP32[i16 >> 2] = i14;
   HEAP32[i15 >> 2] = i14 + i2;
   i2 = HEAPU8[i14 >> 0] | 0;
   break;
  }
  i8 = i12 + 40 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  i9 = i12 + 36 | 0;
  i2 = HEAP32[i9 >> 2] | 0;
  i4 = i7;
  i3 = i2;
  if ((i7 | 0) == (i2 | 0)) {
   i6 = i12 + 32 | 0;
   i7 = i8;
   i2 = i4;
  } else {
   i6 = i12 + 32 | 0;
   _memmove(HEAP32[i6 >> 2] | 0, i2 | 0, i4 - i3 | 0) | 0;
   i7 = i8;
   i3 = HEAP32[i9 >> 2] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  i4 = HEAP32[i6 >> 2] | 0;
  i3 = i4 + (i2 - i3) | 0;
  HEAP32[i9 >> 2] = i3;
  if ((i4 | 0) == (i12 + 44 | 0)) i2 = 8; else i2 = HEAP32[i12 + 52 >> 2] | 0;
  i19 = i4 + i2 | 0;
  HEAP32[i8 >> 2] = i19;
  i4 = i12 + 60 | 0;
  i2 = (HEAP32[i4 >> 2] | 0) - i11 | 0;
  i19 = i19 - i3 | 0;
  i5 = i12 + 72 | 0;
  i22 = i5;
  i21 = HEAP32[i22 + 4 >> 2] | 0;
  i20 = i12 + 80 | 0;
  HEAP32[i20 >> 2] = HEAP32[i22 >> 2];
  HEAP32[i20 + 4 >> 2] = i21;
  i3 = _fread(i3, 1, i19 >>> 0 < i2 >>> 0 ? i19 : i2, HEAP32[i10 >> 2] | 0) | 0;
  if (!i3) i2 = -1; else {
   i2 = HEAP32[i12 + 68 >> 2] | 0;
   if (!i2) {
    i22 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev(i22);
    ___cxa_throw(i22 | 0, 7928, 105);
   }
   i21 = (HEAP32[i9 >> 2] | 0) + i3 | 0;
   HEAP32[i8 >> 2] = i21;
   i22 = HEAP32[i1 >> 2] | 0;
   if ((FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 15](i2, i5, HEAP32[i6 >> 2] | 0, i21, i9, i22 + i11 | 0, i22 + (HEAP32[i4 >> 2] | 0) | 0, i13) | 0) == 3) {
    i2 = HEAP32[i6 >> 2] | 0;
    i14 = HEAP32[i7 >> 2] | 0;
    HEAP32[i1 >> 2] = i2;
    HEAP32[i16 >> 2] = i2;
    HEAP32[i15 >> 2] = i14;
    i14 = 26;
   } else {
    i3 = HEAP32[i13 >> 2] | 0;
    i2 = (HEAP32[i1 >> 2] | 0) + i11 | 0;
    if ((i3 | 0) == (i2 | 0)) i2 = -1; else {
     HEAP32[i16 >> 2] = i2;
     HEAP32[i15 >> 2] = i3;
     i14 = 26;
    }
   }
   if ((i14 | 0) == 26) i2 = HEAPU8[i2 >> 0] | 0;
  }
 } else {
  i2 = HEAPU8[i3 >> 0] | 0;
  i1 = i12 + 8 | 0;
 } while (0);
 if ((HEAP32[i1 >> 2] | 0) == (i17 | 0)) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i15 >> 2] = 0;
 }
 i22 = i2;
 STACKTOP = i18;
 return i22 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i14, i15, i6, i13) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i14 + 8 >> 2] | 0, i13) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i14, i15, i6); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i14 >> 2] | 0, i13) | 0)) {
   i12 = HEAP32[i2 + 12 >> 2] | 0;
   i5 = i2 + 16 + (i12 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2 + 16 | 0, i14, i15, i6, i13);
   i1 = i2 + 24 | 0;
   if ((i12 | 0) <= 1) break;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   if (!(i2 & 2)) {
    i4 = i14 + 36 | 0;
    if ((HEAP32[i4 >> 2] | 0) != 1) {
     if (!(i2 & 1)) {
      i2 = i14 + 54 | 0;
      while (1) {
       if (HEAP8[i2 >> 0] | 0) break L1;
       if ((HEAP32[i4 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i14, i15, i6, i13);
       i1 = i1 + 8 | 0;
       if (i1 >>> 0 >= i5 >>> 0) break L1;
      }
     }
     i2 = i14 + 24 | 0;
     i3 = i14 + 54 | 0;
     while (1) {
      if (HEAP8[i3 >> 0] | 0) break L1;
      if ((HEAP32[i4 >> 2] | 0) == 1) if ((HEAP32[i2 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i14, i15, i6, i13);
      i1 = i1 + 8 | 0;
      if (i1 >>> 0 >= i5 >>> 0) break L1;
     }
    }
   }
   i2 = i14 + 54 | 0;
   while (1) {
    if (HEAP8[i2 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i14, i15, i6, i13);
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i5 >>> 0) break L1;
   }
  }
  if ((HEAP32[i14 + 16 >> 2] | 0) != (i15 | 0)) {
   i11 = i14 + 20 | 0;
   if ((HEAP32[i11 >> 2] | 0) != (i15 | 0)) {
    HEAP32[i14 + 32 >> 2] = i6;
    i12 = i14 + 44 | 0;
    if ((HEAP32[i12 >> 2] | 0) == 4) break;
    i5 = i2 + 16 + (HEAP32[i2 + 12 >> 2] << 3) | 0;
    i6 = i14 + 52 | 0;
    i7 = i14 + 53 | 0;
    i9 = i14 + 54 | 0;
    i8 = i2 + 8 | 0;
    i10 = i14 + 24 | 0;
    i1 = 0;
    i3 = i2 + 16 | 0;
    i4 = 0;
    L32 : while (1) {
     if (i3 >>> 0 >= i5 >>> 0) {
      i2 = 18;
      break;
     }
     HEAP8[i6 >> 0] = 0;
     HEAP8[i7 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i3, i14, i15, i15, 1, i13);
     if (HEAP8[i9 >> 0] | 0) {
      i2 = 18;
      break;
     }
     do if (!(HEAP8[i7 >> 0] | 0)) i2 = i4; else {
      if (!(HEAP8[i6 >> 0] | 0)) if (!(HEAP32[i8 >> 2] & 1)) {
       i1 = 1;
       i2 = 18;
       break L32;
      } else {
       i1 = 1;
       i2 = i4;
       break;
      }
      if ((HEAP32[i10 >> 2] | 0) == 1) {
       i2 = 23;
       break L32;
      }
      if (!(HEAP32[i8 >> 2] & 2)) {
       i2 = 23;
       break L32;
      } else {
       i1 = 1;
       i2 = 1;
      }
     } while (0);
     i3 = i3 + 8 | 0;
     i4 = i2;
    }
    do if ((i2 | 0) == 18) {
     if (!i4) {
      HEAP32[i11 >> 2] = i15;
      i15 = i14 + 40 | 0;
      HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
      if ((HEAP32[i14 + 36 >> 2] | 0) == 1) if ((HEAP32[i10 >> 2] | 0) == 2) {
       HEAP8[i9 >> 0] = 1;
       if (i1) {
        i2 = 23;
        break;
       } else {
        i1 = 4;
        break;
       }
      }
     }
     if (i1) i2 = 23; else i1 = 4;
    } while (0);
    if ((i2 | 0) == 23) i1 = 3;
    HEAP32[i12 >> 2] = i1;
    break;
   }
  }
  if ((i6 | 0) == 1) HEAP32[i14 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i19, i3, i23, i24, i25) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i10 = i27 + 464 | 0;
 i26 = i27 + 460 | 0;
 i15 = i27 + 468 | 0;
 i16 = i27 + 456 | 0;
 i17 = i27 + 452 | 0;
 i20 = i27 + 440 | 0;
 i21 = i27 + 428 | 0;
 i22 = i27 + 416 | 0;
 i6 = i27 + 412 | 0;
 i8 = i27;
 i11 = i27 + 408 | 0;
 i12 = i27 + 404 | 0;
 i13 = i27 + 400 | 0;
 __ZNKSt3__28ios_base6getlocEv(i26, i23);
 i14 = __ZNKSt3__26locale9use_facetERNS0_2idE(i26, 21956) | 0;
 i2 = i25 + 8 + 3 | 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i1 = i9 << 24 >> 24 < 0;
 i4 = i25 + 4 | 0;
 if (!((i1 ? HEAP32[i4 >> 2] | 0 : i9 & 255) | 0)) i9 = 0; else {
  i9 = HEAP32[(i1 ? HEAP32[i25 >> 2] | 0 : i25) >> 2] | 0;
  i9 = (i9 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] & 31](i14, 45) | 0);
 };
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i9, i26, i15, i16, i17, i20, i21, i22, i6);
 i5 = HEAP8[i2 >> 0] | 0;
 i7 = i5 << 24 >> 24 < 0;
 i5 = i7 ? HEAP32[i4 >> 2] | 0 : i5 & 255;
 i4 = HEAP32[i6 >> 2] | 0;
 if ((i5 | 0) > (i4 | 0)) {
  i3 = HEAP8[i22 + 8 + 3 >> 0] | 0;
  i1 = HEAP8[i21 + 8 + 3 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 1 + (i5 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i22 + 8 + 3 >> 0] | 0;
  i1 = HEAP8[i21 + 8 + 3 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 2 | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i2 + i3 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1 << 2) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i28 = i1;
  }
 } else {
  i18 = i8;
  i28 = 0;
 }
 i25 = i7 ? HEAP32[i25 >> 2] | 0 : i25;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i18, i11, i12, HEAP32[i23 + 4 >> 2] | 0, i25, i25 + (i5 << 2) | 0, i14, i9, i15, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i20, i21, i22, i4);
 HEAP32[i13 >> 2] = HEAP32[i19 >> 2];
 i25 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i18, i25, i1, i23, i24) | 0;
 if (i28 | 0) _free(i28);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__26localeD2Ev(i26);
 STACKTOP = i27;
 return i1 | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i19, i3, i23, i24, i25) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i10 = i27 + 156 | 0;
 i26 = i27 + 152 | 0;
 i15 = i27 + 164 | 0;
 i16 = i27 + 161 | 0;
 i17 = i27 + 160 | 0;
 i20 = i27 + 140 | 0;
 i21 = i27 + 128 | 0;
 i22 = i27 + 116 | 0;
 i6 = i27 + 112 | 0;
 i8 = i27;
 i11 = i27 + 108 | 0;
 i12 = i27 + 104 | 0;
 i13 = i27 + 100 | 0;
 __ZNKSt3__28ios_base6getlocEv(i26, i23);
 i14 = __ZNKSt3__26locale9use_facetERNS0_2idE(i26, 21924) | 0;
 i2 = i25 + 11 | 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i1 = i9 << 24 >> 24 < 0;
 i4 = i25 + 4 | 0;
 if (!((i1 ? HEAP32[i4 >> 2] | 0 : i9 & 255) | 0)) i9 = 0; else {
  i9 = HEAP8[(i1 ? HEAP32[i25 >> 2] | 0 : i25) >> 0] | 0;
  i9 = i9 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 31](i14, 45) | 0) << 24 >> 24;
 };
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i3, i9, i26, i15, i16, i17, i20, i21, i22, i6);
 i5 = HEAP8[i2 >> 0] | 0;
 i7 = i5 << 24 >> 24 < 0;
 i5 = i7 ? HEAP32[i4 >> 2] | 0 : i5 & 255;
 i4 = HEAP32[i6 >> 2] | 0;
 if ((i5 | 0) > (i4 | 0)) {
  i3 = HEAP8[i22 + 11 >> 0] | 0;
  i1 = HEAP8[i21 + 11 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 1 + (i5 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i22 + 11 >> 0] | 0;
  i1 = HEAP8[i21 + 11 >> 0] | 0;
  i1 = i1 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i1 & 255;
  i2 = i4 + 2 | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i2 + i3 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i28 = i1;
  }
 } else {
  i18 = i8;
  i28 = 0;
 }
 i25 = i7 ? HEAP32[i25 >> 2] | 0 : i25;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i18, i11, i12, HEAP32[i23 + 4 >> 2] | 0, i25, i25 + i5 | 0, i14, i9, i15, HEAP8[i16 >> 0] | 0, HEAP8[i17 >> 0] | 0, i20, i21, i22, i4);
 HEAP32[i13 >> 2] = HEAP32[i19 >> 2];
 i25 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i18, i25, i1, i23, i24) | 0;
 if (i28 | 0) _free(i28);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__26localeD2Ev(i26);
 STACKTOP = i27;
 return i1 | 0;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i6 = HEAP32[tempDoublePtr >> 2] | 0;
 i8 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i6 | 0, i8 | 0, 52) | 0;
 getTempRet0() | 0;
 i3 = i3 & 2047;
 i9 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 getTempRet0() | 0;
 i9 = i9 & 2047;
 i13 = i8 & -2147483648;
 i5 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i7 = getTempRet0() | 0;
 L1 : do if ((i5 | 0) == 0 & (i7 | 0) == 0) i14 = 3; else {
  i4 = ___DOUBLE_BITS_482(d1) | 0;
  i2 = (getTempRet0() | 0) & 2147483647;
  if ((i3 | 0) == 2047 | (i2 >>> 0 > 2146435072 | (i2 | 0) == 2146435072 & i4 >>> 0 > 0)) i14 = 3; else {
   i2 = _bitshift64Shl(i6 | 0, i8 | 0, 1) | 0;
   i4 = getTempRet0() | 0;
   if (!(i4 >>> 0 > i7 >>> 0 | (i4 | 0) == (i7 | 0) & i2 >>> 0 > i5 >>> 0)) return +((i2 | 0) == (i5 | 0) & (i4 | 0) == (i7 | 0) ? d12 * 0.0 : d12);
   if (!i3) {
    i2 = _bitshift64Shl(i6 | 0, i8 | 0, 12) | 0;
    i4 = getTempRet0() | 0;
    if ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295) {
     i3 = 0;
     do {
      i3 = i3 + -1 | 0;
      i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
      i4 = getTempRet0() | 0;
     } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295);
    } else i3 = 0;
    i6 = _bitshift64Shl(i6 | 0, i8 | 0, 1 - i3 | 0) | 0;
    i5 = getTempRet0() | 0;
   } else i5 = i8 & 1048575 | 1048576;
   if (!i9) {
    i4 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
    i7 = getTempRet0() | 0;
    if ((i7 | 0) > -1 | (i7 | 0) == -1 & i4 >>> 0 > 4294967295) {
     i2 = 0;
     do {
      i2 = i2 + -1 | 0;
      i4 = _bitshift64Shl(i4 | 0, i7 | 0, 1) | 0;
      i7 = getTempRet0() | 0;
     } while ((i7 | 0) > -1 | (i7 | 0) == -1 & i4 >>> 0 > 4294967295);
    } else i2 = 0;
    i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i2 | 0) | 0;
    i9 = i2;
    i8 = getTempRet0() | 0;
   } else i8 = i11 & 1048575 | 1048576;
   i4 = _i64Subtract(i6 | 0, i5 | 0, i10 | 0, i8 | 0) | 0;
   i2 = getTempRet0() | 0;
   i7 = (i2 | 0) > -1 | (i2 | 0) == -1 & i4 >>> 0 > 4294967295;
   L25 : do if ((i3 | 0) > (i9 | 0)) {
    while (1) {
     if (i7) {
      if ((i4 | 0) == 0 & (i2 | 0) == 0) break;
     } else {
      i4 = i6;
      i2 = i5;
     }
     i6 = _bitshift64Shl(i4 | 0, i2 | 0, 1) | 0;
     i5 = getTempRet0() | 0;
     i3 = i3 + -1 | 0;
     i4 = _i64Subtract(i6 | 0, i5 | 0, i10 | 0, i8 | 0) | 0;
     i2 = getTempRet0() | 0;
     i7 = (i2 | 0) > -1 | (i2 | 0) == -1 & i4 >>> 0 > 4294967295;
     if ((i3 | 0) <= (i9 | 0)) break L25;
    }
    d1 = d12 * 0.0;
    break L1;
   } while (0);
   if (i7) {
    if ((i4 | 0) == 0 & (i2 | 0) == 0) {
     d1 = d12 * 0.0;
     break;
    }
   } else {
    i2 = i5;
    i4 = i6;
   }
   if (i2 >>> 0 < 1048576 | (i2 | 0) == 1048576 & i4 >>> 0 < 0) do {
    i4 = _bitshift64Shl(i4 | 0, i2 | 0, 1) | 0;
    i2 = getTempRet0() | 0;
    i3 = i3 + -1 | 0;
   } while (i2 >>> 0 < 1048576 | (i2 | 0) == 1048576 & i4 >>> 0 < 0);
   if ((i3 | 0) > 0) {
    i11 = _i64Add(i4 | 0, i2 | 0, 0, -1048576) | 0;
    i2 = getTempRet0() | 0;
    i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
    i2 = i2 | (getTempRet0() | 0);
    i3 = i11 | i3;
   } else {
    i3 = _bitshift64Lshr(i4 | 0, i2 | 0, 1 - i3 | 0) | 0;
    i2 = getTempRet0() | 0;
   }
   HEAP32[tempDoublePtr >> 2] = i3;
   HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i15, i17, i2, i3, i18, i13) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i18 = i18 | 0;
 i13 = i13 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0;
 i14 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 i8 = i20 + 512 | 0;
 i11 = i20 + 552 | 0;
 i7 = i20 + 112 | 0;
 i19 = i20 + 568 | 0;
 i10 = i20 + 564 | 0;
 i16 = i20 + 560 | 0;
 i4 = i20 + 576 | 0;
 i21 = i20 + 556 | 0;
 i9 = i20;
 HEAP32[i19 >> 2] = i7;
 HEAP32[i19 + 4 >> 2] = 110;
 __ZNKSt3__28ios_base6getlocEv(i16, i3);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i16, 21956) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i21 >> 2] = HEAP32[i17 >> 2];
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i21 >> 2];
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i15, i8, i2, i16, i6, i18, i4, i1, i19, i10, i7 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 7](i1, 14652, 14662, i8) | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i2 = HEAP32[i19 >> 2] | 0;
  i1 = i6 - i2 | 0;
  if ((i1 | 0) > 392) {
   i1 = _malloc((i1 >>> 2) + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i5 = i1;
    i12 = i1;
   }
  } else {
   i5 = i9;
   i12 = 0;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i5 = i8 + 40 | 0;
  i7 = i8;
  i4 = i2;
  i3 = i1;
  i1 = i6;
  while (1) {
   if (i4 >>> 0 >= i1 >>> 0) break;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = i8;
   while (1) {
    if ((i1 | 0) == (i5 | 0)) {
     i1 = i5;
     break;
    }
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
    i1 = i1 + 4 | 0;
   }
   HEAP8[i3 >> 0] = HEAP8[14652 + (i1 - i7 >> 2) >> 0] | 0;
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
  HEAP8[i3 >> 0] = 0;
  HEAP32[i11 >> 2] = i13;
  if ((_sscanf(i9, 14553, i11) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if (i12 | 0) _free(i12);
 }
 i1 = HEAP32[i15 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i1 = HEAP32[i17 >> 2] | 0;
 do if (!i1) i14 = 32; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i17 >> 2] = 0;
   i14 = 32;
   break;
  } else if (i3) break; else {
   i14 = 34;
   break;
  }
 } while (0);
 if ((i14 | 0) == 32) if (i3) i14 = 34;
 if ((i14 | 0) == 34) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 i2 = HEAP32[i15 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i16);
 i1 = HEAP32[i19 >> 2] | 0;
 HEAP32[i19 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i19 + 4 >> 2] & 127](i1);
 STACKTOP = i20;
 return i2 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i15, i17, i2, i3, i18, i13) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i18 = i18 | 0;
 i13 = i13 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0;
 i14 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i8 = i20 + 240 | 0;
 i11 = i20 + 216 | 0;
 i7 = i20 + 112 | 0;
 i19 = i20 + 232 | 0;
 i10 = i20 + 228 | 0;
 i16 = i20 + 224 | 0;
 i4 = i20 + 250 | 0;
 i21 = i20 + 220 | 0;
 i9 = i20;
 HEAP32[i19 >> 2] = i7;
 HEAP32[i19 + 4 >> 2] = 110;
 __ZNKSt3__28ios_base6getlocEv(i16, i3);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i16, 21924) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i21 >> 2] = HEAP32[i17 >> 2];
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i21 >> 2];
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i15, i8, i2, i16, i6, i18, i4, i1, i19, i10, i7 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 7](i1, 14542, 14552, i8) | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i2 = HEAP32[i19 >> 2] | 0;
  i1 = i6 - i2 | 0;
  if ((i1 | 0) > 98) {
   i1 = _malloc(i1 + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i5 = i1;
    i12 = i1;
   }
  } else {
   i5 = i9;
   i12 = 0;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i5 = i8 + 10 | 0;
  i7 = i8;
  i4 = i2;
  i3 = i1;
  i1 = i6;
  while (1) {
   if (i4 >>> 0 >= i1 >>> 0) break;
   i2 = HEAP8[i4 >> 0] | 0;
   i1 = i8;
   while (1) {
    if ((i1 | 0) == (i5 | 0)) {
     i1 = i5;
     break;
    }
    if ((HEAP8[i1 >> 0] | 0) == i2 << 24 >> 24) break;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i3 >> 0] = HEAP8[14542 + (i1 - i7) >> 0] | 0;
   i4 = i4 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
  HEAP8[i3 >> 0] = 0;
  HEAP32[i11 >> 2] = i13;
  if ((_sscanf(i9, 14553, i11) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if (i12 | 0) _free(i12);
 }
 i1 = HEAP32[i15 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i1 = HEAP32[i17 >> 2] | 0;
 do if (!i1) i14 = 32; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i17 >> 2] = 0;
   i14 = 32;
   break;
  } else if (i3) break; else {
   i14 = 34;
   break;
  }
 } while (0);
 if ((i14 | 0) == 32) if (i3) i14 = 34;
 if ((i14 | 0) == 34) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 i2 = HEAP32[i15 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i16);
 i1 = HEAP32[i19 >> 2] | 0;
 HEAP32[i19 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i19 + 4 >> 2] & 127](i1);
 STACKTOP = i20;
 return i2 | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i11, i12, i2, i13, i14, i15, i3) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i14 >> 2] = i2;
 if (!(i3 & 4)) i2 = i11; else {
  i1 = HEAP32[i12 >> 2] | 0;
  i2 = i11;
  if ((i2 - i1 | 0) > 2) if ((HEAP8[i1 >> 0] | 0) == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69) if ((HEAP8[i1 + 2 >> 0] | 0) == -65) HEAP32[i12 >> 2] = i1 + 3;
 }
 i10 = i13;
 L9 : while (1) {
  i5 = HEAP32[i12 >> 2] | 0;
  if (i5 >>> 0 >= i11 >>> 0) {
   i1 = 0;
   break;
  }
  i9 = HEAP32[i14 >> 2] | 0;
  if (i9 >>> 0 >= i13 >>> 0) {
   i1 = 1;
   break;
  }
  i4 = HEAP8[i5 >> 0] | 0;
  i8 = i4 & 255;
  if (i8 >>> 0 > i15 >>> 0) {
   i1 = 2;
   break;
  }
  do if (i4 << 24 >> 24 > -1) {
   HEAP16[i9 >> 1] = i4 & 255;
   i1 = i5 + 1 | 0;
  } else {
   if ((i4 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i4 & 255) < 224) {
    if ((i2 - i5 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i5 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i8 << 6 & 1984;
    if (i1 >>> 0 > i15 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i9 >> 1] = i1;
    i1 = i5 + 2 | 0;
    break;
   }
   if ((i4 & 255) < 240) {
    if ((i2 - i5 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i3 = HEAP8[i5 + 1 >> 0] | 0;
    i1 = HEAP8[i5 + 2 >> 0] | 0;
    switch (i4 << 24 >> 24) {
    case -32:
     {
      if ((i3 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if ((i3 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i3 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i3 & 63) << 6 | i8 << 12 | i1 & 63;
    if ((i1 & 65535) >>> 0 > i15 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i9 >> 1] = i1;
    i1 = i5 + 3 | 0;
    break;
   }
   if ((i4 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i5 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = HEAP8[i5 + 1 >> 0] | 0;
   i1 = HEAP8[i5 + 2 >> 0] | 0;
   i3 = HEAP8[i5 + 3 >> 0] | 0;
   switch (i4 << 24 >> 24) {
   case -16:
    {
     if ((i6 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if ((i6 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i6 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i7 = i1 & 255;
   if ((i7 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i3 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   if ((i10 - i9 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i5 = i8 & 7;
   i3 = i6 & 255;
   i4 = i7 << 6;
   i1 = i1 & 63;
   if ((i3 << 12 & 258048 | i5 << 18 | i4 & 4032 | i1) >>> 0 > i15 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP16[i9 >> 1] = i3 << 2 & 60 | i7 >>> 4 & 3 | ((i3 >>> 4 & 3 | i5 << 2) << 6) + 16320 | 55296;
   i9 = i9 + 2 | 0;
   HEAP32[i14 >> 2] = i9;
   HEAP16[i9 >> 1] = i1 | i4 & 960 | 56320;
   i1 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
  } while (0);
  HEAP32[i12 >> 2] = i1;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 2;
 }
 return i1 | 0;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i2, i11, i12, i13, i14, i10, i1) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i16;
 i9 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21956) | 0;
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21964) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 63](i15, i5);
 i7 = i15 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i15 + 4 | 0;
 if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 7](i9, i2, i12, i13) | 0;
  i1 = i13 + (i12 - i2 << 2) | 0;
  HEAP32[i10 >> 2] = i1;
 } else {
  HEAP32[i10 >> 2] = i13;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 31](i9, i1) | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i6;
    i1 = i2 + 1 | 0;
    break;
   }
  default:
   i1 = i2;
  }
  L7 : do if ((i12 - i1 | 0) > 1) if ((HEAP8[i1 >> 0] | 0) == 48) {
   i3 = i1 + 1 | 0;
   switch (HEAP8[i3 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 31](i9, 48) | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i4 + 4;
   HEAP32[i4 >> 2] = i6;
   i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 31](i9, HEAP8[i3 >> 0] | 0) | 0;
   i6 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i6 + 4;
   HEAP32[i6 >> 2] = i4;
   i1 = i1 + 2 | 0;
  } while (0);
  L12 : do if ((i1 | 0) != (i12 | 0)) {
   i3 = i12;
   i4 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L12;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 63](i5) | 0;
  i5 = i1;
  i3 = 0;
  i4 = 0;
  while (1) {
   if (i5 >>> 0 >= i12 >>> 0) break;
   i17 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i15 >> 2] | 0 : i15) + i3 >> 0] | 0;
   if (i17 << 24 >> 24 != 0 & (i4 | 0) == (i17 << 24 >> 24 | 0)) {
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 4;
    HEAP32[i4 >> 2] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 31](i9, HEAP8[i5 >> 0] | 0) | 0;
   i17 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i17 + 4;
   HEAP32[i17 >> 2] = i18;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i1 = i13 + (i1 - i2 << 2) | 0;
  i3 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   while (1) {
    i3 = i3 + -4 | 0;
    if (i1 >>> 0 >= i3 >>> 0) break;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i3 >> 2] = i18;
    i1 = i1 + 4 | 0;
   }
   i1 = HEAP32[i10 >> 2] | 0;
  }
 }
 HEAP32[i14 >> 2] = (i11 | 0) == (i12 | 0) ? i1 : i13 + (i11 - i2 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
 STACKTOP = i16;
 return;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i2, i11, i12, i13, i14, i10, i1) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i16;
 i9 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21924) | 0;
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21940) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 63](i15, i5);
 i7 = i15 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i15 + 4 | 0;
 if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2] & 7](i9, i2, i12, i13) | 0;
  i1 = i13 + (i12 - i2) | 0;
  HEAP32[i10 >> 2] = i1;
 } else {
  HEAP32[i10 >> 2] = i13;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 31](i9, i1) | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i6;
    i1 = i2 + 1 | 0;
    break;
   }
  default:
   i1 = i2;
  }
  L7 : do if ((i12 - i1 | 0) > 1) if ((HEAP8[i1 >> 0] | 0) == 48) {
   i3 = i1 + 1 | 0;
   switch (HEAP8[i3 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 31](i9, 48) | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i6;
   i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 31](i9, HEAP8[i3 >> 0] | 0) | 0;
   i6 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = i4;
   i1 = i1 + 2 | 0;
  } while (0);
  L12 : do if ((i1 | 0) != (i12 | 0)) {
   i3 = i12;
   i4 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L12;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 63](i5) | 0;
  i5 = i1;
  i3 = 0;
  i4 = 0;
  while (1) {
   if (i5 >>> 0 >= i12 >>> 0) break;
   i17 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i15 >> 2] | 0 : i15) + i3 >> 0] | 0;
   if (i17 << 24 >> 24 != 0 & (i4 | 0) == (i17 << 24 >> 24 | 0)) {
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 31](i9, HEAP8[i5 >> 0] | 0) | 0;
   i17 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i17 + 1;
   HEAP8[i17 >> 0] = i18;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i1 = i13 + (i1 - i2) | 0;
  i3 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   while (1) {
    i3 = i3 + -1 | 0;
    if (i1 >>> 0 >= i3 >>> 0) break;
    i18 = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i18;
    i1 = i1 + 1 | 0;
   }
   i1 = HEAP32[i10 >> 2] | 0;
  }
 }
 HEAP32[i14 >> 2] = (i11 | 0) == (i12 | 0) ? i1 : i13 + (i11 - i2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
 STACKTOP = i16;
 return;
}

function ___get_locale(i12, i1) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i10 = i13;
 i11 = i13 + 256 | 0;
 do if (!(HEAP8[i1 >> 0] | 0)) {
  i1 = _getenv(12598) | 0;
  if (i1 | 0) if (HEAP8[i1 >> 0] | 0) break;
  i1 = _getenv(2048 + (i12 * 12 | 0) | 0) | 0;
  if (i1 | 0) if (HEAP8[i1 >> 0] | 0) break;
  i1 = _getenv(12605) | 0;
  if (i1 | 0) if (HEAP8[i1 >> 0] | 0) break;
  i1 = 12610;
 } while (0);
 i2 = 0;
 L13 : while (1) {
  switch (HEAP8[i1 + i2 >> 0] | 0) {
  case 47:
  case 0:
   break L13;
  default:
   {}
  }
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= 15) {
   i2 = 15;
   break;
  }
 }
 i3 = HEAP8[i1 >> 0] | 0;
 if (i3 << 24 >> 24 == 46) {
  i1 = 12610;
  i9 = 15;
 } else if (!(HEAP8[i1 + i2 >> 0] | 0)) if (i3 << 24 >> 24 == 67) i9 = 15; else {
  i8 = i1;
  i9 = 16;
 } else {
  i1 = 12610;
  i9 = 15;
 }
 if ((i9 | 0) == 15) if (!(HEAP8[i1 + 1 >> 0] | 0)) i9 = 18; else {
  i8 = i1;
  i9 = 16;
 }
 L22 : do if ((i9 | 0) == 16) if (!(_strcmp(i8, 12610) | 0)) {
  i1 = i8;
  i9 = 18;
 } else if (!(_strcmp(i8, 12618) | 0)) {
  i1 = i8;
  i9 = 18;
 } else {
  i1 = HEAP32[5091] | 0;
  if (i1 | 0) do {
   if (!(_strcmp(i8, i1 + 8 | 0) | 0)) break L22;
   i1 = HEAP32[i1 + 24 >> 2] | 0;
  } while ((i1 | 0) != 0);
  ___lock(20368);
  i1 = HEAP32[5091] | 0;
  L32 : do if (i1 | 0) {
   while (1) {
    if (!(_strcmp(i8, i1 + 8 | 0) | 0)) break;
    i1 = HEAP32[i1 + 24 >> 2] | 0;
    if (!i1) break L32;
   }
   ___unlock(20368);
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[5073] | 0)) {
   i1 = _getenv(12624) | 0;
   if (!i1) i9 = 41; else if (!(HEAP8[i1 >> 0] | 0)) i9 = 41; else {
    i6 = 254 - i2 | 0;
    i7 = i2 + 1 | 0;
    while (1) {
     i5 = ___strchrnul(i1, 58) | 0;
     i3 = HEAP8[i5 >> 0] | 0;
     i4 = i5 - i1 + ((i3 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if (i4 >>> 0 < i6 >>> 0) {
      _memcpy(i10 | 0, i1 | 0, i4 | 0) | 0;
      i3 = i10 + i4 | 0;
      HEAP8[i3 >> 0] = 47;
      _memcpy(i3 + 1 | 0, i8 | 0, i2 | 0) | 0;
      HEAP8[i10 + (i7 + i4) >> 0] = 0;
      i3 = ___map_file(i10 | 0, i11 | 0) | 0;
      if (i3 | 0) break;
      i1 = HEAP8[i5 >> 0] | 0;
     } else i1 = i3;
     i1 = i5 + (i1 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[i1 >> 0] | 0)) {
      i9 = 41;
      break L39;
     }
    }
    i1 = _malloc(28) | 0;
    if (!i1) {
     ___munmap(i3, HEAP32[i11 >> 2] | 0) | 0;
     i9 = 41;
     break;
    } else {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i1 + 4 >> 2] = HEAP32[i11 >> 2];
     i11 = i1 + 8 | 0;
     _memcpy(i11 | 0, i8 | 0, i2 | 0) | 0;
     HEAP8[i11 + i2 >> 0] = 0;
     HEAP32[i1 + 24 >> 2] = HEAP32[5091];
     HEAP32[5091] = i1;
     break;
    }
   }
  } else i9 = 41; while (0);
  if ((i9 | 0) == 41) {
   i1 = _malloc(28) | 0;
   if (i1) {
    HEAP32[i1 >> 2] = HEAP32[2039];
    HEAP32[i1 + 4 >> 2] = HEAP32[2040];
    i11 = i1 + 8 | 0;
    _memcpy(i11 | 0, i8 | 0, i2 | 0) | 0;
    HEAP8[i11 + i2 >> 0] = 0;
    HEAP32[i1 + 24 >> 2] = HEAP32[5091];
    HEAP32[5091] = i1;
   }
  }
  ___unlock(20368);
  i1 = (i12 | 0) == 0 & (i1 | 0) == 0 ? 8156 : i1;
 } while (0);
 do if ((i9 | 0) == 18) {
  if (!i12) if ((HEAP8[i1 + 1 >> 0] | 0) == 46) {
   i1 = 8156;
   break;
  }
  i1 = 0;
 } while (0);
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i12, i14, i6, i2, i15, i8) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i16 = 0, i17 = 0;
 i11 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 i3 = i17 + 424 | 0;
 i1 = i17;
 i16 = i17 + 416 | 0;
 i7 = i17 + 408 | 0;
 i13 = i17 + 400 | 0;
 i4 = i17 + 428 | 0;
 i9 = i17 + 404 | 0;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = 110;
 __ZNKSt3__28ios_base6getlocEv(i13, i2);
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i13, 21956) | 0;
 HEAP8[i4 >> 0] = 0;
 i10 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = i10;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
 i9 = i10;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i12, i3, i6, i13, i2, i15, i4, i5, i16, i7, i1 + 400 | 0) | 0) {
  i1 = i8 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i3 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i3);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP32[i3 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i3);
   HEAP8[i1 >> 0] = 0;
  }
  if (HEAP8[i4 >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i8, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 31](i5, 45) | 0);
  i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 31](i5, 48) | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = i2 + -4 | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i3 >>> 0) break;
   if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) break;
   i1 = i1 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_(i8, i1, i2) | 0;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i12 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i10) i11 = 25; else {
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i9) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i14 >> 2] = 0;
   i11 = 25;
   break;
  } else if (i2) break; else {
   i11 = 27;
   break;
  }
 } while (0);
 if ((i11 | 0) == 25) if (i2) i11 = 27;
 if ((i11 | 0) == 27) HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
 i2 = HEAP32[i12 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i13);
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i16 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i16 + 4 >> 2] & 127](i1);
 STACKTOP = i17;
 return i2 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i12, i14, i6, i2, i15, i8) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i16 = 0, i17 = 0;
 i11 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i17 + 120 | 0;
 i1 = i17;
 i16 = i17 + 112 | 0;
 i7 = i17 + 108 | 0;
 i13 = i17 + 100 | 0;
 i4 = i17 + 124 | 0;
 i9 = i17 + 104 | 0;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = 110;
 __ZNKSt3__28ios_base6getlocEv(i13, i2);
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i13, 21924) | 0;
 HEAP8[i4 >> 0] = 0;
 i10 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = i10;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
 i9 = i10;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i12, i3, i6, i13, i2, i15, i4, i5, i16, i7, i1 + 100 | 0) | 0) {
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP8[i3 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i3);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP8[i3 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i3);
   HEAP8[i1 >> 0] = 0;
  }
  if (HEAP8[i4 >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, 45) | 0);
  i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, 48) | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = i2 + -1 | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i3 >>> 0) break;
   if ((HEAP8[i1 >> 0] | 0) != i4 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_(i8, i1, i2) | 0;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i12 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i10) i11 = 25; else {
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 63](i9) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i14 >> 2] = 0;
   i11 = 25;
   break;
  } else if (i2) break; else {
   i11 = 27;
   break;
  }
 } while (0);
 if ((i11 | 0) == 25) if (i2) i11 = 27;
 if ((i11 | 0) == 27) HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
 i2 = HEAP32[i12 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i13);
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i16 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i16 + 4 >> 2] & 127](i1);
 STACKTOP = i17;
 return i2 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i8, i9, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (!i2) i6 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  } else if (i3) {
   i5 = i2;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  }
 } while (0);
 if ((i6 | 0) == 14) if (i3) i6 = 16; else {
  i5 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 6; else if ((i6 | 0) == 17) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, i1, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
   HEAP32[i2 >> 2] = i3 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  do if (!i1) i2 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i7 >> 2] = 0;
    i2 = 1;
    break;
   } else {
    i2 = (HEAP32[i7 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!i5) i6 = 38; else {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i8 >> 2] = 0;
    i6 = 38;
    break;
   } else if (i2) break L22; else break;
  } while (0);
  if ((i6 | 0) == 38) if (!i2) break;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i8, i9, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (!i2) i6 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  } else if (i3) {
   i5 = i2;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  }
 } while (0);
 if ((i6 | 0) == 14) if (i3) i6 = 16; else {
  i5 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 6; else if ((i6 | 0) == 17) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 31](i4, i1 & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
   HEAP32[i2 >> 2] = i3 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  do if (!i1) i2 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i7 >> 2] = 0;
    i2 = 1;
    break;
   } else {
    i2 = (HEAP32[i7 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!i5) i6 = 38; else {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i8 >> 2] = 0;
    i6 = 38;
    break;
   } else if (i2) break L22; else break;
  } while (0);
  if ((i6 | 0) == 38) if (!i2) break;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 2;
 } while (0);
 return;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i7, i8, i3, i2, i9, i10, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i3;
 if (!(i4 & 2)) i5 = 4; else if ((i2 - i3 | 0) < 3) i1 = 1; else {
  HEAP32[i9 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = -17;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 }
 L4 : do if ((i5 | 0) == 4) {
  i6 = i7;
  i1 = HEAP32[i8 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i7 >>> 0) {
    i1 = 0;
    break L4;
   }
   i3 = HEAP16[i1 >> 1] | 0;
   i5 = i3 & 65535;
   if (i5 >>> 0 > i10 >>> 0) {
    i1 = 2;
    break L4;
   }
   do if ((i3 & 65535) < 128) {
    i1 = HEAP32[i9 >> 2] | 0;
    if ((i2 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i9 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if ((i3 & 65535) < 2048) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i2 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 6 | 192;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) < 55296) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) >= 56320) {
     if ((i3 & 65535) < 57344) {
      i1 = 2;
      break L4;
     }
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i6 - i1 | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i1 = i1 + 2 | 0;
    i3 = HEAPU16[i1 >> 1] | 0;
    if ((i3 & 64512 | 0) != 56320) {
     i1 = 2;
     break L4;
    }
    if ((i2 - (HEAP32[i9 >> 2] | 0) | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i4 = i5 & 960;
    if (((i4 << 10) + 65536 | i5 << 10 & 64512 | i3 & 1023) >>> 0 > i10 >>> 0) {
     i1 = 2;
     break L4;
    }
    HEAP32[i8 >> 2] = i1;
    i1 = (i4 >>> 6) + 1 | 0;
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i1 >>> 2 | 240;
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 >>> 2 & 15 | i1 << 4 & 48 | 128;
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 << 4 & 48 | i3 >>> 6 & 15 | 128;
    i5 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i3 & 63 | 128;
   } while (0);
   i1 = (HEAP32[i8 >> 2] | 0) + 2 | 0;
   HEAP32[i8 >> 2] = i1;
  }
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i5, i7, i8, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i6 = 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i5 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i7 >> 2] | 0;
  do if (!i2) i6 = 15; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i7 >> 2] = 0;
    i6 = 15;
    break;
   } else if (i3) {
    i3 = i2;
    break;
   } else {
    i3 = i2;
    break L1;
   }
  } while (0);
  if ((i6 | 0) == 15) {
   i6 = 0;
   if (i3) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 31](i4, 8192, i1) | 0)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
   HEAP32[i2 >> 2] = i3 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i3) i6 = 38; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i6 = 38;
   break;
  } else if (i2) break; else {
   i6 = 40;
   break;
  }
 } while (0);
 if ((i6 | 0) == 38) if (i2) i6 = 40;
 if ((i6 | 0) == 40) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i1, i5, i7, i8, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0;
 i6 = 0;
 i4 = i2 + 8 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (!i1) i2 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i5 >> 2] = 0;
    i2 = 1;
    break;
   } else {
    i2 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i3 = HEAP32[i7 >> 2] | 0;
  do if (!i3) i6 = 15; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i7 >> 2] = 0;
    i6 = 15;
    break;
   } else if (i2) break; else break L1;
  } while (0);
  if ((i6 | 0) == 15) {
   i6 = 0;
   if (i2) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if ((i1 & 255) << 24 >> 24 <= -1) break;
  if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i1) | 0; else {
   HEAP32[i2 >> 2] = i3 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i3) i6 = 39; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i6 = 39;
   break;
  } else if (i2) break; else {
   i6 = 41;
   break;
  }
 } while (0);
 if ((i6 | 0) == 39) if (i2) i6 = 41;
 if ((i6 | 0) == 41) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i11;
 i10 = i7 + 64 | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i8 = i7 + 68 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 if (!i2) {
  i11 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i11);
  ___cxa_throw(i11 | 0, 7928, 105);
 }
 i6 = i7 + 92 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (!(i1 & 16)) {
  if (i1 & 8 | 0) {
   i3 = i7 + 80 | 0;
   i4 = HEAP32[i3 + 4 >> 2] | 0;
   i5 = i9;
   HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i5 + 4 >> 2] = i4;
   do if (!(HEAP8[i7 + 98 >> 0] | 0)) {
    i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2) | 0;
    i5 = i7 + 36 | 0;
    i4 = HEAP32[i5 >> 2] | 0;
    i1 = (HEAP32[i7 + 40 >> 2] | 0) - i4 | 0;
    if ((i3 | 0) > 0) {
     i2 = 0;
     i1 = (Math_imul((HEAP32[i7 + 16 >> 2] | 0) - (HEAP32[i7 + 12 >> 2] | 0) | 0, i3) | 0) + i1 | 0;
     break;
    }
    i2 = HEAP32[i7 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i2 = 0; else {
     i3 = HEAP32[i8 >> 2] | 0;
     i8 = i7 + 32 | 0;
     i4 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 31](i3, i9, HEAP32[i8 >> 2] | 0, i4, i2 - (HEAP32[i7 + 8 >> 2] | 0) | 0) | 0;
     i2 = 1;
     i1 = i1 - i4 + (HEAP32[i5 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0;
    }
   } else {
    i2 = 0;
    i1 = (HEAP32[i7 + 16 >> 2] | 0) - (HEAP32[i7 + 12 >> 2] | 0) | 0;
   } while (0);
   if (___fseeko(HEAP32[i10 >> 2] | 0, 0 - i1 | 0, 1) | 0) {
    i10 = -1;
    STACKTOP = i11;
    return i10 | 0;
   }
   if (i2) {
    i8 = i9;
    i9 = HEAP32[i8 + 4 >> 2] | 0;
    i10 = i7 + 72 | 0;
    HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i10 + 4 >> 2] = i9;
   }
   i10 = HEAP32[i7 + 32 >> 2] | 0;
   HEAP32[i7 + 40 >> 2] = i10;
   HEAP32[i7 + 36 >> 2] = i10;
   HEAP32[i7 + 8 >> 2] = 0;
   HEAP32[i7 + 12 >> 2] = 0;
   HEAP32[i7 + 16 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
  }
 } else {
  if ((HEAP32[i7 + 24 >> 2] | 0) != (HEAP32[i7 + 20 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 31](i7, -1) | 0) == -1) {
   i10 = -1;
   STACKTOP = i11;
   return i10 | 0;
  }
  i3 = i7 + 72 | 0;
  i4 = i7 + 32 | 0;
  i1 = i7 + 52 | 0;
  L30 : while (1) {
   i6 = HEAP32[i8 >> 2] | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] & 31](i6, i3, i2, i2 + (HEAP32[i1 >> 2] | 0) | 0, i9) | 0;
   i6 = HEAP32[i4 >> 2] | 0;
   i7 = (HEAP32[i9 >> 2] | 0) - i6 | 0;
   if ((_fwrite(i6, 1, i7, HEAP32[i10 >> 2] | 0) | 0) != (i7 | 0)) {
    i1 = -1;
    i2 = 24;
    break;
   }
   switch (i2 | 0) {
   case 1:
    break;
   case 2:
    {
     i1 = -1;
     i2 = 24;
     break L30;
    }
   default:
    {
     i2 = 10;
     break L30;
    }
   }
  }
  if ((i2 | 0) == 10) {
   if (!(_fflush(HEAP32[i10 >> 2] | 0) | 0)) break; else i1 = -1;
   STACKTOP = i11;
   return i1 | 0;
  } else if ((i2 | 0) == 24) {
   STACKTOP = i11;
   return i1 | 0;
  }
 } while (0);
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i2, i12, i13, i14, i3) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 if (!(i3 & 4)) i2 = i10; else {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((i2 - i1 | 0) > 2) if ((HEAP8[i1 >> 0] | 0) == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69) if ((HEAP8[i1 + 2 >> 0] | 0) == -65) HEAP32[i11 >> 2] = i1 + 3;
 }
 L9 : while (1) {
  i8 = HEAP32[i11 >> 2] | 0;
  if (i8 >>> 0 >= i10 >>> 0) {
   i1 = 0;
   break;
  }
  i9 = HEAP32[i13 >> 2] | 0;
  if (i9 >>> 0 >= i12 >>> 0) {
   i1 = 1;
   break;
  }
  i6 = HEAP8[i8 >> 0] | 0;
  i1 = i6 & 255;
  do if (i6 << 24 >> 24 > -1) if (i1 >>> 0 > i14 >>> 0) {
   i1 = 2;
   break L9;
  } else i3 = 1; else {
   if ((i6 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i6 & 255) < 224) {
    if ((i2 - i8 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i3 = HEAPU8[i8 + 1 >> 0] | 0;
    if ((i3 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i3 & 63 | i1 << 6 & 1984;
    if (i1 >>> 0 > i14 >>> 0) {
     i1 = 2;
     break L9;
    } else {
     i3 = 2;
     break;
    }
   }
   if ((i6 & 255) < 240) {
    if ((i2 - i8 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i4 = HEAP8[i8 + 1 >> 0] | 0;
    i3 = HEAP8[i8 + 2 >> 0] | 0;
    switch (i6 << 24 >> 24) {
    case -32:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i4 & 63) << 6 | i1 << 12 & 61440 | i3 & 63;
    if (i1 >>> 0 > i14 >>> 0) {
     i1 = 2;
     break L9;
    } else {
     i3 = 3;
     break;
    }
   }
   if ((i6 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i8 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i7 = HEAP8[i8 + 1 >> 0] | 0;
   i3 = HEAP8[i8 + 2 >> 0] | 0;
   i5 = HEAP8[i8 + 3 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case -16:
    {
     if ((i7 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if ((i7 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i7 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i4 = i3 & 255;
   if ((i4 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i3 = i5 & 255;
   if ((i3 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = (i7 & 63) << 12 | i1 << 18 & 1835008 | i4 << 6 & 4032 | i3 & 63;
   if (i1 >>> 0 > i14 >>> 0) {
    i1 = 2;
    break L9;
   } else i3 = 4;
  } while (0);
  HEAP32[i9 >> 2] = i1;
  HEAP32[i11 >> 2] = i8 + i3;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 }
 return i1 | 0;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i14, i15, i3) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0;
 i13 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i16;
 HEAP8[i14 >> 0] = 0;
 i1 = i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) | 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i2) {
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  if (i1 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  do if (!i3) {
   i1 = i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) | 0;
   if (HEAP32[i1 + 4 >> 2] & 4096 | 0) {
    __ZNKSt3__28ios_base6getlocEv(i4, i1);
    i7 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 21924) | 0;
    __ZNSt3__26localeD2Ev(i4);
    i2 = HEAP32[i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
    i7 = i7 + 8 | 0;
    i8 = i2;
    i9 = (i2 | 0) == 0;
    i10 = i8 + 12 | 0;
    i11 = i8 + 16 | 0;
    i12 = i2;
    while (1) {
     if (i9) {
      i3 = 0;
      i2 = 0;
      break;
     }
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i11 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
     i6 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
     i3 = i6 ? 0 : i2;
     if (i6) {
      i3 = 0;
      i2 = 0;
      break;
     }
     i4 = i3;
     i5 = i4 + 12 | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     i6 = i4 + 16 | 0;
     if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
     if ((i1 & 255) << 24 >> 24 <= -1) {
      i13 = 21;
      break;
     }
     if (!(HEAP16[(HEAP32[i7 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
      i13 = 21;
      break;
     }
     i1 = HEAP32[i5 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 63](i4) | 0; else {
      HEAP32[i5 >> 2] = i1 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
     }
    }
    if (i2 | 0) {
     i1 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
    }
    i13 = i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj(i13, HEAP32[i13 + 16 >> 2] | 6);
   }
  } while (0);
  HEAP8[i14 >> 0] = (HEAP32[i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] | 0) == 0 & 1;
 } else __ZNSt3__28ios_base5clearEj(i1, i2 | 4);
 STACKTOP = i16;
 return;
}

function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i18, i1, i8, i9, i10, i2) {
 i18 = i18 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i7 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i13 = i17 + 168 | 0;
 i14 = i17;
 i15 = i17 + 164 | 0;
 i16 = i17 + 160 | 0;
 i11 = i17 + 128 | 0;
 i6 = i17 + 152 | 0;
 i12 = i17 + 144 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i11 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 >> 2] = 11632;
 i4 = HEAP8[i2 + 8 + 3 >> 0] | 0;
 i5 = i4 << 24 >> 24 < 0;
 i1 = i5 ? HEAP32[i2 >> 2] | 0 : i2;
 i4 = i1 + ((i5 ? HEAP32[i2 + 4 >> 2] | 0 : i4 & 255) << 2) | 0;
 i5 = i14 + 32 | 0;
 i2 = i1;
 i1 = 0;
 while (1) {
  if (!((i1 | 0) != 2 & i2 >>> 0 < i4 >>> 0)) break;
  HEAP32[i16 >> 2] = i2;
  i3 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i13, i2, i4, i16, i14, i5, i15) | 0;
  if ((i3 | 0) == 2 ? 1 : (HEAP32[i16 >> 2] | 0) == (i2 | 0)) {
   i7 = 8;
   break;
  }
  i1 = i14;
  while (1) {
   if (i1 >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i11, HEAP8[i1 >> 0] | 0);
   i1 = i1 + 1 | 0;
  }
  i2 = HEAP32[i16 >> 2] | 0;
  i1 = i3;
 }
 if ((i7 | 0) == 8) __ZNSt3__221__throw_runtime_errorEPKc(0);
 __ZNSt3__26locale5facetD2Ev(i6);
 i3 = (HEAP8[i11 + 11 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 i2 = _catgets((i8 | 0) == -1 ? -1 : i8 << 1, i9, i10, i3) | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i18 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 >> 2] = 11680;
 i4 = i3 + (_strlen(i2) | 0) | 0;
 i5 = i4;
 i6 = i14 + 128 | 0;
 i2 = i3;
 i1 = 0;
 while (1) {
  if (!((i1 | 0) != 2 & i2 >>> 0 < i4 >>> 0)) {
   i7 = 23;
   break;
  }
  HEAP32[i16 >> 2] = i2;
  i3 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] & 15](i12, i13, i2, (i5 - i2 | 0) > 32 ? i2 + 32 | 0 : i4, i16, i14, i6, i15) | 0;
  if ((i3 | 0) == 2 ? 1 : (HEAP32[i16 >> 2] | 0) == (i2 | 0)) {
   i7 = 19;
   break;
  }
  i1 = i14;
  while (1) {
   if (i1 >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i18, HEAP32[i1 >> 2] | 0);
   i1 = i1 + 4 | 0;
  }
  i2 = HEAP32[i16 >> 2] | 0;
  i1 = i3;
 }
 if ((i7 | 0) == 19) __ZNSt3__221__throw_runtime_errorEPKc(0); else if ((i7 | 0) == 23) {
  __ZNSt3__26locale5facetD2Ev(i12);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  STACKTOP = i17;
  return;
 }
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i4, i6, i9, i7, i10, i1, i2, i8, i12, i13, i11, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 L1 : do if (i4 << 24 >> 24 == i1 << 24 >> 24) if (!(HEAP8[i6 >> 0] | 0)) i1 = -1; else {
  HEAP8[i6 >> 0] = 0;
  i9 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = 46;
  i10 = HEAP8[i8 + 11 >> 0] | 0;
  if (!((i10 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i10 & 255) | 0)) i1 = 0; else {
   i1 = HEAP32[i13 >> 2] | 0;
   if ((i1 - i12 | 0) < 160) {
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    i1 = 0;
   } else i1 = 0;
  }
 } else {
  if (i4 << 24 >> 24 == i2 << 24 >> 24) {
   i3 = HEAP8[i8 + 11 >> 0] | 0;
   if ((i3 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i3 & 255) | 0) {
    if (!(HEAP8[i6 >> 0] | 0)) {
     i1 = -1;
     break;
    }
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i1 - i12 | 0) >= 160) {
     i1 = 0;
     break;
    }
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    HEAP32[i11 >> 2] = 0;
    i1 = 0;
    break;
   }
  }
  i3 = i5 + 32 | 0;
  i2 = 0;
  while (1) {
   i1 = i5 + i2 | 0;
   if ((i2 | 0) == 32) {
    i1 = i3;
    break;
   }
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break; else i2 = i2 + 1 | 0;
  }
  i2 = i1 - i5 | 0;
  if ((i2 | 0) > 31) i1 = -1; else {
   i3 = HEAP8[6016 + i2 >> 0] | 0;
   switch (i2 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0)) if ((HEAP8[i1 + -1 >> 0] & 95) != (HEAP8[i9 >> 0] & 127)) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i9 >> 0] = 80;
     i1 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   default:
    {
     i1 = i3 & 95;
     if ((i1 | 0) == (HEAP8[i9 >> 0] | 0)) {
      HEAP8[i9 >> 0] = i1 | 128;
      if (HEAP8[i6 >> 0] | 0) {
       HEAP8[i6 >> 0] = 0;
       i9 = HEAP8[i8 + 11 >> 0] | 0;
       if ((i9 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i9 & 255) | 0) {
        i1 = HEAP32[i13 >> 2] | 0;
        if ((i1 - i12 | 0) < 160) {
         i12 = HEAP32[i11 >> 2] | 0;
         HEAP32[i13 >> 2] = i1 + 4;
         HEAP32[i1 >> 2] = i12;
        }
       }
      }
     }
     i13 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i13 + 1;
     HEAP8[i13 >> 0] = i3;
     if ((i2 | 0) > 21) {
      i1 = 0;
      break L1;
     }
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     i1 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i4, i6, i9, i7, i10, i1, i2, i8, i12, i13, i11, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 L1 : do if ((i4 | 0) == (i1 | 0)) if (!(HEAP8[i6 >> 0] | 0)) i1 = -1; else {
  HEAP8[i6 >> 0] = 0;
  i9 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = 46;
  i10 = HEAP8[i8 + 11 >> 0] | 0;
  if (!((i10 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i10 & 255) | 0)) i1 = 0; else {
   i1 = HEAP32[i13 >> 2] | 0;
   if ((i1 - i12 | 0) < 160) {
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    i1 = 0;
   } else i1 = 0;
  }
 } else {
  if ((i4 | 0) == (i2 | 0)) {
   i3 = HEAP8[i8 + 11 >> 0] | 0;
   if ((i3 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i3 & 255) | 0) {
    if (!(HEAP8[i6 >> 0] | 0)) {
     i1 = -1;
     break;
    }
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i1 - i12 | 0) >= 160) {
     i1 = 0;
     break;
    }
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    HEAP32[i11 >> 2] = 0;
    i1 = 0;
    break;
   }
  }
  i3 = i5 + 128 | 0;
  i2 = 0;
  while (1) {
   i1 = i5 + (i2 << 2) | 0;
   if ((i2 | 0) == 32) {
    i1 = i3;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) break; else i2 = i2 + 1 | 0;
  }
  i2 = i1 - i5 | 0;
  if ((i2 | 0) > 124) i1 = -1; else {
   i3 = HEAP8[6016 + (i2 >> 2) >> 0] | 0;
   i5 = i2 + -88 | 0;
   switch (i5 >>> 2 | i5 << 30 | 0) {
   case 2:
   case 3:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0)) if ((HEAP8[i1 + -1 >> 0] & 95) != (HEAP8[i9 >> 0] & 127)) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 1:
   case 0:
    {
     HEAP8[i9 >> 0] = 80;
     break;
    }
   default:
    {
     i1 = i3 & 95;
     if ((i1 | 0) == (HEAP8[i9 >> 0] | 0)) {
      HEAP8[i9 >> 0] = i1 | 128;
      if (HEAP8[i6 >> 0] | 0) {
       HEAP8[i6 >> 0] = 0;
       i9 = HEAP8[i8 + 11 >> 0] | 0;
       if ((i9 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i9 & 255) | 0) {
        i1 = HEAP32[i13 >> 2] | 0;
        if ((i1 - i12 | 0) < 160) {
         i12 = HEAP32[i11 >> 2] | 0;
         HEAP32[i13 >> 2] = i1 + 4;
         HEAP32[i1 >> 2] = i12;
        }
       }
      }
     }
    }
   }
   i13 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i13 + 1;
   HEAP8[i13 >> 0] = i3;
   if ((i2 | 0) > 84) i1 = 0; else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    i1 = 0;
   }
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb(i11, i15) {
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i16 + 16 | 0;
 i14 = i16 + 8 | 0;
 i8 = i16 + 4 | 0;
 i9 = i16;
 i3 = i11 + 52 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i12 = i11 + 32 | 0;
  i2 = 0;
  while (1) {
   if (i2 >>> 0 >= i1 >>> 0) {
    i10 = 9;
    break;
   }
   i3 = _getc(HEAP32[i12 >> 2] | 0) | 0;
   if ((i3 | 0) == -1) {
    i10 = 8;
    break;
   }
   HEAP8[i13 + i2 >> 0] = i3;
   i2 = i2 + 1 | 0;
  }
  if ((i10 | 0) == 8) i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((i10 | 0) == 9) {
   do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
    i5 = i11 + 40 | 0;
    i6 = i11 + 36 | 0;
    i7 = i14 + 1 | 0;
    L11 : while (1) {
     i17 = HEAP32[i5 >> 2] | 0;
     i3 = i17;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i18 = HEAP32[i6 >> 2] | 0;
     i4 = i13 + i1 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 15](i18, i17, i13, i4, i8, i14, i7, i9) | 0) {
     case 3:
      {
       i10 = 15;
       break L11;
      }
     case 2:
      {
       i10 = 17;
       break L11;
      }
     case 1:
      break;
     default:
      break L11;
     }
     i18 = HEAP32[i5 >> 2] | 0;
     HEAP32[i18 >> 2] = i2;
     HEAP32[i18 + 4 >> 2] = i3;
     if ((i1 | 0) == 8) {
      i10 = 17;
      break;
     }
     i2 = _getc(HEAP32[i12 >> 2] | 0) | 0;
     if ((i2 | 0) == -1) {
      i10 = 17;
      break;
     }
     HEAP8[i4 >> 0] = i2;
     i1 = i1 + 1 | 0;
    }
    if ((i10 | 0) == 15) HEAP8[i14 >> 0] = HEAP8[i13 >> 0] | 0; else if ((i10 | 0) == 17) {
     i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    i10 = 19;
   } else {
    HEAP8[i14 >> 0] = HEAP8[i13 >> 0] | 0;
    i10 = 19;
   } while (0);
   L21 : do if ((i10 | 0) == 19) {
    L23 : do if (i15) HEAP32[i11 + 48 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0; else {
     do {
      if ((i1 | 0) <= 0) break L23;
      i1 = i1 + -1 | 0;
      i18 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i13 + i1 >> 0] | 0) | 0;
     } while ((_ungetc(i18, HEAP32[i12 >> 2] | 0) | 0) != -1);
     i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
   } while (0);
  }
 } else {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   HEAP32[i2 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP8[i3 >> 0] = 0;
  }
 }
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb(i11, i15) {
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i16 + 16 | 0;
 i14 = i16 + 8 | 0;
 i8 = i16 + 4 | 0;
 i9 = i16;
 i3 = i11 + 52 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i12 = i11 + 32 | 0;
  i2 = 0;
  while (1) {
   if (i2 >>> 0 >= i1 >>> 0) {
    i10 = 9;
    break;
   }
   i3 = _getc(HEAP32[i12 >> 2] | 0) | 0;
   if ((i3 | 0) == -1) {
    i10 = 8;
    break;
   }
   HEAP8[i13 + i2 >> 0] = i3;
   i2 = i2 + 1 | 0;
  }
  if ((i10 | 0) == 8) i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((i10 | 0) == 9) {
   do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
    i5 = i11 + 40 | 0;
    i6 = i11 + 36 | 0;
    i7 = i14 + 4 | 0;
    L11 : while (1) {
     i17 = HEAP32[i5 >> 2] | 0;
     i3 = i17;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i18 = HEAP32[i6 >> 2] | 0;
     i4 = i13 + i1 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 15](i18, i17, i13, i4, i8, i14, i7, i9) | 0) {
     case 3:
      {
       i10 = 15;
       break L11;
      }
     case 2:
      {
       i10 = 17;
       break L11;
      }
     case 1:
      break;
     default:
      break L11;
     }
     i18 = HEAP32[i5 >> 2] | 0;
     HEAP32[i18 >> 2] = i2;
     HEAP32[i18 + 4 >> 2] = i3;
     if ((i1 | 0) == 8) {
      i10 = 17;
      break;
     }
     i2 = _getc(HEAP32[i12 >> 2] | 0) | 0;
     if ((i2 | 0) == -1) {
      i10 = 17;
      break;
     }
     HEAP8[i4 >> 0] = i2;
     i1 = i1 + 1 | 0;
    }
    if ((i10 | 0) == 15) HEAP32[i14 >> 2] = HEAP8[i13 >> 0]; else if ((i10 | 0) == 17) {
     i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    i10 = 19;
   } else {
    HEAP32[i14 >> 2] = HEAP8[i13 >> 0];
    i10 = 19;
   } while (0);
   L21 : do if ((i10 | 0) == 19) {
    L23 : do if (i15) HEAP32[i11 + 48 >> 2] = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0; else {
     do {
      if ((i1 | 0) <= 0) break L23;
      i1 = i1 + -1 | 0;
      i18 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[i13 + i1 >> 0] | 0) | 0;
     } while ((_ungetc(i18, HEAP32[i12 >> 2] | 0) | 0) != -1);
     i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
   } while (0);
  }
 } else {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   HEAP32[i2 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP8[i3 >> 0] = 0;
  }
 }
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i4, i7, i1, i10, i12, i2, i8, i13) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i9 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i15;
 i9 = i15 + 8 | 0;
 i3 = i1;
 while (1) {
  if ((i3 | 0) == (i10 | 0)) {
   i3 = i10;
   break;
  }
  if (!(HEAP32[i3 >> 2] | 0)) break;
  i3 = i3 + 4 | 0;
 }
 HEAP32[i13 >> 2] = i2;
 HEAP32[i12 >> 2] = i1;
 i6 = i8;
 i11 = i4 + 8 | 0;
 L6 : while (1) {
  if ((i2 | 0) == (i8 | 0) | (i1 | 0) == (i10 | 0)) {
   i3 = 36;
   break;
  }
  i16 = i7;
  i5 = HEAP32[i16 + 4 >> 2] | 0;
  i4 = i14;
  HEAP32[i4 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i4 + 4 >> 2] = i5;
  i4 = ___uselocale(HEAP32[i11 >> 2] | 0) | 0;
  i5 = _wcsnrtombs(i2, i12, i3 - i1 >> 2, i6 - i2 | 0, i7) | 0;
  if (i4 | 0) ___uselocale(i4) | 0;
  switch (i5 | 0) {
  case -1:
   {
    i3 = 10;
    break L6;
   }
  case 0:
   {
    i1 = 1;
    i3 = 33;
    break L6;
   }
  default:
   {}
  }
  i2 = (HEAP32[i13 >> 2] | 0) + i5 | 0;
  HEAP32[i13 >> 2] = i2;
  if ((i2 | 0) == (i8 | 0)) {
   i3 = 34;
   break;
  }
  if ((i3 | 0) == (i10 | 0)) {
   i3 = i10;
   i1 = HEAP32[i12 >> 2] | 0;
  } else {
   i2 = ___uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i1 = _wcrtomb(i9, 0, i7) | 0;
   if (i2 | 0) ___uselocale(i2) | 0;
   if ((i1 | 0) == -1) {
    i1 = 2;
    i3 = 32;
    break;
   }
   if (i1 >>> 0 > (i6 - (HEAP32[i13 >> 2] | 0) | 0) >>> 0) {
    i1 = 1;
    i3 = 32;
    break;
   }
   i2 = i9;
   while (1) {
    if (!i1) break;
    i5 = HEAP8[i2 >> 0] | 0;
    i16 = HEAP32[i13 >> 2] | 0;
    HEAP32[i13 >> 2] = i16 + 1;
    HEAP8[i16 >> 0] = i5;
    i2 = i2 + 1 | 0;
    i1 = i1 + -1 | 0;
   }
   i1 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
   HEAP32[i12 >> 2] = i1;
   i3 = i1;
   while (1) {
    if ((i3 | 0) == (i10 | 0)) {
     i3 = i10;
     break;
    }
    if (!(HEAP32[i3 >> 2] | 0)) break;
    i3 = i3 + 4 | 0;
   }
   i2 = HEAP32[i13 >> 2] | 0;
  }
 }
 if ((i3 | 0) == 10) {
  HEAP32[i13 >> 2] = i2;
  while (1) {
   if ((i1 | 0) == (HEAP32[i12 >> 2] | 0)) break;
   i16 = HEAP32[i1 >> 2] | 0;
   i3 = ___uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i2 = _wcrtomb(i2, i16, i14) | 0;
   if (i3 | 0) ___uselocale(i3) | 0;
   if ((i2 | 0) == -1) break;
   i2 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
   HEAP32[i13 >> 2] = i2;
   i1 = i1 + 4 | 0;
  }
  HEAP32[i12 >> 2] = i1;
  i1 = 2;
  i3 = 33;
 } else if ((i3 | 0) == 32) i3 = 33; else if ((i3 | 0) == 34) {
  i1 = HEAP32[i12 >> 2] | 0;
  i3 = 36;
 }
 if ((i3 | 0) != 33) if ((i3 | 0) == 36) i1 = (i1 | 0) != (i10 | 0) & 1;
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[19744] | 0)) if (___cxa_guard_acquire(19744) | 0) {
  i2 = 19136;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 19424);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19136, 10316) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19148, 10348) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19160, 10384) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19172, 10408) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19184, 10432) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19196, 10448) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19208, 10468) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19220, 10488) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19232, 10516) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19244, 10556) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19256, 10588) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19268, 10624) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19280, 10660) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19292, 10676) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19304, 10692) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19316, 10708) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19328, 10432) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19340, 10724) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19352, 10740) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19364, 10756) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19376, 10772) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19388, 10788) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19400, 10804) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19412, 10820) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[19664] | 0)) if (___cxa_guard_acquire(19664) | 0) {
  i2 = 18384;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 18672);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18384, 13762) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18396, 13770) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18408, 13779) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18420, 13785) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18432, 13791) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18444, 13795) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18456, 13800) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18468, 13805) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18480, 13812) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18492, 13822) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18504, 13830) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18516, 13839) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18528, 13848) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18540, 13852) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18552, 13856) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18564, 13860) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18576, 13791) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18588, 13864) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18600, 13868) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18612, 13872) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18624, 13876) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18636, 13880) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18648, 13884) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18660, 13888) | 0;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i4, i7, i1, i13, i10, i2, i8, i11) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i9 = 0, i12 = 0, i14 = 0, i15 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i14;
 i3 = i1;
 while (1) {
  if ((i3 | 0) == (i13 | 0)) {
   i3 = i13;
   break;
  }
  if (!(HEAP8[i3 >> 0] | 0)) break;
  i3 = i3 + 1 | 0;
 }
 HEAP32[i11 >> 2] = i2;
 HEAP32[i10 >> 2] = i1;
 i6 = i8;
 i9 = i4 + 8 | 0;
 while (1) {
  if ((i2 | 0) == (i8 | 0) | (i1 | 0) == (i13 | 0)) {
   i4 = 33;
   break;
  }
  i15 = i7;
  i5 = HEAP32[i15 + 4 >> 2] | 0;
  i4 = i12;
  HEAP32[i4 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i4 + 4 >> 2] = i5;
  i4 = ___uselocale(HEAP32[i9 >> 2] | 0) | 0;
  i5 = _mbsnrtowcs(i2, i10, i3 - i1 | 0, i6 - i2 >> 2, i7) | 0;
  if (i4 | 0) ___uselocale(i4) | 0;
  if ((i5 | 0) == -1) {
   i4 = 10;
   break;
  }
  i2 = (HEAP32[i11 >> 2] | 0) + (i5 << 2) | 0;
  HEAP32[i11 >> 2] = i2;
  if ((i2 | 0) == (i8 | 0)) {
   i4 = 30;
   break;
  }
  i1 = HEAP32[i10 >> 2] | 0;
  if ((i3 | 0) == (i13 | 0)) i3 = i13; else {
   i3 = ___uselocale(HEAP32[i9 >> 2] | 0) | 0;
   i1 = _mbrtowc(i2, i1, 1, i7) | 0;
   if (i3 | 0) ___uselocale(i3) | 0;
   if (i1 | 0) {
    i1 = 2;
    i4 = 29;
    break;
   }
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
   i1 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
   HEAP32[i10 >> 2] = i1;
   i3 = i1;
   while (1) {
    if ((i3 | 0) == (i13 | 0)) {
     i3 = i13;
     break;
    }
    if (!(HEAP8[i3 >> 0] | 0)) break;
    i3 = i3 + 1 | 0;
   }
   i2 = HEAP32[i11 >> 2] | 0;
  }
 }
 do if ((i4 | 0) == 10) {
  L29 : while (1) {
   HEAP32[i11 >> 2] = i2;
   if ((i1 | 0) == (HEAP32[i10 >> 2] | 0)) {
    i4 = 19;
    break;
   }
   i4 = ___uselocale(HEAP32[i9 >> 2] | 0) | 0;
   i2 = _mbrtowc(i2, i1, i3 - i1 | 0, i12) | 0;
   if (i4 | 0) ___uselocale(i4) | 0;
   switch (i2 | 0) {
   case -1:
    {
     i4 = 15;
     break L29;
    }
   case -2:
    {
     i4 = 16;
     break L29;
    }
   case 0:
    {
     i2 = 1;
     break;
    }
   default:
    {}
   }
   i1 = i1 + i2 | 0;
   i2 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
  }
  if ((i4 | 0) == 15) {
   HEAP32[i10 >> 2] = i1;
   i1 = 2;
   i4 = 29;
   break;
  } else if ((i4 | 0) == 16) {
   HEAP32[i10 >> 2] = i1;
   i1 = 1;
   i4 = 29;
   break;
  } else if ((i4 | 0) == 19) {
   HEAP32[i10 >> 2] = i1;
   i1 = (i1 | 0) != (i13 | 0) & 1;
   i4 = 29;
   break;
  }
 } else if ((i4 | 0) == 30) {
  i1 = HEAP32[i10 >> 2] | 0;
  i4 = 33;
 } while (0);
 if ((i4 | 0) != 29) if ((i4 | 0) == 33) i1 = (i1 | 0) != (i13 | 0) & 1;
 STACKTOP = i14;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i24, i18, i19, d8) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i13 = i21 + 344 | 0;
 i7 = i21 + 320 | 0;
 i6 = i21 + 304 | 0;
 i3 = i21 + 296 | 0;
 i2 = i21 + 280 | 0;
 i5 = i21 + 272 | 0;
 i10 = i21 + 240 | 0;
 i9 = i21 + 340 | 0;
 i11 = i21;
 i16 = i21 + 336 | 0;
 i14 = i21 + 332 | 0;
 i15 = i21 + 328 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 13487, HEAP32[i18 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i23 = i1;
   i20 = i1;
  }
 } else {
  i12 = i1;
  i23 = 0;
  i20 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i20 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i20, i2, i18) | 0;
 do if ((i20 | 0) == (i10 | 0)) {
  i17 = i11;
  i22 = 1;
  i25 = 0;
 } else {
  i1 = _malloc(i12 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i22 = 0;
   i25 = i1;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv(i13, i18);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i20, i3, i2, i17, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i24 >> 2];
 i20 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i17, i20, i1, i18, i19) | 0;
 HEAP32[i24 >> 2] = i1;
 if (!i22) _free(i25);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i24, i18, i19, d8) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i13 = i21 + 344 | 0;
 i7 = i21 + 320 | 0;
 i6 = i21 + 304 | 0;
 i3 = i21 + 296 | 0;
 i2 = i21 + 280 | 0;
 i5 = i21 + 272 | 0;
 i10 = i21 + 240 | 0;
 i9 = i21 + 340 | 0;
 i11 = i21;
 i16 = i21 + 336 | 0;
 i14 = i21 + 332 | 0;
 i15 = i21 + 328 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 22372, HEAP32[i18 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i23 = i1;
   i20 = i1;
  }
 } else {
  i12 = i1;
  i23 = 0;
  i20 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i20 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i20, i2, i18) | 0;
 do if ((i20 | 0) == (i10 | 0)) {
  i17 = i11;
  i22 = 1;
  i25 = 0;
 } else {
  i1 = _malloc(i12 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i22 = 0;
   i25 = i1;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv(i13, i18);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i20, i3, i2, i17, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i24 >> 2];
 i20 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i17, i20, i1, i18, i19) | 0;
 HEAP32[i24 >> 2] = i1;
 if (!i22) _free(i25);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function _main() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 1200 | 0;
 i1 = i9 + 1192 | 0;
 i4 = i9 + 1e3 | 0;
 i2 = i9;
 i6 = i4 + 112 | 0;
 i5 = i4 + 8 | 0;
 HEAP32[i5 >> 2] = 8024;
 i8 = i4 + 12 | 0;
 HEAP32[i4 >> 2] = 6348;
 HEAP32[i6 >> 2] = 6368;
 HEAP32[i4 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv(i4 + 112 | 0, i8);
 HEAP32[i4 + 184 >> 2] = 0;
 HEAP32[i4 + 188 >> 2] = -1;
 HEAP32[i4 >> 2] = 8004;
 HEAP32[i6 >> 2] = 8044;
 HEAP32[i5 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev(i8);
 i5 = i4 + 76 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i7 = _fopen(12412, 12520) | 0;
  HEAP32[i5 >> 2] = i7;
  if (!i7) i3 = 4; else {
   HEAP32[i4 + 100 >> 2] = 8;
   __ZNSt3__28ios_base5clearEj(i4 + (HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0) | 0, 0);
   i7 = i4;
  }
 } else i3 = 4;
 if ((i3 | 0) == 4) {
  i7 = i4 + (HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i7, HEAP32[i7 + 16 >> 2] | 4);
  i7 = i4;
 }
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPclc(i4, i2, 100, 92) | 0;
 i3 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(21052, i2, _strlen(i2) | 0) | 0;
 __ZNKSt3__28ios_base6getlocEv(i1, i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21924) | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 31](i2, 10) | 0;
 __ZNSt3__26localeD2Ev(i1);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i3, i2) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i3) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 | 0) {
  i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 63](i8) | 0;
  if (!(_fclose(i1) | 0)) {
   HEAP32[i5 >> 2] = 0;
   if (!i2) {
    HEAP32[i4 >> 2] = 8004;
    HEAP32[i6 >> 2] = 8044;
    i7 = i4 + 8 | 0;
    HEAP32[i7 >> 2] = 8024;
    __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i8);
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i4, 8056);
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i6);
    STACKTOP = i9;
    return 0;
   }
  }
 }
 i7 = i4 + (HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj(i7, HEAP32[i7 + 16 >> 2] | 4);
 HEAP32[i4 >> 2] = 8004;
 HEAP32[i6 >> 2] = 8044;
 i7 = i4 + 8 | 0;
 HEAP32[i7 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i8);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i4, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i6);
 STACKTOP = i9;
 return 0;
}

function __ZNSt3__28ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[2052] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(21556, i2, 21612);
 HEAP32[5219] = 9140;
 HEAP32[5221] = 9160;
 HEAP32[5220] = 0;
 __ZNSt3__28ios_base4initEPv(20884, 21556);
 HEAP32[5239] = 0;
 HEAP32[5240] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(21620, i2, 21676);
 HEAP32[5241] = 9188;
 HEAP32[5243] = 9208;
 HEAP32[5242] = 0;
 __ZNSt3__28ios_base4initEPv(20972, 21620);
 HEAP32[5261] = 0;
 HEAP32[5262] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i2 = HEAP32[2116] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(21684, i2, 21732);
 HEAP32[5263] = 5980;
 HEAP32[5264] = 6e3;
 __ZNSt3__28ios_base4initEPv(21056, 21684);
 HEAP32[5282] = 0;
 HEAP32[5283] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(21740, i2, 21788);
 HEAP32[5284] = 9244;
 HEAP32[5285] = 9264;
 __ZNSt3__28ios_base4initEPv(21140, 21740);
 HEAP32[5303] = 0;
 HEAP32[5304] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i2 = HEAP32[2084] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(21796, i2, 21844);
 HEAP32[5305] = 5980;
 HEAP32[5306] = 6e3;
 __ZNSt3__28ios_base4initEPv(21224, 21796);
 HEAP32[5324] = 0;
 HEAP32[5325] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i1 = HEAP32[21220 + (HEAP32[(HEAP32[5305] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[5347] = 5980;
 HEAP32[5348] = 6e3;
 __ZNSt3__28ios_base4initEPv(21392, i1);
 HEAP32[5366] = 0;
 HEAP32[5367] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(21852, i2, 21900);
 HEAP32[5326] = 9244;
 HEAP32[5327] = 9264;
 __ZNSt3__28ios_base4initEPv(21308, 21852);
 HEAP32[5345] = 0;
 HEAP32[5346] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i2 = HEAP32[21304 + (HEAP32[(HEAP32[5326] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[5368] = 9244;
 HEAP32[5369] = 9264;
 __ZNSt3__28ios_base4initEPv(21476, i2);
 HEAP32[5387] = 0;
 HEAP32[5388] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[20876 + (HEAP32[(HEAP32[5219] | 0) + -12 >> 2] | 0) + 72 >> 2] = 21052;
 HEAP32[20964 + (HEAP32[(HEAP32[5241] | 0) + -12 >> 2] | 0) + 72 >> 2] = 21136;
 i2 = (HEAP32[5305] | 0) + -12 | 0;
 i1 = 21220 + (HEAP32[i2 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 i1 = (HEAP32[5326] | 0) + -12 | 0;
 i3 = 21304 + (HEAP32[i1 >> 2] | 0) + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 8192;
 HEAP32[21220 + (HEAP32[i2 >> 2] | 0) + 72 >> 2] = 21052;
 HEAP32[21304 + (HEAP32[i1 >> 2] | 0) + 72 >> 2] = 21136;
 return;
}

function _scanexp(i6, i4) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = 0;
 i7 = i6 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i8 = i6 + 100 | 0;
 if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = i1 + 1;
  i2 = HEAPU8[i1 >> 0] | 0;
 } else i2 = ___shgetc(i6) | 0;
 switch (i2 | 0) {
 case 43:
 case 45:
  {
   i3 = (i2 | 0) == 45 & 1;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i6) | 0;
   i2 = i1 + -48 | 0;
   if ((i4 | 0) != 0 & i2 >>> 0 > 9) if (!(HEAP32[i8 >> 2] | 0)) {
    i2 = 0;
    i1 = -2147483648;
   } else {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
    i9 = 14;
   } else i9 = 12;
   break;
  }
 default:
  {
   i3 = 0;
   i1 = i2;
   i2 = i2 + -48 | 0;
   i9 = 12;
  }
 }
 if ((i9 | 0) == 12) if (i2 >>> 0 > 9) i9 = 14; else {
  i2 = 0;
  do {
   i2 = i1 + -48 + (i2 * 10 | 0) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i6) | 0;
   i4 = i1 + -48 | 0;
  } while (i4 >>> 0 < 10 & (i2 | 0) < 214748364);
  i5 = ((i2 | 0) < 0) << 31 >> 31;
  if (i4 >>> 0 < 10) {
   do {
    i10 = ___muldi3(i2 | 0, i5 | 0, 10, 0) | 0;
    i4 = getTempRet0() | 0;
    i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i2 = _i64Add(i1 | 0, getTempRet0() | 0, i10 | 0, i4 | 0) | 0;
    i5 = getTempRet0() | 0;
    i1 = HEAP32[i7 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
    } else i1 = ___shgetc(i6) | 0;
    i4 = i1 + -48 | 0;
   } while (i4 >>> 0 < 10 & ((i5 | 0) < 21474836 | (i5 | 0) == 21474836 & i2 >>> 0 < 2061584302));
   if (i4 >>> 0 < 10) {
    do {
     i1 = HEAP32[i7 >> 2] | 0;
     if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
      HEAP32[i7 >> 2] = i1 + 1;
      i1 = HEAPU8[i1 >> 0] | 0;
     } else i1 = ___shgetc(i6) | 0;
    } while ((i1 + -48 | 0) >>> 0 < 10);
    i1 = i5;
   } else i1 = i5;
  } else i1 = i5;
  if (HEAP32[i8 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  i8 = (i3 | 0) == 0;
  i7 = _i64Subtract(0, 0, i2 | 0, i1 | 0) | 0;
  i10 = getTempRet0() | 0;
  i2 = i8 ? i2 : i7;
  i1 = i8 ? i1 : i10;
 }
 if ((i9 | 0) == 14) if (!(HEAP32[i8 >> 2] | 0)) {
  i2 = 0;
  i1 = -2147483648;
 } else {
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  i2 = 0;
  i1 = -2147483648;
 }
 setTempRet0(i1 | 0);
 return i2 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i21, i22, i23, d8) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i13 = i17 + 168 | 0;
 i7 = i17 + 144 | 0;
 i6 = i17 + 128 | 0;
 i3 = i17 + 120 | 0;
 i2 = i17 + 104 | 0;
 i5 = i17 + 96 | 0;
 i10 = i17 + 64 | 0;
 i9 = i17 + 164 | 0;
 i11 = i17;
 i16 = i17 + 160 | 0;
 i14 = i17 + 156 | 0;
 i15 = i17 + 152 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 22372, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i20 = i1;
   i24 = i1;
  }
 } else {
  i12 = i1;
  i20 = 0;
  i24 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i24 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i2, i22) | 0;
 if ((i24 | 0) == (i10 | 0)) {
  i18 = i11;
  i19 = 0;
 } else {
  i1 = _malloc(i12 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i19 = i1;
  }
 }
 __ZNKSt3__28ios_base6getlocEv(i13, i22);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i24, i3, i2, i18, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i16 >> 2] | 0;
 i24 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i24 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i18, i21, i24, i22, i23) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i17;
 return i24 | 0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i21, i22, i23, d8) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i13 = i17 + 168 | 0;
 i7 = i17 + 144 | 0;
 i6 = i17 + 128 | 0;
 i3 = i17 + 120 | 0;
 i2 = i17 + 104 | 0;
 i5 = i17 + 96 | 0;
 i10 = i17 + 64 | 0;
 i9 = i17 + 164 | 0;
 i11 = i17;
 i16 = i17 + 160 | 0;
 i14 = i17 + 156 | 0;
 i15 = i17 + 152 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 13487, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i20 = i1;
   i24 = i1;
  }
 } else {
  i12 = i1;
  i20 = 0;
  i24 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i24 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i2, i22) | 0;
 if ((i24 | 0) == (i10 | 0)) {
  i18 = i11;
  i19 = 0;
 } else {
  i1 = _malloc(i12 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i19 = i1;
  }
 }
 __ZNKSt3__28ios_base6getlocEv(i13, i22);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i24, i3, i2, i18, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i16 >> 2] | 0;
 i24 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i24 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i18, i21, i24, i22, i23) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i17;
 return i24 | 0;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE(i10, i11, i12, i13, i1) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i11;
 if (!(i1 & 4)) i1 = i10; else if ((i9 - i10 | 0) > 2) if ((HEAP8[i10 >> 0] | 0) == -17) if ((HEAP8[i10 + 1 >> 0] | 0) == -69) i1 = (HEAP8[i10 + 2 >> 0] | 0) == -65 ? i10 + 3 | 0 : i10; else i1 = i10; else i1 = i10; else i1 = i10;
 i2 = 0;
 L7 : while (1) {
  if (!(i2 >>> 0 < i12 >>> 0 & i1 >>> 0 < i11 >>> 0)) break;
  i6 = HEAP8[i1 >> 0] | 0;
  i8 = i6 & 255;
  if (i8 >>> 0 > i13 >>> 0) break;
  do if (i6 << 24 >> 24 > -1) i1 = i1 + 1 | 0; else {
   if ((i6 & 255) < 194) break L7;
   if ((i6 & 255) < 224) {
    if ((i9 - i1 | 0) < 2) break L7;
    i3 = HEAPU8[i1 + 1 >> 0] | 0;
    if ((i3 & 192 | 0) != 128) break L7;
    if ((i3 & 63 | i8 << 6 & 1984) >>> 0 > i13 >>> 0) break L7; else {
     i1 = i1 + 2 | 0;
     break;
    }
   }
   if ((i6 & 255) < 240) {
    if ((i9 - i1 | 0) < 3) break L7;
    i4 = HEAP8[i1 + 1 >> 0] | 0;
    i3 = HEAP8[i1 + 2 >> 0] | 0;
    switch (i6 << 24 >> 24) {
    case -32:
     {
      if ((i4 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if ((i4 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) break L7;
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) break L7;
    if (((i4 & 63) << 6 | i8 << 12 & 61440 | i3 & 63) >>> 0 > i13 >>> 0) break L7; else {
     i1 = i1 + 3 | 0;
     break;
    }
   }
   if ((i6 & 255) >= 245) break L7;
   if ((i12 - i2 | 0) >>> 0 < 2 | (i9 - i1 | 0) < 4) break L7;
   i7 = HEAP8[i1 + 1 >> 0] | 0;
   i3 = HEAP8[i1 + 2 >> 0] | 0;
   i5 = HEAP8[i1 + 3 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case -16:
    {
     if ((i7 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if ((i7 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if ((i7 & -64) << 24 >> 24 != -128) break L7;
   }
   i4 = i3 & 255;
   if ((i4 & 192 | 0) != 128) break L7;
   i3 = i5 & 255;
   if ((i3 & 192 | 0) != 128) break L7;
   if (((i7 & 63) << 12 | i8 << 18 & 1835008 | i4 << 6 & 4032 | i3 & 63) >>> 0 > i13 >>> 0) break L7; else {
    i2 = i2 + 1 | 0;
    i1 = i1 + 4 | 0;
   }
  } while (0);
  i2 = i2 + 1 | 0;
 }
 return i1 - i10 | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i7, i8, i3, i2, i9, i10, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i3;
 i6 = i2;
 if (!(i4 & 2)) i5 = 4; else if ((i6 - i3 | 0) < 3) i1 = 1; else {
  HEAP32[i9 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = -17;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 }
 L4 : do if ((i5 | 0) == 4) {
  i1 = HEAP32[i8 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i7 >>> 0) {
    i1 = 0;
    break L4;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3 >>> 0 > i10 >>> 0 | (i3 & -2048 | 0) == 55296) {
    i1 = 2;
    break L4;
   }
   do if (i3 >>> 0 < 128) {
    i1 = HEAP32[i9 >> 2] | 0;
    if ((i6 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i9 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if (i3 >>> 0 < 2048) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i6 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 6 | 192;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
    i1 = HEAP32[i9 >> 2] | 0;
    i2 = i6 - i1 | 0;
    if (i3 >>> 0 < 65536) {
     if ((i2 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 12 | 224;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    } else {
     if ((i2 | 0) < 4) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 18 | 240;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 12 & 63 | 128;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
   } while (0);
   i1 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
   HEAP32[i8 >> 2] = i1;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE7getlineEPclc(i9, i1, i10, i5) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i7 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i11;
 i8 = i9 + 4 | 0;
 HEAP32[i8 >> 2] = 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i6, i9, 1);
 if (HEAP8[i6 >> 0] | 0) {
  i6 = i10 + -1 | 0;
  while (1) {
   i2 = HEAP32[i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 63](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    i7 = 7;
    break;
   }
   i3 = __ZNSt3__211char_traitsIcE12to_char_typeEi(i2) | 0;
   if (__ZNSt3__211char_traitsIcE2eqEcc(i3, i5) | 0) {
    i7 = 9;
    break;
   }
   i2 = HEAP32[i8 >> 2] | 0;
   if ((i2 | 0) >= (i6 | 0)) {
    i3 = 4;
    break;
   }
   HEAP8[i1 >> 0] = i3;
   i2 = HEAP32[i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
    HEAP32[i3 >> 2] = i4 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   i1 = i1 + 1 | 0;
  }
  if ((i7 | 0) == 7) {
   i3 = 2;
   i2 = HEAP32[i8 >> 2] | 0;
  } else if ((i7 | 0) == 9) {
   i2 = HEAP32[i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 63](i2) | 0; else {
    HEAP32[i3 >> 2] = i4 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
   }
   i2 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
   HEAP32[i8 >> 2] = i2;
   i3 = 0;
  }
  i8 = i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i8, HEAP32[i8 + 16 >> 2] | ((i2 | 0) == 0 ? i3 | 4 : i3));
 }
 if ((i10 | 0) > 0) HEAP8[i1 >> 0] = 0;
 STACKTOP = i11;
 return i9 | 0;
}

function _pop_arg_264(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i2 >>> 0 <= 20) do switch (i2 | 0) {
 case 9:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   HEAP32[i1 >> 2] = i2;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = ((i2 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i2 = i4;
   i5 = HEAP32[i2 >> 2] | 0;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 8;
   i4 = i1;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i2;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i3 >> 2] = i5 + 8;
   HEAPF64[i1 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i3 >> 2] = i5 + 8;
   HEAPF64[i1 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE(i10, i11, i12, i13, i1) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i11;
 if (!(i1 & 4)) i1 = i10; else if ((i9 - i10 | 0) > 2) if ((HEAP8[i10 >> 0] | 0) == -17) if ((HEAP8[i10 + 1 >> 0] | 0) == -69) i1 = (HEAP8[i10 + 2 >> 0] | 0) == -65 ? i10 + 3 | 0 : i10; else i1 = i10; else i1 = i10; else i1 = i10;
 i8 = 0;
 L7 : while (1) {
  if (!(i8 >>> 0 < i12 >>> 0 & i1 >>> 0 < i11 >>> 0)) break;
  i5 = HEAP8[i1 >> 0] | 0;
  i7 = i5 & 255;
  do if (i5 << 24 >> 24 > -1) {
   if (i7 >>> 0 > i13 >>> 0) break L7;
   i1 = i1 + 1 | 0;
  } else {
   if ((i5 & 255) < 194) break L7;
   if ((i5 & 255) < 224) {
    if ((i9 - i1 | 0) < 2) break L7;
    i2 = HEAPU8[i1 + 1 >> 0] | 0;
    if ((i2 & 192 | 0) != 128) break L7;
    if ((i2 & 63 | i7 << 6 & 1984) >>> 0 > i13 >>> 0) break L7;
    i1 = i1 + 2 | 0;
    break;
   }
   if ((i5 & 255) < 240) {
    if ((i9 - i1 | 0) < 3) break L7;
    i3 = HEAP8[i1 + 1 >> 0] | 0;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    switch (i5 << 24 >> 24) {
    case -32:
     {
      if ((i3 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if ((i3 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if ((i3 & -64) << 24 >> 24 != -128) break L7;
    }
    i2 = i2 & 255;
    if ((i2 & 192 | 0) != 128) break L7;
    if (((i3 & 63) << 6 | i7 << 12 & 61440 | i2 & 63) >>> 0 > i13 >>> 0) break L7; else {
     i1 = i1 + 3 | 0;
     break;
    }
   }
   if ((i5 & 255) >= 245) break L7;
   if ((i9 - i1 | 0) < 4) break L7;
   i6 = HEAP8[i1 + 1 >> 0] | 0;
   i2 = HEAP8[i1 + 2 >> 0] | 0;
   i4 = HEAP8[i1 + 3 >> 0] | 0;
   switch (i5 << 24 >> 24) {
   case -16:
    {
     if ((i6 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if ((i6 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if ((i6 & -64) << 24 >> 24 != -128) break L7;
   }
   i3 = i2 & 255;
   if ((i3 & 192 | 0) != 128) break L7;
   i2 = i4 & 255;
   if ((i2 & 192 | 0) != 128) break L7;
   if (((i6 & 63) << 12 | i7 << 18 & 1835008 | i3 << 6 & 4032 | i2 & 63) >>> 0 > i13 >>> 0) break L7; else i1 = i1 + 4 | 0;
  } while (0);
  i8 = i8 + 1 | 0;
 }
 return i1 - i10 | 0;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc(i7, i9, i12, i13, i14, i2, i3, i4, i5, i8) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i10 = 0, i11 = 0;
 i6 = 0;
 i10 = HEAP32[i13 >> 2] | 0;
 i11 = (i10 | 0) == (i12 | 0);
 do if (i11) {
  i1 = (HEAP8[i8 + 24 >> 0] | 0) == i7 << 24 >> 24;
  if (!i1) if ((HEAP8[i8 + 25 >> 0] | 0) != i7 << 24 >> 24) {
   i6 = 5;
   break;
  }
  HEAP32[i13 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i3 + 11 >> 0] | 0;
  if (i7 << 24 >> 24 == i2 << 24 >> 24 ? ((i6 << 24 >> 24 < 0 ? HEAP32[i3 + 4 >> 2] | 0 : i6 & 255) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i3 = i8 + 26 | 0;
  i2 = 0;
  while (1) {
   i1 = i8 + i2 | 0;
   if ((i2 | 0) == 26) {
    i1 = i3;
    break;
   }
   if ((HEAP8[i1 >> 0] | 0) == i7 << 24 >> 24) break; else i2 = i2 + 1 | 0;
  }
  i1 = i1 - i8 | 0;
  if ((i1 | 0) > 23) i1 = -1; else {
   switch (i9 | 0) {
   case 10:
   case 8:
    {
     if ((i1 | 0) >= (i9 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 22) {
      if (i11) {
       i1 = -1;
       break L6;
      }
      if ((i10 - i12 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i10 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[6016 + i1 >> 0] | 0;
      HEAP32[i13 >> 2] = i10 + 1;
      HEAP8[i10 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[6016 + i1 >> 0] | 0;
   HEAP32[i13 >> 2] = i10 + 1;
   HEAP8[i10 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw(i7, i9, i12, i13, i14, i2, i3, i4, i5, i8) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i10 = 0, i11 = 0;
 i6 = 0;
 i10 = HEAP32[i13 >> 2] | 0;
 i11 = (i10 | 0) == (i12 | 0);
 do if (i11) {
  i1 = (HEAP32[i8 + 96 >> 2] | 0) == (i7 | 0);
  if (!i1) if ((HEAP32[i8 + 100 >> 2] | 0) != (i7 | 0)) {
   i6 = 5;
   break;
  }
  HEAP32[i13 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i3 + 11 >> 0] | 0;
  if ((i7 | 0) == (i2 | 0) ? ((i6 << 24 >> 24 < 0 ? HEAP32[i3 + 4 >> 2] | 0 : i6 & 255) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i3 = i8 + 104 | 0;
  i2 = 0;
  while (1) {
   i1 = i8 + (i2 << 2) | 0;
   if ((i2 | 0) == 26) {
    i1 = i3;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) break; else i2 = i2 + 1 | 0;
  }
  i1 = i1 - i8 | 0;
  i2 = i1 >> 2;
  if ((i1 | 0) > 92) i1 = -1; else {
   switch (i9 | 0) {
   case 10:
   case 8:
    {
     if ((i2 | 0) >= (i9 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 88) {
      if (i11) {
       i1 = -1;
       break L6;
      }
      if ((i10 - i12 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i10 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[6016 + i2 >> 0] | 0;
      HEAP32[i13 >> 2] = i10 + 1;
      HEAP8[i10 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[6016 + i2 >> 0] | 0;
   HEAP32[i13 >> 2] = i10 + 1;
   HEAP8[i10 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function _wcsrtombs(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 L1 : do if (!i3) {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i3 = i1;
   i1 = 0;
   do {
    if (i2 >>> 0 > 127) {
     i2 = _wcrtomb(i7, i2, 0) | 0;
     if ((i2 | 0) == -1) {
      i1 = -1;
      break L1;
     }
    } else i2 = 1;
    i1 = i2 + i1 | 0;
    i3 = i3 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) != 0);
  }
 } else {
  L10 : do if (i1 >>> 0 > 3) {
   i2 = i1;
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) break;
     i5 = _wcrtomb(i3, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (i2 >>> 0 <= 3) break L10;
   }
   HEAP8[i3 >> 0] = 0;
   HEAP32[i6 >> 2] = 0;
   i1 = i1 - i2 | 0;
   break L1;
  } else i2 = i1; while (0);
  if (i2) {
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) {
      i4 = 20;
      break;
     }
     i5 = _wcrtomb(i7, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = 23;
      break;
     }
     _wcrtomb(i3, HEAP32[i4 >> 2] | 0, 0) | 0;
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (!i2) break L1;
   }
   if ((i4 | 0) == 20) {
    HEAP8[i3 >> 0] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = i1 - i2 | 0;
    break;
   } else if ((i4 | 0) == 23) {
    i1 = i1 - i2 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_(i11, i1, i8) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i1;
 i10 = i13;
 i12 = i11 + 11 | 0;
 i4 = HEAP8[i12 >> 0] | 0;
 i2 = i4 << 24 >> 24 < 0;
 if (i2) {
  i9 = HEAP32[i11 + 4 >> 2] | 0;
  i5 = (HEAP32[i11 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i4 & 255;
  i5 = 10;
 }
 i7 = i8 - i6 | 0;
 do if (i7 | 0) {
  if (i2) {
   i3 = HEAP32[i11 >> 2] | 0;
   i2 = HEAP32[i11 + 4 >> 2] | 0;
  } else {
   i3 = i11;
   i2 = i4 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_(i1, i3, i3 + i2 | 0) | 0) {
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(i10, i1, i8);
   i12 = HEAP8[i10 + 11 >> 0] | 0;
   i9 = i12 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(i11, i9 ? HEAP32[i10 >> 2] | 0 : i10, i9 ? HEAP32[i10 + 4 >> 2] | 0 : i12 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
   break;
  }
  if ((i5 - i9 | 0) >>> 0 < i7 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(i11, i5, i9 + i7 - i5 | 0, i9, i9, 0, 0);
  if ((HEAP8[i12 >> 0] | 0) < 0) i4 = HEAP32[i11 >> 2] | 0; else i4 = i11;
  i3 = i8 + (i9 - i6) | 0;
  i2 = i4 + i9 | 0;
  while (1) {
   if ((i1 | 0) == (i8 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i2, i1);
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  }
  HEAP8[i10 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i4 + i3 | 0, i10);
  i1 = i9 + i7 | 0;
  if ((HEAP8[i12 >> 0] | 0) < 0) {
   HEAP32[i11 + 4 >> 2] = i1;
   break;
  } else {
   HEAP8[i12 >> 0] = i1;
   break;
  }
 } while (0);
 STACKTOP = i13;
 return i11 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_(i10, i1, i7) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 i2 = i10 + 8 | 0;
 i11 = i2 + 3 | 0;
 i5 = HEAP8[i11 >> 0] | 0;
 i3 = i5 << 24 >> 24 < 0;
 if (i3) {
  i9 = HEAP32[i10 + 4 >> 2] | 0;
  i4 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i5 & 255;
  i4 = 1;
 }
 i2 = i7 - i1 | 0;
 i6 = i2 >> 2;
 do if (i2 | 0) {
  if (i3) {
   i3 = HEAP32[i10 >> 2] | 0;
   i2 = HEAP32[i10 + 4 >> 2] | 0;
  } else {
   i3 = i10;
   i2 = i5 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_(i1, i3, i3 + (i2 << 2) | 0) | 0) {
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(i8, i1, i7);
   i11 = HEAP8[i8 + 8 + 3 >> 0] | 0;
   i9 = i11 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm(i10, i9 ? HEAP32[i8 >> 2] | 0 : i8, i9 ? HEAP32[i8 + 4 >> 2] | 0 : i11 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
   break;
  }
  if ((i4 - i9 | 0) >>> 0 < i6 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm(i10, i4, i9 + i6 - i4 | 0, i9, i9, 0, 0);
  if ((HEAP8[i11 >> 0] | 0) < 0) i2 = HEAP32[i10 >> 2] | 0; else i2 = i10;
  i2 = i2 + (i9 << 2) | 0;
  while (1) {
   if ((i1 | 0) == (i7 | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i2, i1);
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
  HEAP32[i8 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i2, i8);
  i1 = i9 + i6 | 0;
  if ((HEAP8[i11 >> 0] | 0) < 0) {
   HEAP32[i10 + 4 >> 2] = i1;
   break;
  } else {
   HEAP8[i11 >> 0] = i1;
   break;
  }
 } while (0);
 STACKTOP = i12;
 return i10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i2, i3, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i13 + 40 | 0;
 i12 = i13;
 i8 = i13 + 32 | 0;
 i9 = i13 + 36 | 0;
 i10 = i13 + 28 | 0;
 i11 = i13 + 24 | 0;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  HEAP32[i8 >> 2] = -1;
  i11 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i3 >> 2] = FUNCTION_TABLE_iiiiiii[i11 & 63](i2, i12, i1, i5, i6, i8) | 0;
  switch (HEAP32[i8 >> 2] | 0) {
  case 0:
   {
    HEAP8[i7 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[i7 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[i7 >> 0] = 1;
    HEAP32[i6 >> 2] = 4;
   }
  }
  i1 = HEAP32[i3 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21956) | 0;
  __ZNSt3__26localeD2Ev(i1);
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21964) | 0;
  __ZNSt3__26localeD2Ev(i1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i12, i2);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i12 + 12 | 0, i2);
  HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
  i2 = i12 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP8[i7 >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i1, i12, i2, i10, i6, 1) | 0) == (i12 | 0) & 1;
  i1 = HEAP32[i3 >> 2] | 0;
  do {
   i2 = i2 + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i2);
  } while ((i2 | 0) != (i12 | 0));
 }
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i2, i3, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i13 + 40 | 0;
 i12 = i13;
 i8 = i13 + 32 | 0;
 i9 = i13 + 36 | 0;
 i10 = i13 + 28 | 0;
 i11 = i13 + 24 | 0;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  HEAP32[i8 >> 2] = -1;
  i11 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i3 >> 2] = FUNCTION_TABLE_iiiiiii[i11 & 63](i2, i12, i1, i5, i6, i8) | 0;
  switch (HEAP32[i8 >> 2] | 0) {
  case 0:
   {
    HEAP8[i7 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[i7 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[i7 >> 0] = 1;
    HEAP32[i6 >> 2] = 4;
   }
  }
  i1 = HEAP32[i3 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21924) | 0;
  __ZNSt3__26localeD2Ev(i1);
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 21940) | 0;
  __ZNSt3__26localeD2Ev(i1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i12, i2);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i12 + 12 | 0, i2);
  HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
  i2 = i12 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP8[i7 >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i1, i12, i2, i10, i6, 1) | 0) == (i12 | 0) & 1;
  i1 = HEAP32[i3 >> 2] | 0;
  do {
   i2 = i2 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
  } while ((i2 | 0) != (i12 | 0));
 }
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i1, i9, i2, i3, i5) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 4 | 0;
 i4 = i10;
 if (!(HEAP32[i2 + 4 >> 2] & 1)) {
  i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i7 & 31](i1, i8, i2, i3, i5 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i8, i2);
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21964) | 0;
  __ZNSt3__26localeD2Ev(i8);
  i2 = HEAP32[i1 >> 2] | 0;
  if (i5) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 63](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 63](i8, i1);
  i6 = i8 + 8 + 3 | 0;
  i1 = HEAP8[i6 >> 0] | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i7 = i8 + 4 | 0;
  i5 = i1 << 24 >> 24 < 0 ? i2 : i8;
  while (1) {
   i4 = i1 << 24 >> 24 < 0;
   if ((i5 | 0) == ((i4 ? i2 : i8) + ((i4 ? HEAP32[i7 >> 2] | 0 : i1 & 255) << 2) | 0)) break;
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (i2 | 0) {
    i3 = i2 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 28 >> 2] | 0)) {
     i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0;
     i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) | 0;
     i1 = FUNCTION_TABLE_iii[i4 & 31](i2, i1) | 0;
    } else {
     HEAP32[i3 >> 2] = i4 + 4;
     HEAP32[i4 >> 2] = i1;
     i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[i9 >> 2] = 0;
   }
   i5 = i5 + 4 | 0;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i1, i9, i2, i3, i5) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 4 | 0;
 i4 = i10;
 if (!(HEAP32[i2 + 4 >> 2] & 1)) {
  i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i7 & 31](i1, i8, i2, i3, i5 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i8, i2);
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21940) | 0;
  __ZNSt3__26localeD2Ev(i8);
  i2 = HEAP32[i1 >> 2] | 0;
  if (i5) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 63](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 63](i8, i1);
  i6 = i8 + 11 | 0;
  i1 = HEAP8[i6 >> 0] | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i7 = i8 + 4 | 0;
  i5 = i1 << 24 >> 24 < 0 ? i2 : i8;
  while (1) {
   i4 = i1 << 24 >> 24 < 0;
   if ((i5 | 0) == ((i4 ? i2 : i8) + (i4 ? HEAP32[i7 >> 2] | 0 : i1 & 255) | 0)) break;
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (i2 | 0) {
    i3 = i2 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 28 >> 2] | 0)) {
     i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0;
     i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
     i1 = FUNCTION_TABLE_iii[i4 & 31](i2, i1) | 0;
    } else {
     HEAP32[i3 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i1;
     i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[i9 >> 2] = 0;
   }
   i5 = i5 + 1 | 0;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i3, i11, i1, i2, i8) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i13;
 i12 = HEAP32[i10 >> 2] | 0;
 if (!i12) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = i3;
 i5 = i1 - i4 | 0;
 i7 = i2 + 12 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i5 = (i6 | 0) > (i5 | 0) ? i6 - i5 | 0 : 0;
 i6 = i11;
 i2 = i6 - i4 | 0;
 if ((i2 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, i3, i2) | 0) != (i2 | 0)) {
  HEAP32[i10 >> 2] = 0;
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 do if ((i5 | 0) > 0) {
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  if (i5 >>> 0 < 11) {
   i3 = i9 + 11 | 0;
   HEAP8[i3 >> 0] = i5;
   i2 = i9;
   i4 = i9;
  } else {
   i3 = i5 + 16 & -16;
   i2 = __Znwm(i3) | 0;
   HEAP32[i9 >> 2] = i2;
   HEAP32[i9 + 8 >> 2] = i3 | -2147483648;
   HEAP32[i9 + 4 >> 2] = i5;
   i3 = i9 + 11 | 0;
   i4 = i9;
  }
  _memset(i2 | 0, i8 | 0, i5 | 0) | 0;
  HEAP8[i2 + i5 >> 0] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, (HEAP8[i3 >> 0] | 0) < 0 ? HEAP32[i4 >> 2] | 0 : i9, i5) | 0) == (i5 | 0)) {
   if ((HEAP8[i3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
   break;
  }
  HEAP32[i10 >> 2] = 0;
  if ((HEAP8[i3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 } while (0);
 i1 = i1 - i6 | 0;
 if ((i1 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, i11, i1) | 0) != (i1 | 0)) {
  HEAP32[i10 >> 2] = 0;
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _memcpy(i3, i6, i1) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) >= 8192) {
  _emscripten_memcpy_big(i3 | 0, i6 | 0, i1 | 0) | 0;
  return i3 | 0;
 }
 i5 = i3 | 0;
 i4 = i3 + i1 | 0;
 if ((i3 & 3) == (i6 & 3)) {
  while (i3 & 3) {
   if (!i1) return i5 | 0;
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   i3 = i3 + 1 | 0;
   i6 = i6 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  i1 = i4 & -4 | 0;
  i2 = i1 - 64 | 0;
  while ((i3 | 0) <= (i2 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
   HEAP32[i3 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
   HEAP32[i3 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
   HEAP32[i3 + 32 >> 2] = HEAP32[i6 + 32 >> 2];
   HEAP32[i3 + 36 >> 2] = HEAP32[i6 + 36 >> 2];
   HEAP32[i3 + 40 >> 2] = HEAP32[i6 + 40 >> 2];
   HEAP32[i3 + 44 >> 2] = HEAP32[i6 + 44 >> 2];
   HEAP32[i3 + 48 >> 2] = HEAP32[i6 + 48 >> 2];
   HEAP32[i3 + 52 >> 2] = HEAP32[i6 + 52 >> 2];
   HEAP32[i3 + 56 >> 2] = HEAP32[i6 + 56 >> 2];
   HEAP32[i3 + 60 >> 2] = HEAP32[i6 + 60 >> 2];
   i3 = i3 + 64 | 0;
   i6 = i6 + 64 | 0;
  }
  while ((i3 | 0) < (i1 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 } else {
  i1 = i4 - 4 | 0;
  while ((i3 | 0) < (i1 | 0)) {
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 }
 while ((i3 | 0) < (i4 | 0)) {
  HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i6 = i6 + 1 | 0;
 }
 return i5 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i1;
 i12 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 4 | 0;
 i9 = i1 + 8 | 0;
 HEAP8[i12 >> 0] = HEAP8[13492] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[13493] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[13494] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[13495] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[13496] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[13497] | 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 13498, 1, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1;
 i15 = i14 + 13 | 0;
 i6 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i15 | 0) + 15 & -16) | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i8 >> 2] = i5;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i15, i7, i12, i8) | 0) | 0;
 i12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1 | 24) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i13, i12, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i2, i5, i3, i4) | 0;
 _llvm_stackrestore(i6 | 0);
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i1;
 i12 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 4 | 0;
 i9 = i1 + 8 | 0;
 HEAP8[i12 >> 0] = HEAP8[13492] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[13493] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[13494] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[13495] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[13496] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[13497] | 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 13498, 1, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1;
 i15 = i14 + 13 | 0;
 i6 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i15 | 0) + 15 & -16) | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i8 >> 2] = i5;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i15, i7, i12, i8) | 0) | 0;
 i12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1 | 24) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i13, i12, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i2, i5, i3, i4) | 0;
 _llvm_stackrestore(i6 | 0);
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i1;
 i12 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 4 | 0;
 i9 = i1 + 8 | 0;
 HEAP8[i12 >> 0] = HEAP8[13492] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[13493] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[13494] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[13495] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[13496] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[13497] | 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 13498, 0, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1;
 i15 = i14 | 12;
 i6 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i15 | 0) + 15 & -16) | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i8 >> 2] = i5;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i15, i7, i12, i8) | 0) | 0;
 i12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1 | 21) << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i13, i12, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i2, i5, i3, i4) | 0;
 _llvm_stackrestore(i6 | 0);
 STACKTOP = i1;
 return i5 | 0;
}

function _mbrtowc(i2, i4, i6, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i9;
 i7 = (i1 | 0) == 0 ? 20360 : i1;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if (!i4) if (!i1) i1 = 0; else i8 = 19; else {
  i5 = (i2 | 0) == 0 ? i3 : i2;
  if (!i6) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i4 >> 0] | 0;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i1 & 255;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i3 = (HEAP32[HEAP32[(___pthread_self_397() | 0) + 188 >> 2] >> 2] | 0) == 0;
    i1 = HEAP8[i4 >> 0] | 0;
    if (i3) {
     HEAP32[i5 >> 2] = i1 << 24 >> 24 & 57343;
     i1 = 1;
     break;
    }
    i1 = (i1 & 255) + -194 | 0;
    if (i1 >>> 0 > 50) {
     i8 = 19;
     break;
    }
    i1 = HEAP32[1056 + (i1 << 2) >> 2] | 0;
    i3 = i6 + -1 | 0;
    if (i3) {
     i4 = i4 + 1 | 0;
     i8 = 11;
    }
   } else {
    i3 = i6;
    i8 = 11;
   }
   L14 : do if ((i8 | 0) == 11) {
    i2 = HEAPU8[i4 >> 0] | 0;
    i10 = i2 >>> 3;
    if ((i10 + -16 | i10 + (i1 >> 26)) >>> 0 > 7) {
     i8 = 19;
     break L1;
    }
    i1 = i2 + -128 | i1 << 6;
    i2 = i3 + -1 | 0;
    if ((i1 | 0) < 0) do {
     i4 = i4 + 1 | 0;
     if (!i2) break L14;
     i3 = HEAP8[i4 >> 0] | 0;
     if ((i3 & -64) << 24 >> 24 != -128) {
      i8 = 19;
      break L1;
     }
     i1 = (i3 & 255) + -128 | i1 << 6;
     i2 = i2 + -1 | 0;
    } while ((i1 | 0) < 0);
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i6 - i2 | 0;
    break L1;
   } while (0);
   HEAP32[i7 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 19) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i1;
 i12 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i10 = i1 + 4 | 0;
 i9 = i1 + 8 | 0;
 HEAP8[i12 >> 0] = HEAP8[13492] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[13493] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[13494] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[13495] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[13496] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[13497] | 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 13498, 0, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1;
 i15 = i14 | 12;
 i6 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i15 | 0) + 15 & -16) | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i8 >> 2] = i5;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i15, i7, i12, i8) | 0) | 0;
 i12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (i14 << 1 | 21) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i13, i12, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i2, i5, i3, i4) | 0;
 _llvm_stackrestore(i6 | 0);
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i4, i7, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i8 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i4 + 8 >> 2] | 0, i3) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i4, i7, i1); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i4 >> 2] | 0, i3) | 0)) {
   i6 = HEAP32[i2 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 3](i6, i4, i7, i1, i3);
   break;
  }
  if ((HEAP32[i4 + 16 >> 2] | 0) != (i7 | 0)) {
   i5 = i4 + 20 | 0;
   if ((HEAP32[i5 >> 2] | 0) != (i7 | 0)) {
    HEAP32[i4 + 32 >> 2] = i1;
    i6 = i4 + 44 | 0;
    if ((HEAP32[i6 >> 2] | 0) == 4) break;
    i1 = i4 + 52 | 0;
    HEAP8[i1 >> 0] = 0;
    i8 = i4 + 53 | 0;
    HEAP8[i8 >> 0] = 0;
    i2 = HEAP32[i2 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 15](i2, i4, i7, i7, 1, i3);
    if (!(HEAP8[i8 >> 0] | 0)) {
     i1 = 0;
     i2 = 11;
    } else if (!(HEAP8[i1 >> 0] | 0)) {
     i1 = 1;
     i2 = 11;
    } else i2 = 15;
    do if ((i2 | 0) == 11) {
     HEAP32[i5 >> 2] = i7;
     i8 = i4 + 40 | 0;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
     if ((HEAP32[i4 + 36 >> 2] | 0) == 1) if ((HEAP32[i4 + 24 >> 2] | 0) == 2) {
      HEAP8[i4 + 54 >> 0] = 1;
      if (i1) {
       i2 = 15;
       break;
      } else {
       i1 = 4;
       break;
      }
     }
     if (i1) i2 = 15; else i1 = 4;
    } while (0);
    if ((i2 | 0) == 15) i1 = 3;
    HEAP32[i6 >> 2] = i1;
    break;
   }
  }
  if ((i1 | 0) == 1) HEAP32[i4 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i13 + 16 | 0;
 i3 = i13 + 8 | 0;
 i11 = i13 + 4 | 0;
 i12 = i13;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i9, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) i2 = 15; else {
  HEAP32[i3 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(i9) | 0;
  if (HEAP8[i1 + 44 >> 0] | 0) {
   if ((_fwrite(i3, 4, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
    i2 = 15;
    break;
   }
   i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[i11 >> 2] = i10;
  i2 = i3 + 4 | 0;
  i4 = i1 + 36 | 0;
  i5 = i1 + 40 | 0;
  i6 = i10 + 8 | 0;
  i7 = i10;
  i8 = i1 + 32 | 0;
  while (1) {
   i1 = HEAP32[i4 >> 2] | 0;
   i1 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 15](i1, HEAP32[i5 >> 2] | 0, i3, i2, i12, i10, i6, i11) | 0;
   if ((HEAP32[i12 >> 2] | 0) == (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 3) {
    i2 = 8;
    break;
   }
   if (i1 >>> 0 >= 2) {
    i2 = 14;
    break;
   }
   i3 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i10, 1, i3, HEAP32[i8 >> 2] | 0) | 0) != (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 1) i3 = HEAP32[i12 >> 2] | 0; else {
    i2 = 13;
    break;
   }
  }
  if ((i2 | 0) == 8) if ((_fwrite(i3, 1, 1, HEAP32[i8 >> 2] | 0) | 0) == 1) i2 = 13; else i2 = 14;
  if ((i2 | 0) == 13) {
   i2 = 15;
   break;
  } else if ((i2 | 0) == 14) {
   i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((i2 | 0) == 15) i1 = __ZNSt3__211char_traitsIwE7not_eofEj(i9) | 0;
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i13 + 16 | 0;
 i3 = i13 + 8 | 0;
 i11 = i13 + 4 | 0;
 i12 = i13;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i9, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) i2 = 15; else {
  HEAP8[i3 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(i9) | 0;
  if (HEAP8[i1 + 44 >> 0] | 0) {
   if ((_fwrite(i3, 1, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
    i2 = 15;
    break;
   }
   i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[i11 >> 2] = i10;
  i2 = i3 + 1 | 0;
  i4 = i1 + 36 | 0;
  i5 = i1 + 40 | 0;
  i6 = i10 + 8 | 0;
  i7 = i10;
  i8 = i1 + 32 | 0;
  while (1) {
   i1 = HEAP32[i4 >> 2] | 0;
   i1 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 15](i1, HEAP32[i5 >> 2] | 0, i3, i2, i12, i10, i6, i11) | 0;
   if ((HEAP32[i12 >> 2] | 0) == (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 3) {
    i2 = 8;
    break;
   }
   if (i1 >>> 0 >= 2) {
    i2 = 14;
    break;
   }
   i3 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i10, 1, i3, HEAP32[i8 >> 2] | 0) | 0) != (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 1) i3 = HEAP32[i12 >> 2] | 0; else {
    i2 = 13;
    break;
   }
  }
  if ((i2 | 0) == 8) if ((_fwrite(i3, 1, 1, HEAP32[i8 >> 2] | 0) | 0) == 1) i2 = 13; else i2 = 14;
  if ((i2 | 0) == 13) {
   i2 = 15;
   break;
  } else if ((i2 | 0) == 14) {
   i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((i2 | 0) == 15) i1 = __ZNSt3__211char_traitsIcE7not_eofEi(i9) | 0;
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj(i4, i8) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i10 + 16 | 0;
 i6 = i10 + 8 | 0;
 i2 = i10 + 4 | 0;
 i3 = i10;
 i7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i8, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 i9 = i4 + 52 | 0;
 i1 = (HEAP8[i9 >> 0] | 0) != 0;
 do if (i7) if (i1) i1 = i8; else {
  i1 = HEAP32[i4 + 48 >> 2] | 0;
  HEAP8[i9 >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
 } else {
  if (i1) {
   i7 = i4 + 48 | 0;
   HEAP32[i2 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[i7 >> 2] | 0) | 0;
   i1 = HEAP32[i4 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 15](i1, HEAP32[i4 + 40 >> 2] | 0, i2, i2 + 4 | 0, i3, i5, i5 + 8 | 0, i6) | 0) {
   case 1:
   case 2:
    {
     i3 = 11;
     break;
    }
   case 3:
    {
     HEAP8[i5 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i6 >> 2] = i5 + 1;
     i3 = 8;
     break;
    }
   default:
    i3 = 8;
   }
   L9 : do if ((i3 | 0) == 8) {
    i1 = i4 + 32 | 0;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if (i2 >>> 0 <= i5 >>> 0) {
      i2 = 1;
      i1 = 0;
      break L9;
     }
     i4 = i2 + -1 | 0;
     HEAP32[i6 >> 2] = i4;
     if ((_ungetc(HEAP8[i4 >> 0] | 0, HEAP32[i1 >> 2] | 0) | 0) == -1) {
      i3 = 11;
      break;
     }
    }
   } while (0);
   if ((i3 | 0) == 11) {
    i2 = 0;
    i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if (i2) i1 = i7; else break;
  } else i1 = i4 + 48 | 0;
  HEAP32[i1 >> 2] = i8;
  HEAP8[i9 >> 0] = 1;
  i1 = i8;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi(i4, i8) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i10 + 16 | 0;
 i6 = i10 + 4 | 0;
 i2 = i10 + 8 | 0;
 i3 = i10;
 i7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i8, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 i9 = i4 + 52 | 0;
 i1 = (HEAP8[i9 >> 0] | 0) != 0;
 do if (i7) if (i1) i1 = i8; else {
  i1 = HEAP32[i4 + 48 >> 2] | 0;
  HEAP8[i9 >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
 } else {
  if (i1) {
   i7 = i4 + 48 | 0;
   HEAP8[i2 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[i7 >> 2] | 0) | 0;
   i1 = HEAP32[i4 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 15](i1, HEAP32[i4 + 40 >> 2] | 0, i2, i2 + 1 | 0, i3, i5, i5 + 8 | 0, i6) | 0) {
   case 1:
   case 2:
    {
     i3 = 11;
     break;
    }
   case 3:
    {
     HEAP8[i5 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i6 >> 2] = i5 + 1;
     i3 = 8;
     break;
    }
   default:
    i3 = 8;
   }
   L9 : do if ((i3 | 0) == 8) {
    i1 = i4 + 32 | 0;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if (i2 >>> 0 <= i5 >>> 0) {
      i2 = 1;
      i1 = 0;
      break L9;
     }
     i4 = i2 + -1 | 0;
     HEAP32[i6 >> 2] = i4;
     if ((_ungetc(HEAP8[i4 >> 0] | 0, HEAP32[i1 >> 2] | 0) | 0) == -1) {
      i3 = 11;
      break;
     }
    }
   } while (0);
   if ((i3 | 0) == 11) {
    i2 = 0;
    i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if (i2) i1 = i7; else break;
  } else i1 = i4 + 48 | 0;
  HEAP32[i1 >> 2] = i8;
  HEAP8[i9 >> 0] = 1;
  i1 = i8;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__2L11init_wweeksEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[19760] | 0)) if (___cxa_guard_acquire(19760) | 0) {
  i2 = 19424;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 19592);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19424, 10836) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19436, 10864) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19448, 10892) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19460, 10924) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19472, 10964) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19484, 11e3) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19496, 11028) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19508, 11064) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19520, 11080) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19532, 11096) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19544, 11112) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19556, 11128) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19568, 11144) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(19580, 11160) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[19680] | 0)) if (___cxa_guard_acquire(19680) | 0) {
  i2 = 18672;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 18840);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18672, 13892) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18684, 13899) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18696, 13906) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18708, 13914) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18720, 13924) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18732, 13933) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18744, 13940) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18756, 13949) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18768, 13953) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18780, 13957) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18792, 13961) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18804, 13965) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18816, 13969) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18828, 13973) | 0;
 return;
}

function ___stdio_write(i7, i2, i1) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i10 = i12 + 32 | 0;
 i5 = i12 + 16 | 0;
 i4 = i12;
 i8 = i7 + 28 | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 i9 = i7 + 20 | 0;
 i3 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i1;
 i3 = i3 + i1 | 0;
 i6 = i7 + 60 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = 2;
 i5 = ___syscall_ret(___syscall146(146, i5 | 0) | 0) | 0;
 L1 : do if ((i3 | 0) == (i5 | 0)) i11 = 3; else {
  i2 = 2;
  while (1) {
   if ((i5 | 0) < 0) break;
   i3 = i3 - i5 | 0;
   i14 = HEAP32[i4 + 4 >> 2] | 0;
   i13 = i5 >>> 0 > i14 >>> 0;
   i4 = i13 ? i4 + 8 | 0 : i4;
   i2 = i2 + (i13 << 31 >> 31) | 0;
   i14 = i5 - (i13 ? i14 : 0) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i14;
   i13 = i4 + 4 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - i14;
   HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i10 + 4 >> 2] = i4;
   HEAP32[i10 + 8 >> 2] = i2;
   i5 = ___syscall_ret(___syscall146(146, i10 | 0) | 0) | 0;
   if ((i3 | 0) == (i5 | 0)) {
    i11 = 3;
    break L1;
   }
  }
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i4 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((i11 | 0) == 3) {
  i14 = HEAP32[i7 + 44 >> 2] | 0;
  HEAP32[i7 + 16 >> 2] = i14 + (HEAP32[i7 + 48 >> 2] | 0);
  HEAP32[i8 >> 2] = i14;
  HEAP32[i9 >> 2] = i14;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1;
 i12 = i1 + 24 | 0;
 i11 = i1 + 16 | 0;
 i10 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 13489, 1, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1;
 i16 = i14 + 23 | 0;
 i7 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i16 | 0) + 15 & -16) | 0;
 i15 = __ZNSt3__26__clocEv() | 0;
 i17 = i9;
 HEAP32[i17 >> 2] = i5;
 HEAP32[i17 + 4 >> 2] = i6;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i16, i15, i8, i9) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1 | 44) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i9, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i13, i6, i5, i8, i12, i11, i9);
 __ZNSt3__26localeD2Ev(i9);
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i12 >> 2] | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i3, i4) | 0;
 _llvm_stackrestore(i7 | 0);
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1;
 i12 = i1 + 24 | 0;
 i11 = i1 + 16 | 0;
 i10 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 13489, 1, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1;
 i16 = i14 + 23 | 0;
 i7 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i16 | 0) + 15 & -16) | 0;
 i15 = __ZNSt3__26__clocEv() | 0;
 i17 = i9;
 HEAP32[i17 >> 2] = i5;
 HEAP32[i17 + 4 >> 2] = i6;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i16, i15, i8, i9) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1 | 44) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i9, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i13, i6, i5, i8, i12, i11, i9);
 __ZNSt3__26localeD2Ev(i9);
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i12 >> 2] | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i3, i4) | 0;
 _llvm_stackrestore(i7 | 0);
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1;
 i12 = i1 + 24 | 0;
 i11 = i1 + 16 | 0;
 i10 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 13489, 0, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1 | 22;
 i16 = i14 + 1 | 0;
 i7 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i16 | 0) + 15 & -16) | 0;
 i15 = __ZNSt3__26__clocEv() | 0;
 i17 = i9;
 HEAP32[i17 >> 2] = i5;
 HEAP32[i17 + 4 >> 2] = i6;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i16, i15, i8, i9) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i9, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i13, i6, i5, i8, i12, i11, i9);
 __ZNSt3__26localeD2Ev(i9);
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i12 >> 2] | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i3, i4) | 0;
 _llvm_stackrestore(i7 | 0);
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i1 + 8 | 0;
 i8 = i1;
 i12 = i1 + 24 | 0;
 i11 = i1 + 16 | 0;
 i10 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 i14 = i3 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 13489, 0, HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i14 >> 2] | 0) >>> 9 & 1 | 22;
 i16 = i14 + 1 | 0;
 i7 = _llvm_stacksave() | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i16 | 0) + 15 & -16) | 0;
 i15 = __ZNSt3__26__clocEv() | 0;
 i17 = i9;
 HEAP32[i17 >> 2] = i5;
 HEAP32[i17 + 4 >> 2] = i6;
 i5 = i13 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i13, i16, i15, i8, i9) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i13, i5, i3) | 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((i14 << 1) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv(i9, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i13, i6, i5, i8, i12, i11, i9);
 __ZNSt3__26localeD2Ev(i9);
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i12 >> 2] | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i3, i4) | 0;
 _llvm_stackrestore(i7 | 0);
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i7, i11, i2, i3, i8) {
 i10 = i10 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12;
 i1 = HEAP32[i10 >> 2] | 0;
 L1 : do if (!i1) i1 = 0; else {
  i13 = i7;
  i4 = i2 - i13 >> 2;
  i6 = i3 + 12 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  i3 = (i3 | 0) > (i4 | 0) ? i3 - i4 | 0 : 0;
  i4 = i11;
  i13 = i4 - i13 | 0;
  i5 = i13 >> 2;
  if ((i13 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, i7, i5) | 0) != (i5 | 0)) {
   HEAP32[i10 >> 2] = 0;
   i1 = 0;
   break;
  }
  do if ((i3 | 0) > 0) {
   HEAP32[i9 >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
   HEAP32[i9 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw(i9, i3, i8);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, (HEAP8[i9 + 8 + 3 >> 0] | 0) < 0 ? HEAP32[i9 >> 2] | 0 : i9, i3) | 0) == (i3 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    break;
   } else {
    HEAP32[i10 >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    i1 = 0;
    break L1;
   }
  } while (0);
  i13 = i2 - i4 | 0;
  i2 = i13 >> 2;
  if ((i13 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, i11, i2) | 0) != (i2 | 0)) {
   HEAP32[i10 >> 2] = 0;
   i1 = 0;
   break;
  }
  HEAP32[i6 >> 2] = 0;
 } while (0);
 STACKTOP = i12;
 return i1 | 0;
}

function _mbsnrtowcs(i2, i10, i6, i1, i9) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i8 = i13;
 i11 = i13 + 1024 | 0;
 i7 = HEAP32[i10 >> 2] | 0;
 HEAP32[i11 >> 2] = i7;
 i12 = (i2 | 0) != 0;
 i4 = i12 ? i1 : 256;
 i5 = i12 ? i2 : i8;
 i3 = i7;
 L1 : do if ((i4 | 0) != 0 & (i7 | 0) != 0) {
  i1 = 0;
  i7 = i5;
  while (1) {
   i2 = i6 >>> 2;
   i5 = i2 >>> 0 >= i4 >>> 0;
   if (!(i6 >>> 0 > 131 | i5)) {
    i5 = i7;
    break L1;
   }
   i2 = i5 ? i4 : i2;
   i6 = i6 - i2 | 0;
   i2 = _mbsrtowcs(i7, i11, i2, i9) | 0;
   if ((i2 | 0) == -1) break;
   i5 = (i7 | 0) == (i8 | 0);
   i4 = i4 - (i5 ? 0 : i2) | 0;
   i5 = i5 ? i7 : i7 + (i2 << 2) | 0;
   i1 = i2 + i1 | 0;
   i3 = HEAP32[i11 >> 2] | 0;
   if ((i4 | 0) != 0 & (i3 | 0) != 0) i7 = i5; else break L1;
  }
  i1 = -1;
  i5 = i7;
  i4 = 0;
  i3 = HEAP32[i11 >> 2] | 0;
 } else i1 = 0; while (0);
 L9 : do if (i3) if ((i4 | 0) != 0 & (i6 | 0) != 0) {
  while (1) {
   i2 = _mbrtowc(i5, i3, i6, i9) | 0;
   if ((i2 + 2 | 0) >>> 0 < 3) break;
   i3 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
   HEAP32[i11 >> 2] = i3;
   i6 = i6 - i2 | 0;
   i4 = i4 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i4 | 0) != 0 & (i6 | 0) != 0)) break L9; else i5 = i5 + 4 | 0;
  }
  switch (i2 | 0) {
  case -1:
   {
    i1 = i2;
    break L9;
   }
  case 0:
   {
    HEAP32[i11 >> 2] = 0;
    break L9;
   }
  default:
   {
    HEAP32[i9 >> 2] = 0;
    break L9;
   }
  }
 } while (0);
 if (i12) HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i13;
 return i1 | 0;
}

function ___fdopen(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i9 + 40 | 0;
 i5 = i9 + 24 | 0;
 i4 = i9 + 16 | 0;
 i3 = i9;
 i7 = i9 + 56 | 0;
 if (!(_strchr(12581, HEAP8[i2 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 } else {
  i1 = _malloc(1156) | 0;
  if (!i1) i1 = 0; else {
   _memset(i1 | 0, 0, 124) | 0;
   if (!(_strchr(i2, 43) | 0)) HEAP32[i1 >> 2] = (HEAP8[i2 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr(i2, 101) | 0) {
    HEAP32[i3 >> 2] = i6;
    HEAP32[i3 + 4 >> 2] = 2;
    HEAP32[i3 + 8 >> 2] = 1;
    ___syscall221(221, i3 | 0) | 0;
   }
   if ((HEAP8[i2 >> 0] | 0) == 97) {
    HEAP32[i4 >> 2] = i6;
    HEAP32[i4 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i4 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i5 >> 2] = i6;
     HEAP32[i5 + 4 >> 2] = 4;
     HEAP32[i5 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i5 | 0) | 0;
    }
    i3 = HEAP32[i1 >> 2] | 128;
    HEAP32[i1 >> 2] = i3;
   } else i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i6;
   HEAP32[i1 + 44 >> 2] = i1 + 132;
   HEAP32[i1 + 48 >> 2] = 1024;
   i2 = i1 + 75 | 0;
   HEAP8[i2 >> 0] = -1;
   if (!(i3 & 8)) {
    HEAP32[i8 >> 2] = i6;
    HEAP32[i8 + 4 >> 2] = 21523;
    HEAP32[i8 + 8 >> 2] = i7;
    if (!(___syscall54(54, i8 | 0) | 0)) HEAP8[i2 >> 0] = 10;
   }
   HEAP32[i1 + 32 >> 2] = 4;
   HEAP32[i1 + 36 >> 2] = 6;
   HEAP32[i1 + 40 >> 2] = 5;
   HEAP32[i1 + 12 >> 2] = 5;
   if (!(HEAP32[5072] | 0)) HEAP32[i1 + 76 >> 2] = -1;
   ___ofl_add(i1) | 0;
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 if (i1 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i10 = i8 + 8 | 0;
 i6 = i10 + 3 | 0;
 i4 = HEAP8[i6 >> 0] | 0;
 i5 = i4 << 24 >> 24 < 0;
 if (i5) {
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i2 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i4 & 255;
  i2 = 1;
 }
 i7 = i9 >>> 0 > i1 >>> 0 ? i9 : i1;
 i1 = i7 >>> 0 < 2;
 i7 = i1 ? 1 : (i7 + 4 & -4) + -1 | 0;
 do if ((i7 | 0) != (i2 | 0)) {
  do if (i1) {
   i1 = HEAP32[i8 >> 2] | 0;
   if (i5) {
    i4 = 0;
    i2 = i1;
    i3 = i8;
    i5 = 15;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwm(i8, i1, (i4 & 255) + 1 | 0) | 0;
    __ZdlPv(i1);
    i5 = 18;
   }
  } else {
   i2 = i7 + 1 | 0;
   if (i2 >>> 0 > 1073741823) _abort();
   i3 = __Znwm(i2 << 2) | 0;
   if (i5) {
    i4 = 1;
    i2 = HEAP32[i8 >> 2] | 0;
    i5 = 15;
    break;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwm(i3, i8, (i4 & 255) + 1 | 0) | 0;
    i1 = i8 + 4 | 0;
    i5 = 17;
    break;
   }
  } while (0);
  if ((i5 | 0) == 15) {
   i1 = i8 + 4 | 0;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm(i3, i2, (HEAP32[i1 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv(i2);
   if (i4) {
    i2 = i7 + 1 | 0;
    i5 = 17;
   } else i5 = 18;
  }
  if ((i5 | 0) == 17) {
   HEAP32[i10 >> 2] = i2 | -2147483648;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i8 >> 2] = i3;
   break;
  } else if ((i5 | 0) == 18) {
   HEAP8[i6 >> 0] = i9;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(i5, i6, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i11 + 12 | 0;
 i9 = i11;
 i10 = i11 + 8 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i5);
 if (!(HEAP8[i9 >> 0] | 0)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i5 | 0;
 }
 i7 = (HEAP32[i5 >> 2] | 0) + -12 | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 + (HEAP32[i7 >> 2] | 0) + 24 >> 2];
 i7 = i5 + (HEAP32[i7 >> 2] | 0) | 0;
 i8 = HEAP32[i7 + 4 >> 2] | 0;
 i3 = i6 + i1 | 0;
 i2 = i7 + 76 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == -1) {
  __ZNKSt3__28ios_base6getlocEv(i4, i7);
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 21924) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 32) | 0;
  __ZNSt3__26localeD2Ev(i4);
  i1 = i1 << 24 >> 24;
  HEAP32[i2 >> 2] = i1;
 }
 HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
 if (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i4, i6, (i8 & 176 | 0) == 32 ? i3 : i6, i3, i7, i1 & 255) | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i5 | 0;
 }
 i10 = i5 + (HEAP32[(HEAP32[i5 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj(i10, HEAP32[i10 + 16 >> 2] | 5);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i5 | 0;
}

function ___dynamic_cast(i1, i2, i10, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i11 = i13;
 i9 = HEAP32[i1 >> 2] | 0;
 i12 = i1 + (HEAP32[i9 + -8 >> 2] | 0) | 0;
 i9 = HEAP32[i9 + -4 >> 2] | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i11 + 4 >> 2] = i1;
 HEAP32[i11 + 8 >> 2] = i2;
 HEAP32[i11 + 12 >> 2] = i3;
 i1 = i11 + 16 | 0;
 i2 = i11 + 20 | 0;
 i3 = i11 + 24 | 0;
 i4 = i11 + 28 | 0;
 i5 = i11 + 32 | 0;
 i6 = i11 + 40 | 0;
 i7 = i1;
 i8 = i7 + 36 | 0;
 do {
  HEAP32[i7 >> 2] = 0;
  i7 = i7 + 4 | 0;
 } while ((i7 | 0) < (i8 | 0));
 HEAP16[i1 + 36 >> 1] = 0;
 HEAP8[i1 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i9, i10, 0) | 0) {
  HEAP32[i11 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 15](i9, i11, i12, i12, 1, 0);
  i1 = (HEAP32[i3 >> 2] | 0) == 1 ? i12 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] & 3](i9, i11, i12, 1, 0);
  switch (HEAP32[i11 + 36 >> 2] | 0) {
  case 0:
   {
    i1 = (HEAP32[i6 >> 2] | 0) == 1 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
    break L1;
   }
  case 1:
   break;
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i3 >> 2] | 0) != 1) if (!((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1)) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 if (i1 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i6 = i8 + 11 | 0;
 i4 = HEAP8[i6 >> 0] | 0;
 i5 = i4 << 24 >> 24 < 0;
 if (i5) {
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i2 = (HEAP32[i8 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i4 & 255;
  i2 = 10;
 }
 i7 = i9 >>> 0 > i1 >>> 0 ? i9 : i1;
 i1 = i7 >>> 0 < 11;
 i7 = i1 ? 10 : (i7 + 16 & -16) + -1 | 0;
 do if ((i7 | 0) != (i2 | 0)) {
  do if (i1) {
   i1 = HEAP32[i8 >> 2] | 0;
   if (i5) {
    i4 = 0;
    i2 = i1;
    i3 = i8;
    i5 = 13;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm(i8, i1, (i4 & 255) + 1 | 0) | 0;
    __ZdlPv(i1);
    i5 = 16;
   }
  } else {
   i2 = i7 + 1 | 0;
   i3 = __Znwm(i2) | 0;
   if (i5) {
    i4 = 1;
    i2 = HEAP32[i8 >> 2] | 0;
    i5 = 13;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm(i3, i8, (i4 & 255) + 1 | 0) | 0;
    i1 = i8 + 4 | 0;
    i5 = 15;
    break;
   }
  } while (0);
  if ((i5 | 0) == 13) {
   i1 = i8 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm(i3, i2, (HEAP32[i1 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv(i2);
   if (i4) {
    i2 = i7 + 1 | 0;
    i5 = 15;
   } else i5 = 16;
  }
  if ((i5 | 0) == 15) {
   HEAP32[i8 + 8 >> 2] = i2 | -2147483648;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i8 >> 2] = i3;
   break;
  } else if ((i5 | 0) == 16) {
   HEAP8[i6 >> 0] = i9;
   break;
  }
 } while (0);
 return;
}

function _vfprintf(i15, i8, i1) {
 i15 = i15 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i10 = i16 + 208 | 0;
 i12 = i16 + 160 | 0;
 i13 = i16 + 80 | 0;
 i14 = i16;
 i2 = i12;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i8, i10, i13, i12) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i15 + 76 >> 2] | 0) > -1) i11 = ___lockfile(i15) | 0; else i11 = 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i9 = i1 & 32;
  if ((HEAP8[i15 + 74 >> 0] | 0) < 1) HEAP32[i15 >> 2] = i1 & -33;
  i2 = i15 + 48 | 0;
  if (!(HEAP32[i2 >> 2] | 0)) {
   i3 = i15 + 44 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i14;
   i5 = i15 + 28 | 0;
   HEAP32[i5 >> 2] = i14;
   i6 = i15 + 20 | 0;
   HEAP32[i6 >> 2] = i14;
   HEAP32[i2 >> 2] = 80;
   i7 = i15 + 16 | 0;
   HEAP32[i7 >> 2] = i14 + 80;
   i1 = _printf_core(i15, i8, i10, i13, i12) | 0;
   if (i4) {
    FUNCTION_TABLE_iiii[HEAP32[i15 + 36 >> 2] & 31](i15, 0, 0) | 0;
    i1 = (HEAP32[i6 >> 2] | 0) == 0 ? -1 : i1;
    HEAP32[i3 >> 2] = i4;
    HEAP32[i2 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
   }
  } else i1 = _printf_core(i15, i8, i10, i13, i12) | 0;
  i2 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i2 | i9;
  if (i11 | 0) ___unlockfile(i15);
  i1 = (i2 & 32 | 0) == 0 ? i1 : -1;
 }
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i8, i11, i12, i13) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i14 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i13) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i8, i11, i12); else {
  i14 = i2 + 52 | 0;
  i3 = HEAP8[i14 >> 0] | 0;
  i4 = i2 + 53 | 0;
  i5 = HEAP8[i4 >> 0] | 0;
  i10 = HEAP32[i1 + 12 >> 2] | 0;
  i6 = i1 + 16 + (i10 << 3) | 0;
  HEAP8[i14 >> 0] = 0;
  HEAP8[i4 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1 + 16 | 0, i2, i8, i11, i12, i13);
  L4 : do if ((i10 | 0) > 1) {
   i7 = i2 + 24 | 0;
   i9 = i1 + 8 | 0;
   i10 = i2 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    if (HEAP8[i10 >> 0] | 0) break L4;
    if (!(HEAP8[i14 >> 0] | 0)) {
     if (HEAP8[i4 >> 0] | 0) if (!(HEAP32[i9 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[i7 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[i9 >> 2] & 2)) break L4;
    }
    HEAP8[i14 >> 0] = 0;
    HEAP8[i4 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i8, i11, i12, i13);
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i6 >>> 0);
  } while (0);
  HEAP8[i14 >> 0] = i3;
  HEAP8[i4 >> 0] = i5;
 }
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] & 63](i5) | 0;
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 22228) | 0;
 HEAP32[i5 + 68 >> 2] = i1;
 i3 = i5 + 98 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1) | 0;
 HEAP8[i3 >> 0] = i1 & 1;
 if ((i4 & 255 | 0) == (i1 & 1 | 0)) return;
 i2 = i5 + 8 | 0;
 i4 = i5 + 96 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 i2 = (HEAP8[i4 >> 0] | 0) != 0;
 if (i1) {
  i3 = i5 + 32 | 0;
  if (i2) {
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 | 0) __ZdaPv(i1);
  }
  i2 = i5 + 97 | 0;
  HEAP8[i4 >> 0] = HEAP8[i2 >> 0] | 0;
  i4 = i5 + 60 | 0;
  HEAP32[i5 + 52 >> 2] = HEAP32[i4 >> 2];
  i5 = i5 + 56 | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  HEAP8[i2 >> 0] = 0;
  return;
 }
 if (!i2) {
  i1 = i5 + 32 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) != (i5 + 44 | 0)) {
   i3 = HEAP32[i5 + 52 >> 2] | 0;
   HEAP32[i5 + 60 >> 2] = i3;
   HEAP32[i5 + 56 >> 2] = i2;
   HEAP8[i5 + 97 >> 0] = 0;
   HEAP32[i1 >> 2] = __Znam(i3) | 0;
   HEAP8[i4 >> 0] = 1;
   return;
  }
 }
 i4 = HEAP32[i5 + 52 >> 2] | 0;
 HEAP32[i5 + 60 >> 2] = i4;
 HEAP32[i5 + 56 >> 2] = __Znam(i4) | 0;
 HEAP8[i5 + 97 >> 0] = 1;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl(i6, i7, i4) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = 0;
 i3 = i6 + 8 | 0;
 i2 = i6 + 96 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 if (HEAP8[i2 >> 0] | 0) {
  i1 = HEAP32[i6 + 32 >> 2] | 0;
  if (i1 | 0) __ZdaPv(i1);
 }
 i3 = i6 + 97 | 0;
 if (HEAP8[i3 >> 0] | 0) {
  i1 = HEAP32[i6 + 56 >> 2] | 0;
  if (i1 | 0) __ZdaPv(i1);
 }
 i1 = i6 + 52 | 0;
 HEAP32[i1 >> 2] = i4;
 do if (i4 >>> 0 > 8) {
  i1 = HEAP8[i6 + 98 >> 0] | 0;
  if ((i7 | 0) != 0 & i1 << 24 >> 24 != 0) {
   HEAP32[i6 + 32 >> 2] = i7;
   HEAP8[i2 >> 0] = 0;
   break;
  } else {
   HEAP32[i6 + 32 >> 2] = __Znam(i4) | 0;
   HEAP8[i2 >> 0] = 1;
   i5 = 12;
   break;
  }
 } else {
  HEAP32[i6 + 32 >> 2] = i6 + 44;
  HEAP32[i1 >> 2] = 8;
  HEAP8[i2 >> 0] = 0;
  i1 = HEAP8[i6 + 98 >> 0] | 0;
  i5 = 12;
 } while (0);
 if ((i5 | 0) == 12) if (!(i1 << 24 >> 24)) {
  i1 = (i4 | 0) > 8 ? i4 : 8;
  HEAP32[i6 + 60 >> 2] = i1;
  if ((i7 | 0) != 0 & i1 >>> 0 > 7) {
   i5 = 0;
   i4 = i7;
   i7 = i6 + 56 | 0;
   HEAP32[i7 >> 2] = i4;
   HEAP8[i3 >> 0] = i5;
   return i6 | 0;
  }
  i7 = 1;
  i4 = __Znam(i1) | 0;
  i5 = i6 + 56 | 0;
  HEAP32[i5 >> 2] = i4;
  HEAP8[i3 >> 0] = i7;
  return i6 | 0;
 }
 HEAP32[i6 + 60 >> 2] = 0;
 i7 = 0;
 i4 = 0;
 i5 = i6 + 56 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP8[i3 >> 0] = i7;
 return i6 | 0;
}

function _mbtowc(i1, i6, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i7;
 L1 : do if (!i6) i1 = 0; else {
  do if (i4 | 0) {
   i5 = (i1 | 0) == 0 ? i2 : i1;
   i1 = HEAP8[i6 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) {
    HEAP32[i5 >> 2] = i1 & 255;
    i1 = i1 << 24 >> 24 != 0 & 1;
    break L1;
   }
   i3 = (HEAP32[HEAP32[(___pthread_self_404() | 0) + 188 >> 2] >> 2] | 0) == 0;
   i1 = HEAP8[i6 >> 0] | 0;
   if (i3) {
    HEAP32[i5 >> 2] = i1 << 24 >> 24 & 57343;
    i1 = 1;
    break L1;
   }
   i1 = (i1 & 255) + -194 | 0;
   if (i1 >>> 0 <= 50) {
    i2 = i6 + 1 | 0;
    i3 = HEAP32[1056 + (i1 << 2) >> 2] | 0;
    if (i4 >>> 0 < 4) if (i3 & -2147483648 >>> ((i4 * 6 | 0) + -6 | 0) | 0) break;
    i1 = HEAPU8[i2 >> 0] | 0;
    i4 = i1 >>> 3;
    if ((i4 + -16 | i4 + (i3 >> 26)) >>> 0 <= 7) {
     i1 = i1 + -128 | i3 << 6;
     if ((i1 | 0) >= 0) {
      HEAP32[i5 >> 2] = i1;
      i1 = 2;
      break L1;
     }
     i2 = (HEAPU8[i6 + 2 >> 0] | 0) + -128 | 0;
     if (i2 >>> 0 <= 63) {
      i2 = i2 | i1 << 6;
      if ((i2 | 0) >= 0) {
       HEAP32[i5 >> 2] = i2;
       i1 = 3;
       break L1;
      }
      i1 = (HEAPU8[i6 + 3 >> 0] | 0) + -128 | 0;
      if (i1 >>> 0 <= 63) {
       HEAP32[i5 >> 2] = i1 | i2 << 6;
       i1 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i10 = i1 + 184 | 0;
 i9 = i1 + 192 | 0;
 i6 = i1 + 160 | 0;
 i8 = i1;
 i11 = i1 + 188 | 0;
 HEAP8[i9 >> 0] = HEAP8[13481] | 0;
 HEAP8[i9 + 1 >> 0] = HEAP8[13482] | 0;
 HEAP8[i9 + 2 >> 0] = HEAP8[13483] | 0;
 HEAP8[i9 + 3 >> 0] = HEAP8[13484] | 0;
 HEAP8[i9 + 4 >> 0] = HEAP8[13485] | 0;
 HEAP8[i9 + 5 >> 0] = HEAP8[13486] | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i10 >> 2] = i5;
 i5 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i6, 20, i7, i9, i10) | 0;
 i9 = i6 + i5 | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i6, i9, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i10, i3);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 21956) | 0;
 __ZNSt3__26localeD2Ev(i10);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i6, i9, i8) | 0;
 i5 = i8 + (i5 << 2) | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i7 | 0) == (i9 | 0) ? i5 : i8 + (i7 - i6 << 2) | 0, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _wcsnrtombs(i3, i11, i6, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i7 = i10;
 i8 = i10 + 256 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 HEAP32[i8 >> 2] = i1;
 i9 = (i3 | 0) != 0;
 i4 = i9 ? i2 : 256;
 i5 = i9 ? i3 : i7;
 i2 = i1;
 L1 : do if ((i4 | 0) != 0 & (i1 | 0) != 0) {
  i1 = 0;
  i3 = i2;
  while (1) {
   i2 = i6 >>> 0 >= i4 >>> 0;
   if (!(i2 | i6 >>> 0 > 32)) {
    i2 = i3;
    break L1;
   }
   i2 = i2 ? i4 : i6;
   i6 = i6 - i2 | 0;
   i2 = _wcsrtombs(i5, i8, i2, 0) | 0;
   if ((i2 | 0) == -1) break;
   i3 = (i5 | 0) == (i7 | 0);
   i4 = i4 - (i3 ? 0 : i2) | 0;
   i5 = i3 ? i5 : i5 + i2 | 0;
   i1 = i2 + i1 | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   if ((i4 | 0) != 0 & (i2 | 0) != 0) i3 = i2; else break L1;
  }
  i1 = -1;
  i4 = 0;
  i2 = HEAP32[i8 >> 2] | 0;
 } else i1 = 0; while (0);
 L9 : do if (i2) if ((i4 | 0) != 0 & (i6 | 0) != 0) {
  while (1) {
   i3 = _wcrtomb(i5, HEAP32[i2 >> 2] | 0, 0) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) break;
   i2 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
   HEAP32[i8 >> 2] = i2;
   i6 = i6 + -1 | 0;
   i4 = i4 - i3 | 0;
   i1 = i3 + i1 | 0;
   if (!((i4 | 0) != 0 & (i6 | 0) != 0)) break L9; else i5 = i5 + i3 | 0;
  }
  if (!i3) HEAP32[i8 >> 2] = 0; else i1 = -1;
 } while (0);
 if (i9) HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i10 = i1 + 72 | 0;
 i9 = i1 + 80 | 0;
 i6 = i1 + 48 | 0;
 i8 = i1;
 i11 = i1 + 76 | 0;
 HEAP8[i9 >> 0] = HEAP8[13481] | 0;
 HEAP8[i9 + 1 >> 0] = HEAP8[13482] | 0;
 HEAP8[i9 + 2 >> 0] = HEAP8[13483] | 0;
 HEAP8[i9 + 3 >> 0] = HEAP8[13484] | 0;
 HEAP8[i9 + 4 >> 0] = HEAP8[13485] | 0;
 HEAP8[i9 + 5 >> 0] = HEAP8[13486] | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i10 >> 2] = i5;
 i5 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i6, 20, i7, i9, i10) | 0;
 i9 = i6 + i5 | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i6, i9, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i10, i3);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 21924) | 0;
 __ZNSt3__26localeD2Ev(i10);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 7](i12, i6, i9, i8) | 0;
 i5 = i8 + i5 | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i7 | 0) == (i9 | 0) ? i5 : i8 + (i7 - i6) | 0, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i8, i1, i3, i4, i5, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i6 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = HEAP8[i2 + 11 >> 0] | 0;
 i10 = i9 << 24 >> 24 < 0;
 i1 = i10 ? HEAP32[i2 >> 2] | 0 : i2;
 i2 = i1 + (i10 ? HEAP32[i2 + 4 >> 2] | 0 : i9 & 255) | 0;
 while (1) {
  if (i1 >>> 0 >= i2 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 }
 i1 = (HEAP8[i6 + 11 >> 0] | 0) < 0 ? HEAP32[i6 >> 2] | 0 : i6;
 i3 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i4, i5, i1) | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i8 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 i2 = i1 + (_strlen(i3) | 0) | 0;
 while (1) {
  if (i1 >>> 0 >= i2 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i7;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i8;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if ((HEAP32[i6 >> 2] | 0) - i1 >> 2 >>> 0 < i4 >>> 0) {
  i1 = (i1 - (HEAP32[i3 >> 2] | 0) >> 2) + i4 | 0;
  i2 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv(i3) | 0;
  if (i2 >>> 0 < i1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i3); else {
   i9 = HEAP32[i3 >> 2] | 0;
   i10 = (HEAP32[i6 >> 2] | 0) - i9 | 0;
   i6 = i10 >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_(i5, i10 >> 2 >>> 0 < i2 >>> 1 >>> 0 ? (i6 >>> 0 < i1 >>> 0 ? i1 : i6) : i2, (HEAP32[i7 >> 2] | 0) - i9 >> 2, i3 + 16 | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm(i5, i4);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i3, i5);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev(i5);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm(i3, i4); while (0);
 STACKTOP = i8;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw(i5, i6, i1, i2, i10, i11, i12, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i4 = i4 | 0;
 var i3 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i14;
 if ((1073741806 - i6 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i5);
 i7 = i5 + 8 | 0;
 if ((HEAP8[i7 + 3 >> 0] | 0) < 0) i9 = HEAP32[i5 >> 2] | 0; else i9 = i5;
 if (i6 >>> 0 < 536870887) {
  i1 = i1 + i6 | 0;
  i3 = i6 << 1;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  i1 = i1 >>> 0 < 2 ? 2 : i1 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else i8 = i1;
 } else i8 = 1073741807;
 i3 = __Znwm(i8 << 2) | 0;
 if (i10 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm(i3, i9, i10) | 0;
 if (i12 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm(i3 + (i10 << 2) | 0, i4, i12) | 0;
 i1 = i2 - i11 | 0;
 i2 = i1 - i10 | 0;
 if (i2 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm(i3 + (i10 << 2) + (i12 << 2) | 0, i9 + (i10 << 2) + (i11 << 2) | 0, i2) | 0;
 if ((i6 | 0) != 1) __ZdlPv(i9);
 HEAP32[i5 >> 2] = i3;
 HEAP32[i7 >> 2] = i8 | -2147483648;
 i12 = i1 + i12 | 0;
 HEAP32[i5 + 4 >> 2] = i12;
 HEAP32[i13 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i3 + (i12 << 2) | 0, i13);
 STACKTOP = i14;
 return;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i7, i1, i8, i9) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = 0;
 i5 = i7 + 11 | 0;
 i3 = HEAP8[i5 >> 0] | 0;
 i6 = i7 + 4 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i4 = i3 & 255;
 do if ((i3 << 24 >> 24 < 0 ? i2 : i4) | 0) {
  if ((i1 | 0) != (i8 | 0)) {
   i2 = i8;
   i3 = i1;
   while (1) {
    i2 = i2 + -4 | 0;
    if (i3 >>> 0 >= i2 >>> 0) break;
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i2 >> 2] = i4;
    i3 = i3 + 4 | 0;
   }
   i3 = HEAP8[i5 >> 0] | 0;
   i4 = i3 & 255;
   i2 = HEAP32[i6 >> 2] | 0;
  }
  i5 = i3 << 24 >> 24 < 0;
  i7 = i5 ? HEAP32[i7 >> 2] | 0 : i7;
  i6 = i8 + -4 | 0;
  i5 = i7 + (i5 ? i2 : i4) | 0;
  i2 = i7;
  while (1) {
   i3 = HEAP8[i2 >> 0] | 0;
   i4 = i3 << 24 >> 24 | 0;
   i4 = (i4 | 0) > 0 & (i4 | 0) != 127;
   if (i1 >>> 0 >= i6 >>> 0) break;
   if (i4) if ((HEAP32[i1 >> 2] | 0) != (i3 << 24 >> 24 | 0)) {
    i10 = 11;
    break;
   }
   i1 = i1 + 4 | 0;
   i2 = (i5 - i2 | 0) > 1 ? i2 + 1 | 0 : i2;
  }
  if ((i10 | 0) == 11) {
   HEAP32[i9 >> 2] = 4;
   break;
  }
  if (i4) if (((HEAP32[i6 >> 2] | 0) + -1 | 0) >>> 0 >= i3 << 24 >> 24 >>> 0) HEAP32[i9 >> 2] = 4;
 } while (0);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i8;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i4);
 HEAP32[i4 >> 2] = 8100;
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 i1 = i4 + 52 | 0;
 i6 = i4 + 68 | 0;
 i7 = i4 + 98 | 0;
 i2 = i1;
 i3 = i2 + 44 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP16[i1 + 44 >> 1] = 0;
 HEAP8[i1 + 46 >> 0] = 0;
 i1 = i4 + 4 | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1);
 i3 = __ZNKSt3__26locale9has_facetERNS0_2idE(i5, 22228) | 0;
 __ZNSt3__26localeD2Ev(i5);
 if (!i3) {
  i7 = HEAP32[i4 >> 2] | 0;
  i7 = i7 + 12 | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  FUNCTION_TABLE_iiii[i7 & 31](i4, 0, 4096) | 0;
  STACKTOP = i8;
  return;
 }
 __ZNSt3__26localeC2ERKS0_(i5, i1);
 HEAP32[i6 >> 2] = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 22228) | 0;
 __ZNSt3__26localeD2Ev(i5);
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP8[i7 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 63](i6) | 0) & 1;
 i7 = HEAP32[i4 >> 2] | 0;
 i7 = i7 + 12 | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_iiii[i7 & 31](i4, 0, 4096) | 0;
 STACKTOP = i8;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc(i6, i7, i1, i2, i9, i10, i11, i3) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i8 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i13;
 if ((-18 - i7 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6);
 if ((HEAP8[i6 + 11 >> 0] | 0) < 0) i8 = HEAP32[i6 >> 2] | 0; else i8 = i6;
 if (i7 >>> 0 < 2147483623) {
  i4 = i1 + i7 | 0;
  i5 = i7 << 1;
  i4 = i4 >>> 0 < i5 >>> 0 ? i5 : i4;
  i4 = i4 >>> 0 < 11 ? 11 : i4 + 16 & -16;
 } else i4 = -17;
 i5 = __Znwm(i4) | 0;
 if (i9 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm(i5, i8, i9) | 0;
 if (i11 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm(i5 + i9 | 0, i3, i11) | 0;
 i1 = i2 - i10 | 0;
 i2 = i1 - i9 | 0;
 if (i2 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm(i5 + i9 + i11 | 0, i8 + i9 + i10 | 0, i2) | 0;
 if ((i7 | 0) != 10) __ZdlPv(i8);
 HEAP32[i6 >> 2] = i5;
 HEAP32[i6 + 8 >> 2] = i4 | -2147483648;
 i11 = i1 + i11 | 0;
 HEAP32[i6 + 4 >> 2] = i11;
 HEAP8[i12 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + i11 | 0, i12);
 STACKTOP = i13;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i7, i3, i4, i5, i6, i1) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[i3 + 68 >> 2] | 0;
 if (!i1) {
  i7 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i7);
  ___cxa_throw(i7 | 0, 7928, 105);
 }
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1) | 0;
 i2 = i3 + 64 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  i1 = 0;
  i2 = 0;
  i3 = -1;
  i4 = -1;
 } else if (((i4 | 0) != 0 | (i5 | 0) != 0) & (i1 | 0) < 1) {
  i1 = 0;
  i2 = 0;
  i3 = -1;
  i4 = -1;
 } else if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 63](i3) | 0) == 0 & i6 >>> 0 < 3) {
  i5 = Math_imul(i1, i4) | 0;
  if (!(___fseeko(HEAP32[i2 >> 2] | 0, (i1 | 0) > 0 ? i5 : 0, i6) | 0)) {
   i4 = ___ftello(HEAP32[i2 >> 2] | 0) | 0;
   i2 = i3 + 72 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   i3 = i4;
   i4 = ((i4 | 0) < 0) << 31 >> 31;
  } else {
   i1 = 0;
   i2 = 0;
   i3 = -1;
   i4 = -1;
  }
 } else {
  i1 = 0;
  i2 = 0;
  i3 = -1;
  i4 = -1;
 }
 i6 = i7;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i6 + 4 >> 2] = i2;
 i7 = i7 + 8 | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = i4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i10, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i11 + 4 | 0;
 i9 = i11;
 i3 = i1 + 8 | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3) | 0;
 i1 = HEAP8[i3 + 8 + 3 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i2 = HEAP32[i3 + 4 >> 2] | 0; else i2 = i1 & 255;
 i1 = HEAP8[i3 + 20 + 3 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i1 = HEAP32[i3 + 16 >> 2] | 0; else i1 = i1 & 255;
 do if ((i2 | 0) == (0 - i1 | 0)) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4; else {
  HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i4, i3, i3 + 24 | 0, i8, i7, 0) | 0) - i3 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i2 | 0) == 12 & (i1 | 0) == 0) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } while (0);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i10, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i11 + 4 | 0;
 i9 = i11;
 i3 = i1 + 8 | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3) | 0;
 i1 = HEAP8[i3 + 11 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i2 = HEAP32[i3 + 4 >> 2] | 0; else i2 = i1 & 255;
 i1 = HEAP8[i3 + 12 + 11 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i1 = HEAP32[i3 + 16 >> 2] | 0; else i1 = i1 & 255;
 do if ((i2 | 0) == (0 - i1 | 0)) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4; else {
  HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i4, i3, i3 + 24 | 0, i8, i7, 0) | 0) - i3 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i2 | 0) == 12 & (i1 | 0) == 0) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } while (0);
 STACKTOP = i11;
 return;
}

function _memchr(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i2 | 0) != 0;
 L1 : do if (i3 & (i1 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + -1 | 0;
   i3 = (i2 | 0) != 0;
   if (!(i3 & (i1 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i7 = 16;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) if (!i2) {
   i7 = 16;
   break;
  } else break;
  i3 = Math_imul(i6, 16843009) | 0;
  L13 : do if (i2 >>> 0 > 3) while (1) {
   i6 = HEAP32[i1 >> 2] ^ i3;
   if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009 | 0) break L13;
   i1 = i1 + 4 | 0;
   i2 = i2 + -4 | 0;
   if (i2 >>> 0 <= 3) {
    i7 = 11;
    break;
   }
  } else i7 = 11; while (0);
  if ((i7 | 0) == 11) if (!i2) {
   i7 = 16;
   break;
  }
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break L8;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i7 = 16;
    break;
   } else i1 = i1 + 1 | 0;
  }
 } while (0);
 if ((i7 | 0) == 16) i1 = 0;
 return i1 | 0;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i5 + 32 | 0;
 i4 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i6 = i5;
 i5 = i5 + 36 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (i1 | 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  if (i3 | 0) {
   i1 = i3 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!((i2 & -256 | 0) == 1126902528 & (i1 | 0) == 1129074247)) {
    HEAP32[i4 >> 2] = 15543;
    _abort_message(15493, i4);
   }
   if ((i2 | 0) == 1126902529 & (i1 | 0) == 1129074247) i1 = HEAP32[i3 + 44 >> 2] | 0; else i1 = i3 + 80 | 0;
   HEAP32[i5 >> 2] = i1;
   i4 = HEAP32[i3 >> 2] | 0;
   i1 = HEAP32[i4 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[1966] | 0) + 16 >> 2] & 31](7864, i4, i5) | 0) {
    i8 = HEAP32[i5 >> 2] | 0;
    i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 63](i8) | 0;
    HEAP32[i6 >> 2] = 15543;
    HEAP32[i6 + 4 >> 2] = i1;
    HEAP32[i6 + 8 >> 2] = i8;
    _abort_message(15407, i6);
   } else {
    HEAP32[i8 >> 2] = 15543;
    HEAP32[i8 + 4 >> 2] = i1;
    _abort_message(15452, i8);
   }
  }
 }
 _abort_message(15531, i7);
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoll_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  L7 : do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) {
   do if ((i3 | 0) == 34) {
    HEAP32[i5 >> 2] = 4;
    if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0) {
     i1 = 2147483647;
     break L7;
    }
   } else {
    if ((i2 | 0) < -1 | (i2 | 0) == -1 & i1 >>> 0 < 2147483648) {
     HEAP32[i5 >> 2] = 4;
     break;
    }
    if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 2147483647) {
     HEAP32[i5 >> 2] = 4;
     i1 = 2147483647;
     break L7;
    } else break L7;
   } while (0);
   i1 = -2147483648;
  } else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 }
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i3, i7, i1, i2, i4, i5, i6) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i1 = i8;
 i2 = i8 + 400 | 0;
 HEAP32[i2 >> 2] = i1 + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc(i3 + 8 | 0, i1, i2, i4, i5, i6);
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 while (1) {
  if ((i5 | 0) == (i6 | 0)) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if (!i1) i1 = 0; else {
   i3 = i1 + 24 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
    i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i2) | 0;
    i2 = FUNCTION_TABLE_iii[i7 & 31](i1, i2) | 0;
   } else {
    HEAP32[i3 >> 2] = i4 + 4;
    HEAP32[i4 >> 2] = i2;
    i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i2) | 0;
   }
   i7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   i1 = i7 ? 0 : i1;
  }
  i5 = i5 + 4 | 0;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i3, i7, i1, i2, i4, i5, i6) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i1 = i8;
 i2 = i8 + 100 | 0;
 HEAP32[i2 >> 2] = i1 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i3 + 8 | 0, i1, i2, i4, i5, i6);
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 while (1) {
  if ((i5 | 0) == (i6 | 0)) break;
  i2 = HEAP8[i5 >> 0] | 0;
  if (!i1) i1 = 0; else {
   i3 = i1 + 24 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
    i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
    i2 = FUNCTION_TABLE_iii[i7 & 31](i1, i2) | 0;
   } else {
    HEAP32[i3 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i2;
    i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
   }
   i7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   i1 = i7 ? 0 : i1;
  }
  i5 = i5 + 1 | 0;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i7, i6);
 do if (HEAP8[i7 >> 0] | 0) {
  i2 = HEAP32[i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  i3 = i2;
  if (i2 | 0) {
   i4 = i3 + 24 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) {
    i5 = HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0;
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
    i1 = FUNCTION_TABLE_iii[i5 & 31](i3, i1) | 0;
   } else {
    HEAP32[i4 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i1;
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
   }
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
  }
  i5 = i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i5, HEAP32[i5 + 16 >> 2] | 1);
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i7);
 STACKTOP = i8;
 return i6 | 0;
}

function ___fwritex(i7, i2, i6) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = 0;
 i1 = i6 + 16 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) if (!(___towrite(i6) | 0)) {
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = 5;
 } else i1 = 0; else i4 = 5;
 L5 : do if ((i4 | 0) == 5) {
  i8 = i6 + 20 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = i5;
  if ((i3 - i5 | 0) >>> 0 < i2 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 31](i6, i7, i2) | 0;
   break;
  }
  L10 : do if ((HEAP8[i6 + 75 >> 0] | 0) < 0 | (i2 | 0) == 0) {
   i4 = 0;
   i3 = i7;
  } else {
   i5 = i2;
   while (1) {
    i3 = i5 + -1 | 0;
    if ((HEAP8[i7 + i3 >> 0] | 0) == 10) break;
    if (!i3) {
     i4 = 0;
     i3 = i7;
     break L10;
    } else i5 = i3;
   }
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 31](i6, i7, i5) | 0;
   if (i1 >>> 0 < i5 >>> 0) break L5;
   i4 = i5;
   i3 = i7 + i5 | 0;
   i2 = i2 - i5 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
  } while (0);
  _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
  i1 = i4 + i2 | 0;
 } while (0);
 return i1 | 0;
}

function _fread(i2, i7, i1, i8) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0;
 i10 = 0;
 i9 = Math_imul(i1, i7) | 0;
 i1 = (i7 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i8 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i8) | 0; else i6 = 0;
 i3 = i8 + 74 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i4 + 255 | i4;
 i3 = i8 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = (HEAP32[i8 + 8 >> 2] | 0) - i4 | 0;
 if ((i5 | 0) > 0) {
  i5 = i5 >>> 0 < i9 >>> 0 ? i5 : i9;
  _memcpy(i2 | 0, i4 | 0, i5 | 0) | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i5;
  i3 = i9 - i5 | 0;
  i2 = i2 + i5 | 0;
 } else i3 = i9;
 L7 : do if (!i3) i10 = 13; else {
  i5 = i8 + 32 | 0;
  while (1) {
   if (___toread(i8) | 0) break;
   i4 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 31](i8, i2, i3) | 0;
   if ((i4 + 1 | 0) >>> 0 < 2) break;
   i3 = i3 - i4 | 0;
   if (!i3) {
    i10 = 13;
    break L7;
   } else i2 = i2 + i4 | 0;
  }
  if (i6 | 0) ___unlockfile(i8);
  i1 = ((i9 - i3 | 0) >>> 0) / (i7 >>> 0) | 0;
 } while (0);
 if ((i10 | 0) == 13) if (i6) ___unlockfile(i8);
 return i1 | 0;
}

function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 do if (!i1) i1 = 1; else {
  if (i2 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i2;
   i1 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_401() | 0) + 188 >> 2] >> 2] | 0)) if ((i2 & -128 | 0) == 57216) {
   HEAP8[i1 >> 0] = i2;
   i1 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
  if (i2 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i2 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i2 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i2 >>> 0 < 55296 | (i2 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i2 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i2 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i2 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i2 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i2 & 63 | 128;
   i1 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i8 = i9 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 i2 = i6 + 8 | 0;
 i5 = i2 + 3 | 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i3 = i1 << 24 >> 24 < 0;
 if (i3) {
  i4 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i4 = i1 & 255;
  i1 = 1;
 }
 if ((i4 | 0) == (i1 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm(i6, i1, 1, i1, i1, 0, 0);
  if ((HEAP8[i5 >> 0] | 0) < 0) i2 = 8; else i2 = 7;
 } else if (i3) i2 = 8; else i2 = 7;
 if ((i2 | 0) == 7) {
  HEAP8[i5 >> 0] = i4 + 1;
  i1 = i6;
 } else if ((i2 | 0) == 8) {
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 + 4 >> 2] = i4 + 1;
 }
 i6 = i1 + (i4 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i7);
 HEAP32[i8 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i6 + 4 | 0, i8);
 STACKTOP = i9;
 return;
}

function _vsnprintf(i2, i1, i8, i9) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i7 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i11 + 124 | 0;
 i10 = i11;
 i4 = i10;
 i5 = 8596;
 i6 = i4 + 124 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i2 = i3;
  i1 = 1;
  i7 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i1 = -1;
 } else i7 = 4;
 if ((i7 | 0) == 4) {
  i7 = -2 - i2 | 0;
  i7 = i1 >>> 0 > i7 >>> 0 ? i7 : i1;
  HEAP32[i10 + 48 >> 2] = i7;
  i3 = i10 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i10 + 44 >> 2] = i2;
  i1 = i2 + i7 | 0;
  i2 = i10 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i10 + 28 >> 2] = i1;
  i1 = _vfprintf(i10, i8, i9) | 0;
  if (i7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP8[i10 + (((i10 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm(i4, i5, i1, i3, i8, i9, i10) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i11 = 0;
 if ((1073741807 - i5 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i4);
 i11 = i4 + 8 | 0;
 if ((HEAP8[i11 + 3 >> 0] | 0) < 0) i7 = HEAP32[i4 >> 2] | 0; else i7 = i4;
 if (i5 >>> 0 < 536870887) {
  i1 = i1 + i5 | 0;
  i2 = i5 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i1 = i1 >>> 0 < 2 ? 2 : i1 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else i6 = i1;
 } else i6 = 1073741807;
 i2 = __Znwm(i6 << 2) | 0;
 if (i8 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm(i2, i7, i8) | 0;
 i1 = i3 - i9 - i8 | 0;
 if (i1 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm(i2 + (i8 << 2) + (i10 << 2) | 0, i7 + (i8 << 2) + (i9 << 2) | 0, i1) | 0;
 if ((i5 | 0) != 1) __ZdlPv(i7);
 HEAP32[i4 >> 2] = i2;
 HEAP32[i11 >> 2] = i6 | -2147483648;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm(i7, i5, i6) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 i2 = i7 + 8 | 0;
 i9 = i2 + 3 | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 i4 = i1 << 24 >> 24 < 0;
 if (i4) {
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  i1 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i3 = i1 & 255;
  i1 = 1;
 }
 if ((i1 - i3 | 0) >>> 0 < i6 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw(i7, i1, i3 + i6 - i1 | 0, i3, i3, 0, i6, i5); else if (i6 | 0) {
  if (i4) i2 = HEAP32[i7 >> 2] | 0; else i2 = i7;
  __ZNSt3__211char_traitsIwE4copyEPwPKwm(i2 + (i3 << 2) | 0, i5, i6) | 0;
  i1 = i3 + i6 | 0;
  if ((HEAP8[i9 >> 0] | 0) < 0) HEAP32[i7 + 4 >> 2] = i1; else HEAP8[i9 >> 0] = i1;
  HEAP32[i8 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i2 + (i1 << 2) | 0, i8);
 }
 STACKTOP = i10;
 return i7 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i7 = i8 + 1 | 0;
 HEAP8[i6 >> 0] = i1;
 i4 = i5 + 11 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 if (i2) {
  i3 = HEAP32[i5 + 4 >> 2] | 0;
  i1 = (HEAP32[i5 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i3 = i1 & 255;
  i1 = 10;
 }
 if ((i3 | 0) == (i1 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(i5, i1, 1, i1, i1, 0, 0);
  if ((HEAP8[i4 >> 0] | 0) < 0) i2 = 8; else i2 = 7;
 } else if (i2) i2 = 8; else i2 = 7;
 if ((i2 | 0) == 7) {
  HEAP8[i4 >> 0] = i3 + 1;
  i1 = i5;
 } else if ((i2 | 0) == 8) {
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 + 4 >> 2] = i3 + 1;
 }
 i5 = i1 + i3 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i6);
 HEAP8[i7 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + 1 | 0, i7);
 STACKTOP = i8;
 return;
}

function _memset(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = i5 + i4 | 0;
 i6 = i6 & 255;
 if ((i4 | 0) >= 67) {
  while (i5 & 3) {
   HEAP8[i5 >> 0] = i6;
   i5 = i5 + 1 | 0;
  }
  i1 = i3 & -4 | 0;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  i2 = i1 - 64 | 0;
  while ((i5 | 0) <= (i2 | 0)) {
   HEAP32[i5 >> 2] = i7;
   HEAP32[i5 + 4 >> 2] = i7;
   HEAP32[i5 + 8 >> 2] = i7;
   HEAP32[i5 + 12 >> 2] = i7;
   HEAP32[i5 + 16 >> 2] = i7;
   HEAP32[i5 + 20 >> 2] = i7;
   HEAP32[i5 + 24 >> 2] = i7;
   HEAP32[i5 + 28 >> 2] = i7;
   HEAP32[i5 + 32 >> 2] = i7;
   HEAP32[i5 + 36 >> 2] = i7;
   HEAP32[i5 + 40 >> 2] = i7;
   HEAP32[i5 + 44 >> 2] = i7;
   HEAP32[i5 + 48 >> 2] = i7;
   HEAP32[i5 + 52 >> 2] = i7;
   HEAP32[i5 + 56 >> 2] = i7;
   HEAP32[i5 + 60 >> 2] = i7;
   i5 = i5 + 64 | 0;
  }
  while ((i5 | 0) < (i1 | 0)) {
   HEAP32[i5 >> 2] = i7;
   i5 = i5 + 4 | 0;
  }
 }
 while ((i5 | 0) < (i3 | 0)) {
  HEAP8[i5 >> 0] = i6;
  i5 = i5 + 1 | 0;
 }
 return i3 - i4 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i10;
 i1 = i7 + 8 | 0;
 i6 = i1 + 3 | 0;
 i3 = HEAP8[i6 >> 0] | 0;
 i4 = i3 << 24 >> 24 < 0;
 if (i4) i2 = (HEAP32[i1 >> 2] & 2147483647) + -1 | 0; else i2 = 1;
 do if (i2 >>> 0 < i9 >>> 0) {
  if (i4) i1 = HEAP32[i7 + 4 >> 2] | 0; else i1 = i3 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw(i7, i2, i9 - i2 | 0, i1, 0, i1, i9, i8);
 } else {
  if (i4) i1 = HEAP32[i7 >> 2] | 0; else i1 = i7;
  __ZNSt3__211char_traitsIwE4moveEPwPKwm(i1, i8, i9) | 0;
  HEAP32[i5 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i1 + (i9 << 2) | 0, i5);
  if ((HEAP8[i6 >> 0] | 0) < 0) {
   HEAP32[i7 + 4 >> 2] = i9;
   break;
  } else {
   HEAP8[i6 >> 0] = i9;
   break;
  }
 } while (0);
 STACKTOP = i10;
 return i7 | 0;
}

function ___stdio_read(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i9 + 16 | 0;
 i4 = i9;
 HEAP32[i4 >> 2] = i6;
 i2 = i4 + 4 | 0;
 i8 = i5 + 48 | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 HEAP32[i2 >> 2] = i7 - ((i10 | 0) != 0 & 1);
 i3 = i5 + 44 | 0;
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 12 >> 2] = i10;
 HEAP32[i1 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = 2;
 i1 = ___syscall_ret(___syscall145(145, i1 | 0) | 0) | 0;
 if ((i1 | 0) < 1) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i1 & 48 ^ 16; else {
  i4 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 > i4 >>> 0) {
   i2 = HEAP32[i3 >> 2] | 0;
   i3 = i5 + 4 | 0;
   HEAP32[i3 >> 2] = i2;
   HEAP32[i5 + 8 >> 2] = i2 + (i1 - i4);
   if (!(HEAP32[i8 >> 2] | 0)) i1 = i7; else {
    HEAP32[i3 >> 2] = i2 + 1;
    HEAP8[i6 + (i7 + -1) >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i7;
   }
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc(i6, i3, i5) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 if (i3 | 0) {
  i8 = i6 + 11 | 0;
  i1 = HEAP8[i8 >> 0] | 0;
  if (i1 << 24 >> 24 < 0) {
   i4 = HEAP32[i6 + 4 >> 2] | 0;
   i2 = (HEAP32[i6 + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   i4 = i1 & 255;
   i2 = 10;
  }
  if ((i2 - i4 | 0) >>> 0 < i3 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(i6, i2, i4 + i3 - i2 | 0, i4, i4, 0, 0);
   i1 = HEAP8[i8 >> 0] | 0;
  }
  if (i1 << 24 >> 24 < 0) i2 = HEAP32[i6 >> 2] | 0; else i2 = i6;
  __ZNSt3__211char_traitsIcE6assignEPcmc(i2 + i4 | 0, i3, i5) | 0;
  i1 = i4 + i3 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) HEAP32[i6 + 4 >> 2] = i1; else HEAP8[i8 >> 0] = i1;
  HEAP8[i7 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + i1 | 0, i7);
 }
 STACKTOP = i9;
 return i6 | 0;
}

function ___shgetc(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = i6 + 104 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) i7 = 3; else if ((HEAP32[i6 + 108 >> 2] | 0) < (i1 | 0)) i7 = 3; else i7 = 4;
 if ((i7 | 0) == 3) {
  i1 = ___uflow(i6) | 0;
  if ((i1 | 0) < 0) i7 = 4; else {
   i2 = HEAP32[i2 >> 2] | 0;
   i5 = HEAP32[i6 + 8 >> 2] | 0;
   if (!i2) {
    i3 = i5;
    i7 = 9;
   } else {
    i4 = HEAP32[i6 + 4 >> 2] | 0;
    i2 = i2 - (HEAP32[i6 + 108 >> 2] | 0) | 0;
    i3 = i5;
    if ((i5 - i4 | 0) < (i2 | 0)) i7 = 9; else HEAP32[i6 + 100 >> 2] = i4 + (i2 + -1);
   }
   if ((i7 | 0) == 9) HEAP32[i6 + 100 >> 2] = i5;
   i2 = i6 + 4 | 0;
   if (!i3) i2 = HEAP32[i2 >> 2] | 0; else {
    i2 = HEAP32[i2 >> 2] | 0;
    i6 = i6 + 108 | 0;
    HEAP32[i6 >> 2] = i3 + 1 - i2 + (HEAP32[i6 >> 2] | 0);
   }
   i2 = i2 + -1 | 0;
   if ((i1 | 0) != (HEAPU8[i2 >> 0] | 0 | 0)) HEAP8[i2 >> 0] = i1;
  }
 }
 if ((i7 | 0) == 4) {
  HEAP32[i6 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i1 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 63](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP8[i12 + 8 + 3 >> 0] | 0;
 i13 = i3 << 24 >> 24 < 0;
 i2 = i13 ? HEAP32[i12 >> 2] | 0 : i12;
 i3 = i2 + ((i13 ? HEAP32[i12 + 4 >> 2] | 0 : i3 & 255) << 2) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i9, i8, i4, i5, i6, i2, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i1 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 63](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP8[i12 + 11 >> 0] | 0;
 i13 = i3 << 24 >> 24 < 0;
 i2 = i13 ? HEAP32[i12 >> 2] | 0 : i12;
 i3 = i2 + (i13 ? HEAP32[i12 + 4 >> 2] | 0 : i3 & 255) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i9, i8, i4, i5, i6, i2, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(i6, i4, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i8 = i6 + 11 | 0;
 i1 = HEAP8[i8 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 if (i2) {
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = (HEAP32[i6 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i3 = i1 & 255;
  i1 = 10;
 }
 if ((i1 - i3 | 0) >>> 0 < i5 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc(i6, i1, i3 + i5 - i1 | 0, i3, i3, 0, i5, i4); else if (i5 | 0) {
  if (i2) i2 = HEAP32[i6 >> 2] | 0; else i2 = i6;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm(i2 + i3 | 0, i4, i5) | 0;
  i1 = i3 + i5 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) HEAP32[i6 + 4 >> 2] = i1; else HEAP8[i8 >> 0] = i1;
  HEAP8[i7 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + i1 | 0, i7);
 }
 STACKTOP = i9;
 return i6 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm(i6, i7, i8) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i9;
 i5 = i6 + 11 | 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 if (i2) i3 = (HEAP32[i6 + 8 >> 2] & 2147483647) + -1 | 0; else i3 = 10;
 do if (i3 >>> 0 < i8 >>> 0) {
  if (i2) i1 = HEAP32[i6 + 4 >> 2] | 0; else i1 = i1 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc(i6, i3, i8 - i3 | 0, i1, 0, i1, i8, i7);
 } else {
  if (i2) i1 = HEAP32[i6 >> 2] | 0; else i1 = i6;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm(i1, i7, i8) | 0;
  HEAP8[i4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i8 | 0, i4);
  if ((HEAP8[i5 >> 0] | 0) < 0) {
   HEAP32[i6 + 4 >> 2] = i8;
   break;
  } else {
   HEAP8[i5 >> 0] = i8;
   break;
  }
 } while (0);
 STACKTOP = i9;
 return i6 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   break;
  }
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 65535 | (i3 | 0) == 34) {
   HEAP32[i5 >> 2] = 4;
   i1 = -1;
   break;
  } else {
   i1 = i1 & 65535;
   break;
  } else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i4, i7, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i9;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i7 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  i6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i5, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i6;
  if ((HEAP32[i5 >> 2] | 0) == (i4 | 0)) {
   if ((i3 | 0) == 34) {
    i1 = -1;
    i2 = -1;
    i8 = 8;
   }
  } else {
   i1 = 0;
   i2 = 0;
   i8 = 8;
  }
  if ((i8 | 0) == 8) HEAP32[i7 >> 2] = 4;
 } while (0);
 setTempRet0(i2 | 0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i1 = i3 + 64 | 0;
 if (HEAP32[i1 >> 2] | 0) if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 63](i3) | 0)) if (!(___fseeko(HEAP32[i1 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0, 0) | 0)) {
  i5 = i4;
  i1 = HEAP32[i5 + 4 >> 2] | 0;
  i3 = i3 + 72 | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i3 + 4 >> 2] = i1;
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  return;
 } else {
  i5 = i2;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  i5 = i2 + 8 | 0;
  HEAP32[i5 >> 2] = -1;
  HEAP32[i5 + 4 >> 2] = -1;
  return;
 }
 i5 = i2;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 i5 = i2 + 8 | 0;
 HEAP32[i5 >> 2] = -1;
 HEAP32[i5 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   break;
  }
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i5 >> 2] = 4;
   i1 = -1;
   break;
  } else break; else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   break;
  }
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i5 >> 2] = 4;
   i1 = -1;
   break;
  } else break; else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function ___newlocale(i7, i8, i1) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i9;
 L1 : do if (!(___loc_is_allocated(i1) | 0)) {
  i5 = (i1 | 0) != 0;
  i3 = 0;
  i4 = 0;
  do {
   i2 = 1 << i4 & i7;
   if (i5 & (i2 | 0) == 0) i2 = HEAP32[i1 + (i4 << 2) >> 2] | 0; else i2 = ___get_locale(i4, (i2 | 0) == 0 ? 22372 : i8) | 0;
   i3 = i3 + ((i2 | 0) != 0 & 1) | 0;
   HEAP32[i6 + (i4 << 2) >> 2] = i2;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 6);
  switch (i3 & 2147483647 | 0) {
  case 0:
   {
    i1 = 20256;
    break L1;
   }
  case 1:
   {
    if ((HEAP32[i6 >> 2] | 0) == 8156) {
     i1 = 8184;
     break L1;
    }
    break;
   }
  default:
   {}
  }
 } else {
  i2 = 0;
  do {
   if (1 << i2 & i7 | 0) HEAP32[i1 + (i2 << 2) >> 2] = ___get_locale(i2, i8) | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 6);
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i6) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 i5 = i6 - i2 >> 2;
 if (i5 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 do if (i5 >>> 0 < 2) {
  HEAP8[i3 + 8 + 3 >> 0] = i5;
  i1 = i3;
 } else {
  i4 = i5 + 4 & -4;
  if (i4 >>> 0 > 1073741823) _abort(); else {
   i1 = __Znwm(i4 << 2) | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i3 + 8 >> 2] = i4 | -2147483648;
   HEAP32[i3 + 4 >> 2] = i5;
   break;
  }
 } while (0);
 while (1) {
  if ((i2 | 0) == (i6 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i2);
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i7);
 STACKTOP = i8;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(i3, i2, i6) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 i5 = i6 - i2 >> 2;
 if (i5 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 do if (i5 >>> 0 < 2) {
  HEAP8[i3 + 8 + 3 >> 0] = i5;
  i1 = i3;
 } else {
  i4 = i5 + 4 & -4;
  if (i4 >>> 0 > 1073741823) _abort(); else {
   i1 = __Znwm(i4 << 2) | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i3 + 8 >> 2] = i4 | -2147483648;
   HEAP32[i3 + 4 >> 2] = i5;
   break;
  }
 } while (0);
 while (1) {
  if ((i2 | 0) == (i6 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i2);
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i7);
 STACKTOP = i8;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i3, i4, i5, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i3 + 8 >> 2] | 0, i2) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i3, i4, i5); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i3 >> 2] | 0, i2) | 0) {
  if ((HEAP32[i3 + 16 >> 2] | 0) != (i4 | 0)) {
   i1 = i3 + 20 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) {
    HEAP32[i3 + 32 >> 2] = i5;
    HEAP32[i1 >> 2] = i4;
    i5 = i3 + 40 | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    if ((HEAP32[i3 + 36 >> 2] | 0) == 1) if ((HEAP32[i3 + 24 >> 2] | 0) == 2) HEAP8[i3 + 54 >> 0] = 1;
    HEAP32[i3 + 44 >> 2] = 4;
    break;
   }
  }
  if ((i5 | 0) == 1) HEAP32[i3 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 28 | 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i6 | 0)) break;
  i3 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (i3 >>> 0 < i4 >>> 0) {
   i4 = i4 - i3 >> 2;
   i10 = i6 - i2 | 0;
   i4 = (i10 | 0) < (i4 | 0) ? i10 : i4;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm(i3, i1, i4) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (i4 << 2);
   i1 = i1 + (i4 << 2) | 0;
   i2 = i4 + i2 | 0;
  } else {
   i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0;
   i10 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[i4 & 31](i5, i10) | 0) == (i7 | 0)) break;
   i1 = i1 + 4 | 0;
   i2 = i2 + 1 | 0;
  }
 }
 return i2 | 0;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } else {
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoll_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = getTempRet0() | 0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) {
   if ((i3 | 0) == 34) {
    HEAP32[i5 >> 2] = 4;
    i2 = (i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0;
    i1 = i2 ? -1 : 0;
    i2 = i2 ? 2147483647 : -2147483648;
   }
  } else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   i2 = 0;
  }
 }
 setTempRet0(i2 | 0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i2, i1, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i1;
 i7 = i8;
 i3 = i6 - i4 | 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i3 >>> 0 < 11) {
  HEAP8[i2 + 11 >> 0] = i3;
  i5 = i2;
 } else {
  i9 = i3 + 16 & -16;
  i5 = __Znwm(i9) | 0;
  HEAP32[i2 >> 2] = i5;
  HEAP32[i2 + 8 >> 2] = i9 | -2147483648;
  HEAP32[i2 + 4 >> 2] = i3;
 }
 i3 = i6 - i4 | 0;
 i2 = i5;
 while (1) {
  if ((i1 | 0) == (i6 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2, i1);
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 HEAP8[i7 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + i3 | 0, i7);
 STACKTOP = i8;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(i2, i1, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i1;
 i7 = i8;
 i3 = i6 - i4 | 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i3 >>> 0 < 11) {
  HEAP8[i2 + 11 >> 0] = i3;
  i5 = i2;
 } else {
  i9 = i3 + 16 & -16;
  i5 = __Znwm(i9) | 0;
  HEAP32[i2 >> 2] = i5;
  HEAP32[i2 + 8 >> 2] = i9 | -2147483648;
  HEAP32[i2 + 4 >> 2] = i3;
 }
 i3 = i6 - i4 | 0;
 i2 = i5;
 while (1) {
  if ((i1 | 0) == (i6 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2, i1);
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 HEAP8[i7 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + i3 | 0, i7);
 STACKTOP = i8;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 28 | 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i6 | 0)) break;
  i3 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (i3 >>> 0 < i4 >>> 0) {
   i4 = i4 - i3 | 0;
   i10 = i6 - i2 | 0;
   i4 = (i10 | 0) < (i4 | 0) ? i10 : i4;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm(i3, i1, i4) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i4;
   i1 = i1 + i4 | 0;
   i2 = i4 + i2 | 0;
  } else {
   i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0;
   i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[i4 & 31](i5, i10) | 0) == (i7 | 0)) break;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
  }
 }
 return i2 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i5, i6); else {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i3 = i1 + 16 + (i4 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1 + 16 | 0, i2, i5, i6);
  if ((i4 | 0) > 1) {
   i4 = i2 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i5, i6);
    if (HEAP8[i4 >> 0] | 0) break L1;
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i3 >>> 0);
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i1, i5, i3, i2, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 HEAP8[i5 + 53 >> 0] = 1;
 do if ((HEAP32[i5 + 4 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i5 + 52 >> 0] = 1;
  i1 = i5 + 16 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i5 + 24 >> 2] = i4;
   HEAP32[i5 + 36 >> 2] = 1;
   if (!((i4 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  if ((i2 | 0) != (i3 | 0)) {
   i4 = i5 + 36 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  i2 = i5 + 24 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == 2) {
   HEAP32[i2 >> 2] = i4;
   i1 = i4;
  }
  if ((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0) HEAP8[i5 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(i5, i6, i1, i4, i8, i9, i10) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i7 = 0;
 if ((-17 - i6 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i5);
 if ((HEAP8[i5 + 11 >> 0] | 0) < 0) i7 = HEAP32[i5 >> 2] | 0; else i7 = i5;
 if (i6 >>> 0 < 2147483623) {
  i2 = i1 + i6 | 0;
  i3 = i6 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwm(i2) | 0;
 if (i8 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm(i3, i7, i8) | 0;
 i1 = i4 - i9 - i8 | 0;
 if (i1 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm(i3 + i8 + i10 | 0, i7 + i8 + i9 | 0, i1) | 0;
 if ((i6 | 0) != 10) __ZdlPv(i7);
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i2 | -2147483648;
 return;
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i4 & 255;
 L1 : do if (!i3) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) {
   i2 = i4 & 255;
   do {
    i5 = HEAP8[i1 >> 0] | 0;
    if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break L1;
    i1 = i1 + 1 | 0;
   } while ((i1 & 3 | 0) != 0);
  }
  i3 = Math_imul(i3, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i5 = i2 ^ i3;
   if ((i5 & -2139062144 ^ -2139062144) & i5 + -16843009 | 0) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0)); while (0);
  i2 = i4 & 255;
  while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i2 & 1024) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i6 = i2 & 260;
 i4 = i2 & 16384;
 i5 = (i6 | 0) == 260;
 if (i5) i7 = 0; else {
  HEAP8[i1 >> 0] = 46;
  HEAP8[i1 + 1 >> 0] = 42;
  i7 = 1;
  i1 = i1 + 2 | 0;
 }
 while (1) {
  i2 = HEAP8[i3 >> 0] | 0;
  if (!(i2 << 24 >> 24)) break;
  HEAP8[i1 >> 0] = i2;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 L14 : do switch (i6 & 511) {
 case 4:
  {
   i2 = i4 >>> 9 & 255 ^ 102;
   break;
  }
 case 256:
  {
   i2 = i4 >>> 9 & 255 ^ 101;
   break;
  }
 default:
  {
   i2 = i4 >>> 9 & 255;
   if (i5) {
    i2 = i2 ^ 97;
    break L14;
   } else {
    i2 = i2 ^ 103;
    break L14;
   }
  }
 } while (0);
 HEAP8[i1 >> 0] = i2;
 return i7 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i7;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i4, i1, 0) | 0) i1 = 1; else if (!i1) i1 = 0; else {
  i1 = ___dynamic_cast(i1, 7888, 7872, 0) | 0;
  if (!i1) i1 = 0; else {
   i2 = i6 + 4 | 0;
   i3 = i2 + 52 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i3 | 0));
   HEAP32[i6 >> 2] = i1;
   HEAP32[i6 + 8 >> 2] = i4;
   HEAP32[i6 + 12 >> 2] = -1;
   HEAP32[i6 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 15](i1, i6, HEAP32[i5 >> 2] | 0, 1);
   if ((HEAP32[i6 + 24 >> 2] | 0) == 1) {
    HEAP32[i5 >> 2] = HEAP32[i6 + 16 >> 2];
    i1 = 1;
   } else i1 = 0;
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 16 | 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) >= (i6 | 0)) break;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if (i2 >>> 0 < i3 >>> 0) {
   i3 = i3 - i2 >> 2;
   i9 = i6 - i4 | 0;
   i3 = (i9 | 0) < (i3 | 0) ? i9 : i3;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm(i1, i2, i3) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (i3 << 2);
   i1 = i1 + (i3 << 2) | 0;
   i2 = i3;
  } else {
   i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 63](i5) | 0;
   if ((i2 | 0) == -1) break;
   HEAP32[i1 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(i2) | 0;
   i1 = i1 + 4 | 0;
   i2 = 1;
  }
  i4 = i2 + i4 | 0;
 }
 return i4 | 0;
}

function _fputc(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 if ((HEAP32[i7 + 76 >> 2] | 0) < 0) i5 = 3; else if (!(___lockfile(i7) | 0)) i5 = 3; else {
  i2 = i6 & 255;
  i1 = i6 & 255;
  if ((i1 | 0) == (HEAP8[i7 + 75 >> 0] | 0)) i5 = 10; else {
   i3 = i7 + 20 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i3 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i2;
   } else i5 = 10;
  }
  if ((i5 | 0) == 10) i1 = ___overflow(i7, i6) | 0;
  ___unlockfile(i7);
 }
 do if ((i5 | 0) == 3) {
  i4 = i6 & 255;
  i1 = i6 & 255;
  if ((i1 | 0) != (HEAP8[i7 + 75 >> 0] | 0)) {
   i2 = i7 + 20 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i4;
    break;
   }
  }
  i1 = ___overflow(i7, i6) | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 16 | 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) >= (i6 | 0)) break;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if (i2 >>> 0 < i3 >>> 0) {
   i3 = i3 - i2 | 0;
   i9 = i6 - i4 | 0;
   i3 = (i9 | 0) < (i3 | 0) ? i9 : i3;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm(i1, i2, i3) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i3;
   i1 = i1 + i3 | 0;
   i2 = i3;
  } else {
   i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 63](i5) | 0;
   if ((i2 | 0) == -1) break;
   HEAP8[i1 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(i2) | 0;
   i1 = i1 + 1 | 0;
   i2 = 1;
  }
  i4 = i2 + i4 | 0;
 }
 return i4 | 0;
}

function __ZNSt3__211__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i10 + 8 | 0;
 i4 = i10;
 i5 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i6 >> 2] | 0, i3, i7, i4) | 0;
  i11 = (HEAP32[i4 >> 2] | 0) - i8 | 0;
  if ((_fwrite(i3, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i10 + 8 | 0;
 i4 = i10;
 i5 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i6 >> 2] | 0, i3, i7, i4) | 0;
  i11 = (HEAP32[i4 >> 2] | 0) - i8 | 0;
  if ((_fwrite(i3, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i7 = i5 + 4 | 0;
 i4 = i6 + 4 | 0;
 i3 = (HEAP32[i7 >> 2] | 0) - i2 | 0;
 i1 = (HEAP32[i4 >> 2] | 0) + (0 - (i3 >> 2) << 2) | 0;
 HEAP32[i4 >> 2] = i1;
 if ((i3 | 0) > 0) {
  _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
  i2 = i4;
  i1 = HEAP32[i4 >> 2] | 0;
 } else i2 = i4;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i2 >> 2] = i4;
 i4 = i6 + 8 | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = i3;
 i4 = i5 + 8 | 0;
 i7 = i6 + 12 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = i5;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 return;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc(i1, i5, i6, i2, i3, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = i7;
 i11 = i7 + 116 | 0;
 i8 = i7 + 104 | 0;
 i9 = i7 + 112 | 0;
 HEAP32[i11 >> 2] = i10 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1, i10, i11, i2, i3, i4);
 i2 = i8;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = i10;
 i2 = __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_(i5, HEAP32[i6 >> 2] | 0) | 0;
 i1 = ___uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i2 = _mbsrtowcs(i5, i9, i2, i8) | 0;
 if (i1 | 0) ___uselocale(i1) | 0;
 if ((i2 | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(0); else {
  HEAP32[i6 >> 2] = i5 + (i2 << 2);
  STACKTOP = i7;
  return;
 }
}

function _fopen(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i7 + 32 | 0;
 i5 = i7 + 16 | 0;
 i2 = i7;
 if (!(_strchr(12581, HEAP8[i3 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 } else {
  i4 = ___fmodeflags(i3) | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 4 >> 2] = i4 | 32768;
  HEAP32[i2 + 8 >> 2] = 438;
  i2 = ___syscall_ret(___syscall5(5, i2 | 0) | 0) | 0;
  if ((i2 | 0) < 0) i1 = 0; else {
   if (i4 & 524288 | 0) {
    HEAP32[i5 >> 2] = i2;
    HEAP32[i5 + 4 >> 2] = 2;
    HEAP32[i5 + 8 >> 2] = 1;
    ___syscall221(221, i5 | 0) | 0;
   }
   i1 = ___fdopen(i2, i3) | 0;
   if (!i1) {
    HEAP32[i6 >> 2] = i2;
    ___syscall6(6, i6 | 0) | 0;
    i1 = 0;
   }
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i8;
 i6 = i2 + 11 | 0;
 i1 = HEAP8[i6 >> 0] | 0;
 i7 = i1 << 24 >> 24 < 0;
 if (i7) i1 = HEAP32[i2 + 4 >> 2] | 0; else i1 = i1 & 255;
 do if (i1 >>> 0 < i3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc(i2, i3 - i1 | 0, i4) | 0; else if (i7) {
  i7 = (HEAP32[i2 >> 2] | 0) + i3 | 0;
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i5);
  HEAP32[i2 + 4 >> 2] = i3;
  break;
 } else {
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + i3 | 0, i5);
  HEAP8[i6 >> 0] = i3;
  break;
 } while (0);
 STACKTOP = i8;
 return;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i3, i4, i7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = i3 + 4 | 0;
 i2 = (HEAP32[i8 >> 2] | 0) != 110;
 i1 = HEAP32[i3 >> 2] | 0;
 i6 = i1;
 i9 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
 i5 = i9 << 1;
 i5 = i9 >>> 0 < 2147483647 ? ((i5 | 0) == 0 ? 4 : i5) : -1;
 i6 = (HEAP32[i4 >> 2] | 0) - i6 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i5) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (i2) HEAP32[i3 >> 2] = i1; else {
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i2);
   i1 = HEAP32[i3 >> 2] | 0;
  }
 }
 HEAP32[i8 >> 2] = 111;
 HEAP32[i4 >> 2] = i1 + (i6 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i3 >> 2] | 0) + (i5 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i3, i4, i7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = i3 + 4 | 0;
 i2 = (HEAP32[i8 >> 2] | 0) != 110;
 i1 = HEAP32[i3 >> 2] | 0;
 i6 = i1;
 i9 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
 i5 = i9 << 1;
 i5 = i9 >>> 0 < 2147483647 ? ((i5 | 0) == 0 ? 4 : i5) : -1;
 i6 = (HEAP32[i4 >> 2] | 0) - i6 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i5) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (i2) HEAP32[i3 >> 2] = i1; else {
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i2);
   i1 = HEAP32[i3 >> 2] | 0;
  }
 }
 HEAP32[i8 >> 2] = 111;
 HEAP32[i4 >> 2] = i1 + (i6 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i3 >> 2] | 0) + (i5 >>> 2 << 2);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 63](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 288 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 63](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 288 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 __ZNKSt3__28ios_base6getlocEv(i7, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 21956) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 7](i2, 6016, 6048, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 21964) | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3) | 0;
 HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 63](i3) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
 __ZNSt3__26localeD2Ev(i7);
 STACKTOP = i6;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 168 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 168 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 __ZNKSt3__28ios_base6getlocEv(i7, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 21924) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 6016, 6048, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 21940) | 0;
 HEAP8[i4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 63](i3) | 0;
 HEAP8[i5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 63](i3) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
 __ZNSt3__26localeD2Ev(i7);
 STACKTOP = i6;
 return;
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i3, i4, i7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = i3 + 4 | 0;
 i2 = (HEAP32[i8 >> 2] | 0) != 110;
 i1 = HEAP32[i3 >> 2] | 0;
 i6 = i1;
 i9 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
 i5 = i9 << 1;
 i5 = i9 >>> 0 < 2147483647 ? ((i5 | 0) == 0 ? 1 : i5) : -1;
 i6 = (HEAP32[i4 >> 2] | 0) - i6 | 0;
 i1 = _realloc(i2 ? i1 : 0, i5) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (i2) HEAP32[i3 >> 2] = i1; else {
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i2);
   i1 = HEAP32[i3 >> 2] | 0;
  }
 }
 HEAP32[i8 >> 2] = 111;
 HEAP32[i4 >> 2] = i1 + i6;
 HEAP32[i7 >> 2] = (HEAP32[i3 >> 2] | 0) + i5;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 if (i5 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 do if (i5 >>> 0 < 2) {
  HEAP8[i2 + 8 + 3 >> 0] = i5;
  i1 = i2;
 } else {
  i4 = i5 + 4 & -4;
  if (i4 >>> 0 > 1073741823) _abort(); else {
   i1 = __Znwm(i4 << 2) | 0;
   HEAP32[i2 >> 2] = i1;
   HEAP32[i2 + 8 >> 2] = i4 | -2147483648;
   HEAP32[i2 + 4 >> 2] = i5;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwm(i1, i3, i5) | 0;
 HEAP32[i6 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i1 + (i5 << 2) | 0, i6);
 STACKTOP = i7;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 do if (i3 >>> 0 < 2) {
  HEAP8[i2 + 8 + 3 >> 0] = i3;
  i1 = i2;
 } else {
  i4 = i3 + 4 & -4;
  if (i4 >>> 0 > 1073741823) _abort(); else {
   i1 = __Znwm(i4 << 2) | 0;
   HEAP32[i2 >> 2] = i1;
   HEAP32[i2 + 8 >> 2] = i4 | -2147483648;
   HEAP32[i2 + 4 >> 2] = i3;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE6assignEPwmw(i1, i3, i5) | 0;
 HEAP32[i6 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i1 + (i3 << 2) | 0, i6);
 STACKTOP = i7;
 return;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var f1 = f0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 if ((i2 | 0) == (i3 | 0)) {
  HEAP32[i6 >> 2] = 4;
  f1 = Math_fround(0.0);
 } else {
  i5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  f1 = Math_fround(_strtof_l(i2, i4, __ZNSt3__26__clocEv() | 0));
  i2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i2) HEAP32[(___errno_location() | 0) >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) {
   if ((i2 | 0) == 34) i7 = 6;
  } else {
   f1 = Math_fround(0.0);
   i7 = 6;
  }
  if ((i7 | 0) == 6) HEAP32[i6 >> 2] = 4;
 }
 STACKTOP = i8;
 return Math_fround(f1);
}

function ___overflow(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i8 = i5 & 255;
 HEAP8[i7 >> 0] = i8;
 i1 = i6 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) if (!(___towrite(i6) | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = 4;
 } else i1 = -1; else i3 = 4;
 do if ((i3 | 0) == 4) {
  i4 = i6 + 20 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i2 >>> 0) {
   i1 = i5 & 255;
   if ((i1 | 0) != (HEAP8[i6 + 75 >> 0] | 0)) {
    HEAP32[i4 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i8;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 31](i6, i7, 1) | 0) == 1) i1 = HEAPU8[i7 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i4, i3, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i7;
 HEAP32[i6 >> 2] = i3;
 i3 = ___uselocale(HEAP32[i1 + 8 >> 2] | 0) | 0;
 i1 = _wcrtomb(i2, 0, i4) | 0;
 if (i3 | 0) ___uselocale(i3) | 0;
 L4 : do if ((i1 + 1 | 0) >>> 0 < 2) i1 = 2; else {
  i1 = i1 + -1 | 0;
  if (i1 >>> 0 > (i5 - (HEAP32[i6 >> 2] | 0) | 0) >>> 0) i1 = 1; else while (1) {
   if (!i1) {
    i1 = 0;
    break L4;
   }
   i4 = HEAP8[i2 >> 0] | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i5 + 1;
   HEAP8[i5 >> 0] = i4;
   i2 = i2 + 1 | 0;
   i1 = i1 + -1 | 0;
  }
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function ___fseeko_unlocked(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i6 = 0;
 if ((i5 | 0) == 1) i1 = i1 - (HEAP32[i4 + 8 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0;
 i2 = i4 + 20 | 0;
 i3 = i4 + 28 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 31](i4, 0, 0) | 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = -1; else i6 = 5;
 } else i6 = 5;
 if ((i6 | 0) == 5) {
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i4 + 40 >> 2] & 31](i4, i1, i5) | 0) < 0) i1 = -1; else {
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i2, i1);
  if (HEAP8[i2 >> 0] | 0) {
   i4 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 63](i4) | 0) == -1) {
    i4 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj(i4, HEAP32[i4 + 16 >> 2] | 1);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i2);
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (!i2) {
  if (!(HEAP32[2148] | 0)) i1 = 0; else i1 = _fflush(HEAP32[2148] | 0) | 0;
  i2 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3 | 0) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___ofl_unlock();
 } else {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } while (0);
 return i1 | 0;
}

function _fclose(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) i5 = ___lockfile(i4) | 0; else i5 = 0;
 ___unlist_locked_file(i4);
 i6 = (HEAP32[i4 >> 2] & 1 | 0) != 0;
 if (!i6) {
  i3 = ___ofl_lock() | 0;
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  i1 = i4 + 56 | 0;
  if (i2 | 0) HEAP32[i2 + 56 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[i3 >> 2] | 0) == (i4 | 0)) HEAP32[i3 >> 2] = i1;
  ___ofl_unlock();
 }
 i1 = _fflush(i4) | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 63](i4) | 0 | i1;
 i2 = HEAP32[i4 + 92 >> 2] | 0;
 if (i2 | 0) _free(i2);
 if (i6) {
  if (i5 | 0) ___unlockfile(i4);
 } else _free(i4);
 return i1 | 0;
}

function __ZNSt3__26locale5__impD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i3 >> 2] = 11776;
 i4 = i3 + 8 | 0;
 i5 = i3 + 12 | 0;
 i2 = 0;
 while (1) {
  i1 = HEAP32[i4 >> 2] | 0;
  if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) - i1 >> 2 >>> 0) break;
  i1 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) {
   i7 = i1 + 4 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i6 + -1;
   if (!i6) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1);
  }
  i2 = i2 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3 + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev(i4);
 __ZNSt3__26locale5facetD2Ev(i3);
 return;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i6 = 0;
 i3 = i4 + 4 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 i3 = i2 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) - i1 >> 2 >>> 0 > i5 >>> 0) i2 = i3; else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm(i3, i5 + 1 | 0);
  i2 = i3;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 i1 = HEAP32[i1 + (i5 << 2) >> 2] | 0;
 if (i1 | 0) {
  i6 = i1 + 4 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i3 + -1;
  if (!i3) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1);
 }
 HEAP32[(HEAP32[i2 >> 2] | 0) + (i5 << 2) >> 2] = i4;
 return;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 if ((i2 | 0) == (i3 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  d1 = +_strtold_l(i2, i4, __ZNSt3__26__clocEv() | 0);
  i2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i2) HEAP32[(___errno_location() | 0) >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) {
   if ((i2 | 0) == 34) i7 = 6;
  } else {
   d1 = 0.0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) HEAP32[i6 >> 2] = 4;
 }
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 if ((i2 | 0) == (i3 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  d1 = +_strtod_l(i2, i4, __ZNSt3__26__clocEv() | 0);
  i2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i2) HEAP32[(___errno_location() | 0) >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) {
   if ((i2 | 0) == 34) i7 = 6;
  } else {
   d1 = 0.0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) HEAP32[i6 >> 2] = 4;
 }
 STACKTOP = i8;
 return +d1;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21956) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 16 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21956) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 24 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21924) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 16 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21924) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 24 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i9, i8, i4, i5, i6, 14017, 14025) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i9, i8, i4, i5, i6, 6240, 6272) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21956) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 20 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 21924) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 20 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i2 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[i2 + 24 >> 2] | 0) if (!(HEAP32[i2 + 16 >> 2] | 0)) if (HEAP32[i2 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2) | 0) == -1) {
   i2 = HEAP32[i1 >> 2] | 0;
   i2 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj(i2, HEAP32[i2 + 16 >> 2] | 1);
  }
 }
 return;
}

function _scalbn(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i1 | 0) > 1023) {
  d2 = d2 * 8988465674311579538646525.0e283;
  i4 = (i1 | 0) > 2046;
  i3 = i1 + -2046 | 0;
  d2 = i4 ? d2 * 8988465674311579538646525.0e283 : d2;
  i1 = i4 ? ((i3 | 0) < 1023 ? i3 : 1023) : i1 + -1023 | 0;
 } else if ((i1 | 0) < -1022) {
  d2 = d2 * 2.2250738585072014e-308;
  i3 = (i1 | 0) < -2044;
  i4 = i1 + 2044 | 0;
  d2 = i3 ? d2 * 2.2250738585072014e-308 : d2;
  i1 = i3 ? ((i4 | 0) > -1022 ? i4 : -1022) : i1 + 1022 | 0;
 }
 i3 = _bitshift64Shl(i1 + 1023 | 0, 0, 52) | 0;
 i4 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = i3;
 HEAP32[tempDoublePtr + 4 >> 2] = i4;
 return +(d2 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i3, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i4, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 | 0) < 100 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i3, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i4, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 | 0) < 100 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _ungetc(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = 0;
 do if ((i1 | 0) == -1) i1 = -1; else {
  if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i3) | 0; else i4 = 0;
  i5 = i3 + 4 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if (!i2) {
   ___toread(i3) | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   if (i2 | 0) i6 = 6;
  } else i6 = 6;
  if ((i6 | 0) == 6) if (i2 >>> 0 > ((HEAP32[i3 + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   i6 = i2 + -1 | 0;
   HEAP32[i5 >> 2] = i6;
   HEAP8[i6 >> 0] = i1;
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -17;
   if (!i4) break;
   ___unlockfile(i3);
   break;
  }
  if (!i4) i1 = -1; else {
   ___unlockfile(i3);
   i1 = -1;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = 0;
 L1 : do switch ((HEAP32[i2 + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 43:
   case 45:
    {
     i1 = i1 + 1 | 0;
     break L1;
    }
   default:
    {}
   }
   if ((i3 - i1 | 0) > 1 & i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i4 = 7;
      break L1;
     }
    }
    i1 = i1 + 2 | 0;
   } else i4 = 7;
   break;
  }
 case 32:
  {
   i1 = i3;
   break;
  }
 default:
  i4 = 7;
 } while (0);
 return i1 | 0;
}

function _fmt_u(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i3 >>> 0 > 4294967295) {
  do {
   i4 = i3;
   i3 = ___udivdi3(i3 | 0, i2 | 0, 10, 0) | 0;
   i5 = i2;
   i2 = getTempRet0() | 0;
   i6 = ___muldi3(i3 | 0, i2 | 0, 10, 0) | 0;
   i6 = _i64Subtract(i4 | 0, i5 | 0, i6 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   i1 = i1 + -1 | 0;
   HEAP8[i1 >> 0] = i6 & 255 | 48;
  } while (i5 >>> 0 > 9 | (i5 | 0) == 9 & i4 >>> 0 > 4294967295);
  i2 = i3;
 } else i2 = i3;
 if (i2) do {
  i6 = i2;
  i2 = (i2 >>> 0) / 10 | 0;
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i6 - (i2 * 10 | 0) | 48;
 } while (i6 >>> 0 >= 10);
 return i1 | 0;
}

function ___fflush_unlocked(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 28 | 0;
 if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i5 + 36 >> 2] & 31](i5, 0, 0) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) i1 = -1; else i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  i1 = i5 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = i5 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i5 + 40 >> 2] & 31](i5, i2 - i4 | 0, 1) | 0;
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 getTempRet0() | 0;
 switch (i4 & 2047) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709551616.0, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = (i4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) HEAP8[i1 + 11 >> 0] = i3; else {
  i7 = i3 + 16 & -16;
  i6 = __Znwm(i7) | 0;
  HEAP32[i1 >> 2] = i6;
  HEAP32[i1 + 8 >> 2] = i7 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i6;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm(i1, i2, i3) | 0;
 HEAP8[i4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i3 | 0, i4);
 STACKTOP = i5;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i2 >>> 0 < 11) HEAP8[i1 + 11 >> 0] = i2; else {
  i7 = i2 + 16 & -16;
  i6 = __Znwm(i7) | 0;
  HEAP32[i1 >> 2] = i6;
  HEAP32[i1 + 8 >> 2] = i7 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i2;
  i1 = i6;
 }
 __ZNSt3__211char_traitsIcE6assignEPcmc(i1, i2, i3) | 0;
 HEAP8[i4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i2 | 0, i4);
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if (!(HEAP32[i1 + 64 >> 2] | 0)) {
  i5 = -1;
  return i5 | 0;
 }
 i5 = i1 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i1 + 8 >> 2] | 0) >>> 0 >= i3 >>> 0) {
  i5 = -1;
  return i5 | 0;
 }
 if ((i4 | 0) == -1) {
  HEAP32[i5 >> 2] = i3 + -1;
  i5 = 0;
  return i5 | 0;
 }
 if (!(HEAP32[i1 + 88 >> 2] & 16)) {
  i2 = i4 & 255;
  i1 = i3 + -1 | 0;
  if ((HEAP8[i1 >> 0] | 0) != i2 << 24 >> 24) {
   i5 = -1;
   return i5 | 0;
  }
 } else {
  i2 = i4 & 255;
  i1 = i3 + -1 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP8[i1 >> 0] = i2;
 i5 = i4;
 return i5 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1 + -1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1 + -1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 1) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 1) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i10;
 HEAP8[i7 >> 0] = 37;
 i8 = i7 + 1 | 0;
 HEAP8[i8 >> 0] = i5;
 i9 = i7 + 2 | 0;
 HEAP8[i9 >> 0] = i6;
 HEAP8[i7 + 3 >> 0] = 0;
 if (i6 << 24 >> 24) {
  HEAP8[i8 >> 0] = i6;
  HEAP8[i9 >> 0] = i5;
 }
 i9 = __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_(i2, HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i2 + (_strftime_l(i2 | 0, i9 | 0, i7 | 0, i4 | 0, HEAP32[i1 >> 2] | 0) | 0);
 STACKTOP = i10;
 return;
}

function _strtox_387(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i9;
 HEAP32[i7 >> 2] = 0;
 i8 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i7 + 44 >> 2] = i4;
 i6 = i7 + 8 | 0;
 HEAP32[i6 >> 2] = (i4 | 0) < 0 ? -1 : i4 + 2147483647 | 0;
 HEAP32[i7 + 76 >> 2] = -1;
 ___shlim(i7, 0);
 i1 = ___intscan(i7, i1, 1, i2, i3) | 0;
 i2 = getTempRet0() | 0;
 if (i5 | 0) HEAP32[i5 >> 2] = i4 + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 + 108 >> 2] | 0) - (HEAP32[i6 >> 2] | 0));
 setTempRet0(i2 | 0);
 STACKTOP = i9;
 return i1 | 0;
}

function _strtox(i6, i7, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i5 = i8;
 i3 = i5;
 i4 = i3 + 124 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5 + 4 | 0;
 HEAP32[i3 >> 2] = i6;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i6;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d2 = +___floatscan(i5, i1, 1);
 i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i7 | 0) HEAP32[i7 >> 2] = (i1 | 0) == 0 ? i6 : i6 + i1 | 0;
 STACKTOP = i8;
 return +d2;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m(i1, i7, i2, i8, i9) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = i8;
 i6 = i1 + 8 | 0;
 i4 = 0;
 i5 = 0;
 L1 : while (1) {
  if ((i2 | 0) == (i8 | 0) | i4 >>> 0 >= i9 >>> 0) break;
  i3 = ___uselocale(HEAP32[i6 >> 2] | 0) | 0;
  i1 = _mbrlen(i2, i10 - i2 | 0, i7) | 0;
  if (i3 | 0) ___uselocale(i3) | 0;
  switch (i1 | 0) {
  case -2:
  case -1:
   break L1;
  case 0:
   {
    i1 = 1;
    break;
   }
  default:
   {}
  }
  i4 = i4 + 1 | 0;
  i5 = i1 + i5 | 0;
  i2 = i2 + i1 | 0;
 }
 return i5 | 0;
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 74 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i2 + 255 | i2;
 i1 = i3 + 20 | 0;
 i2 = i3 + 28 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 31](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 4)) {
  i2 = (HEAP32[i3 + 44 >> 2] | 0) + (HEAP32[i3 + 48 >> 2] | 0) | 0;
  HEAP32[i3 + 8 >> 2] = i2;
  HEAP32[i3 + 4 >> 2] = i2;
  i1 = i1 << 27 >> 31;
 } else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function _getc(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) < 0) i4 = 3; else if (!(___lockfile(i3) | 0)) i4 = 3; else {
  i1 = i3 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i3 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
  } else i1 = ___uflow(i3) | 0;
 }
 do if ((i4 | 0) == 3) {
  i1 = i3 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i3 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
   break;
  } else {
   i1 = ___uflow(i3) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 9376;
 HEAP32[i1 + 32 >> 2] = i2;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 22236) | 0;
 __ZNSt3__26localeD2Ev(i5);
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 9440;
 HEAP32[i1 + 32 >> 2] = i2;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 22228) | 0;
 __ZNSt3__26localeD2Ev(i5);
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2) | 0) & 1;
 STACKTOP = i4;
 return;
}

function _realloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 if (!i2) {
  i3 = _malloc(i3) | 0;
  return i3 | 0;
 }
 if (i3 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i2 + -8 | 0, i3 >>> 0 < 11 ? 16 : i3 + 11 & -8) | 0;
 if (i1 | 0) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i3) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i2 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i2 | 0, (i4 >>> 0 < i3 >>> 0 ? i4 : i3) | 0) | 0;
 _free(i2);
 i3 = i1;
 return i3 | 0;
}

function __ZNSt3__26locale2id5__getEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i5 + 32 | 0;
 i3 = i5 + 24 | 0;
 i4 = i5;
 i6 = i5 + 16 | 0;
 HEAP32[i6 >> 2] = 108;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_(i4, i1, i2);
 if ((HEAP32[i2 >> 2] | 0) != -1) {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 >> 2] = i1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E(i2, i3, 109);
 }
 STACKTOP = i5;
 return (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 4) | 0;
 if (!(HEAP32[i7 >> 2] & 4)) HEAP32[i6 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 4) | 0;
 if (!(HEAP32[i7 >> 2] & 4)) HEAP32[i6 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 L1 : do if (!(HEAP8[i3 + 44 >> 0] | 0)) {
  i1 = 0;
  while (1) {
   if ((i1 | 0) >= (i4 | 0)) break L1;
   i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0;
   i5 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   i5 = FUNCTION_TABLE_iii[i6 & 31](i3, i5) | 0;
   if ((i5 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) break L1;
   i1 = i1 + 1 | 0;
   i2 = i2 + 4 | 0;
  }
 } else i1 = _fwrite(i2, 4, i4, HEAP32[i3 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 L1 : do if (!(HEAP8[i3 + 44 >> 0] | 0)) {
  i1 = 0;
  while (1) {
   if ((i1 | 0) >= (i4 | 0)) break L1;
   i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0;
   i5 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   i5 = FUNCTION_TABLE_iii[i6 & 31](i3, i5) | 0;
   if ((i5 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) break L1;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
  }
 } else i1 = _fwrite(i2, 1, i4, HEAP32[i3 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 9504;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP32[i1 + 48 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP8[i1 + 52 >> 0] = 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 FUNCTION_TABLE_vii[i3 & 63](i1, i5);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 9568;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP32[i1 + 48 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP8[i1 + 52 >> 0] = 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 FUNCTION_TABLE_vii[i3 & 63](i1, i5);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0;
 i1 = i3 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (!i2) {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 + 24 >> 2] = i5;
  HEAP32[i3 + 36 >> 2] = 1;
 } else {
  if ((i2 | 0) != (i4 | 0)) {
   i5 = i3 + 36 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[i3 + 24 >> 2] = 2;
   HEAP8[i3 + 54 >> 0] = 1;
   break;
  }
  i1 = i3 + 24 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 2) HEAP32[i1 >> 2] = i5;
 } while (0);
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_(i3, i4, i5, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i6 = 0;
 i6 = i3 + 12 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = i1;
 do if (!i4) i1 = 0; else {
  i2 = i1 + 112 | 0;
  if (i4 >>> 0 < 29 & (HEAP8[i2 >> 0] | 0) == 0) {
   HEAP8[i2 >> 0] = 1;
   break;
  } else {
   i1 = __Znwm(i4 << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i5 = i1 + (i5 << 2) | 0;
 HEAP32[i3 + 8 >> 2] = i5;
 HEAP32[i3 + 4 >> 2] = i5;
 HEAP32[i6 >> 2] = i1 + (i4 << 2);
 return;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_(i1, i3, i5, i2, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i4 = 0, i7 = 0;
 i7 = 0;
 i1 = i3;
 while (1) {
  if ((i2 | 0) == (i6 | 0)) {
   i7 = 7;
   break;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = -1;
   break;
  }
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24 < i4 << 24 >> 24) {
   i1 = -1;
   break;
  }
  if (i4 << 24 >> 24 < i3 << 24 >> 24) {
   i1 = 1;
   break;
  }
  i2 = i2 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 if ((i7 | 0) == 7) i1 = (i1 | 0) != (i5 | 0) & 1;
 return i1 | 0;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[19728] | 0)) if (___cxa_guard_acquire(19728) | 0) {
  i2 = 18848;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 19136);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18848, 10292) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(18860, 10304) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[19648] | 0)) if (___cxa_guard_acquire(19648) | 0) {
  i2 = 18096;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 18384);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18096, 13756) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(18108, 13759) | 0;
 return;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i1, i2, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 if (i5 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i5 & 512) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i3 = i1;
 while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  if (!(i1 << 24 >> 24)) break;
  HEAP8[i3 >> 0] = i1;
  i2 = i2 + 1 | 0;
  i3 = i3 + 1 | 0;
 }
 switch (i5 & 74) {
 case 64:
  {
   i1 = 111;
   break;
  }
 case 8:
  {
   i1 = i5 >>> 9 & 32 ^ 120;
   break;
  }
 default:
  i1 = i4 ? 100 : 117;
 }
 HEAP8[i3 >> 0] = i1;
 return;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_(i1, i3, i5, i2, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i4 = 0, i7 = 0;
 i7 = 0;
 i1 = i3;
 while (1) {
  if ((i2 | 0) == (i6 | 0)) {
   i7 = 7;
   break;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = -1;
   break;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) < (i4 | 0)) {
   i1 = -1;
   break;
  }
  if ((i4 | 0) < (i3 | 0)) {
   i1 = 1;
   break;
  }
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 }
 if ((i7 | 0) == 7) i1 = (i1 | 0) != (i5 | 0) & 1;
 return i1 | 0;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = 0;
 i4 = i1;
 L1 : do if (!(i4 & 3)) i3 = 5; else {
  i2 = i4;
  while (1) {
   if (!(HEAP8[i1 >> 0] | 0)) {
    i1 = i2;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i1;
   if (!(i2 & 3)) {
    i3 = 5;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 5) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i2 + 4 | 0;
 i1 = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i2;
 return i7 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i2 + 4 | 0;
 i1 = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i2;
 return i7 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i2 + 4 | 0;
 i1 = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i2;
 return i7 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i2 + 4 | 0;
 i1 = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i2;
 return i7 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5); else {
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, i2, i3, i4, i5, i6);
 }
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv(i2) | 0) >>> 0 < i3 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i2);
 i1 = i2 + 128 | 0;
 if (i3 >>> 0 < 29 & (HEAP8[i1 >> 0] | 0) == 0) {
  HEAP8[i1 >> 0] = 1;
  i1 = i2 + 16 | 0;
 } else i1 = __Znwm(i3 << 2) | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i2 + 8 >> 2] = i1 + (i3 << 2);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 HEAP32[i3 >> 2] = 8100;
 i1 = i3 + 64 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv(i3) | 0;
  if (!(_fclose(i2) | 0)) HEAP32[i1 >> 2] = 0;
 }
 if (HEAP8[i3 + 96 >> 0] | 0) {
  i1 = HEAP32[i3 + 32 >> 2] | 0;
  if (i1 | 0) __ZdaPv(i1);
 }
 if (HEAP8[i3 + 97 >> 0] | 0) {
  i1 = HEAP32[i3 + 56 >> 2] | 0;
  if (i1 | 0) __ZdaPv(i1);
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 return;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22236) | 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 63](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i1 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3) | 0) & 1;
 if ((HEAP32[i2 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(13123); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22228) | 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 63](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i1 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3) | 0) & 1;
 if ((HEAP32[i2 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(13123); else return;
}

function _pad_267(i5, i2, i3, i4, i1) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i6 = i7;
 if ((i3 | 0) > (i4 | 0) & (i1 & 73728 | 0) == 0) {
  i1 = i3 - i4 | 0;
  _memset(i6 | 0, i2 << 24 >> 24 | 0, (i1 >>> 0 < 256 ? i1 : 256) | 0) | 0;
  if (i1 >>> 0 > 255) {
   i2 = i3 - i4 | 0;
   do {
    _out_261(i5, i6, 256);
    i1 = i1 + -256 | 0;
   } while (i1 >>> 0 > 255);
   i1 = i2 & 255;
  }
  _out_261(i5, i6, i1);
 }
 STACKTOP = i7;
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i4 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((i3 | 0) == (i1 | 0)) break;
  i5 = i3 + -4 | 0;
  HEAP32[i2 >> 2] = i5;
  i3 = i5;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2 | 0) {
  i1 = HEAP32[i4 + 16 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) {
   HEAP8[i1 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _pthread_mutex_lock(22276) | 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) != 1) break;
  _pthread_cond_wait(22304, 22276) | 0;
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 1;
  _pthread_mutex_unlock(22276) | 0;
  FUNCTION_TABLE_vi[i3 & 127](i2);
  _pthread_mutex_lock(22276) | 0;
  HEAP32[i1 >> 2] = -1;
  _pthread_mutex_unlock(22276) | 0;
  _pthread_cond_broadcast(22304) | 0;
 } else _pthread_mutex_unlock(22276) | 0;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 __ZNKSt3__28ios_base6getlocEv(i5, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 21964) | 0;
 HEAP32[i3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i1, i2);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 __ZNKSt3__28ios_base6getlocEv(i5, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 21940) | 0;
 HEAP8[i3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 63](i2) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 63](i1, i2);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4); else {
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 15](i1, i2, i3, i4);
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i2, i3, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0;
 i8 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i8 >> 8;
 if (i8 & 1) i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + i1 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 15](i2, i3, i4, i5 + i1 | 0, (i8 & 2 | 0) == 0 ? 2 : i6, i7);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 if ((HEAP8[i2 + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(i1, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0); else {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 }
 return;
}

function ___stdio_seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i4 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i4;
 HEAP32[i6 + 16 >> 2] = i3;
 if ((___syscall_ret(___syscall140(140, i6 | 0) | 0) | 0) < 0) {
  HEAP32[i4 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _store_int(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 L1 : do if (i1 | 0) switch (i2 | 0) {
 case -2:
  {
   HEAP8[i1 >> 0] = i3;
   break L1;
  }
 case -1:
  {
   HEAP16[i1 >> 1] = i3;
   break L1;
  }
 case 0:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
  }
 case 1:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
  }
 case 3:
  {
   i2 = i1;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = i4;
   break L1;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i3, i4, i5, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0;
 i7 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i7 >> 8;
 if (i7 & 1) i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + i1 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 3](i2, i3, i4 + i1 | 0, (i7 & 2 | 0) == 0 ? 2 : i5, i6);
 return;
}

function __ZTv0_n12_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = 8004;
 i2 = i1 + 112 | 0;
 HEAP32[i2 >> 2] = 8044;
 HEAP32[i1 + 8 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i6 >> 8;
 if (i6 & 1) i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + i1 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 15](i2, i3, i4 + i1 | 0, (i6 & 2 | 0) == 0 ? 2 : i5);
 return;
}

function ___towrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 8)) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i3 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 28 >> 2] = i3;
  HEAP32[i1 + 20 >> 2] = i3;
  HEAP32[i1 + 16 >> 2] = i3 + (HEAP32[i1 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i1 >> 2] = i2 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 8 | 0;
 i2 = ___uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i3 = _mbtowc(0, 0, 4) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 if (!i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = 1; else {
   i2 = ___uselocale(i1) | 0;
   i1 = ___ctype_get_mb_cur_max() | 0;
   if (i2 | 0) ___uselocale(i2) | 0;
   return (i1 | 0) == 1 | 0;
  }
 } else i1 = -1;
 return i1 | 0;
}

function __ZTv0_n12_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 8004;
 i1 = i2 + 112 | 0;
 HEAP32[i1 >> 2] = 8044;
 HEAP32[i2 + 8 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i2 + 12 | 0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i2, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0;
 if ((i2 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 4;
  i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
 }
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 63](i1) | 0;
 if ((i2 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 1;
  i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
 }
 return i1 | 0;
}

function ___stdout_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5;
 HEAP32[i1 + 36 >> 2] = 6;
 if (!(HEAP32[i1 >> 2] & 64)) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 60 >> 2];
  HEAP32[i4 + 4 >> 2] = 21523;
  HEAP32[i4 + 8 >> 2] = i5 + 16;
  if (___syscall54(54, i4 | 0) | 0) HEAP8[i1 + 75 >> 0] = -1;
 }
 i4 = ___stdio_write(i1, i2, i3) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _vsscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i6;
 i5 = i4;
 i7 = i5 + 124 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP32[i4 + 32 >> 2] = 27;
 HEAP32[i4 + 44 >> 2] = i1;
 HEAP32[i4 + 76 >> 2] = -1;
 HEAP32[i4 + 84 >> 2] = i1;
 i7 = _vfscanf(i4, i2, i3) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i1;
 __ZNKSt3__28ios_base6getlocEv(i4, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 21956) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 7](i2, 6016, 6042, i3) | 0;
 __ZNSt3__26localeD2Ev(i4);
 STACKTOP = i1;
 return i3 | 0;
}

function ___string_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i2 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i6 + i3;
 i2 = i6 + i5 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = i2;
 return i3 | 0;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (_strchr(i1, 43) | 0) == 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i2 = i2 << 24 >> 24 | 0;
 i3 = i3 ? (i2 | 0) != 114 & 1 : 2;
 i4 = (_strchr(i1, 120) | 0) == 0;
 i3 = i4 ? i3 : i3 | 128;
 i1 = (_strchr(i1, 101) | 0) == 0;
 i1 = i1 ? i3 : i3 | 524288;
 i1 = (i2 | 0) == 114 ? i1 : i1 | 64;
 i1 = (i2 | 0) == 119 ? i1 | 512 : i1;
 return ((i2 | 0) == 97 ? i1 | 1024 : i1) | 0;
}

function __ZNSt3__28ios_base4initEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP32[i2 + 16 >> 2] = (i1 | 0) == 0 & 1;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 4098;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 6;
 i3 = i2 + 28 | 0;
 i1 = i2 + 32 | 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 __ZNSt3__26localeC2Ev(i3);
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 128 >> 0] = 0;
 if (i2 | 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm(i1, i2);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm(i1, i2);
 }
 return;
}

function _strcmp(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 if (i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24) i2 = i4; else {
  do {
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
  } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24));
  i2 = i4;
 }
 return (i1 & 255) - (i2 & 255) | 0;
}

function _wmemmove(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i4 - i2 >> 2 >>> 0 < i1 >>> 0) do {
  i1 = i1 + -1 | 0;
  HEAP32[i4 + (i1 << 2) >> 2] = HEAP32[i2 + (i1 << 2) >> 2];
 } while ((i1 | 0) != 0); else if (i1 | 0) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = i1 + 4 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i4 = (HEAP32[i3 >> 2] | 0) - i5 >> 2;
 if (i4 >>> 0 < i2 >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm(i1, i2 - i4 | 0); else if (i4 >>> 0 > i2 >>> 0) HEAP32[i3 >> 2] = i5 + (i2 << 2);
 return;
}

function _vasprintf(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 i1 = _vsnprintf(0, 0, i4, i1) | 0;
 if ((i1 | 0) < 0) i1 = -1; else {
  i1 = i1 + 1 | 0;
  i2 = _malloc(i1) | 0;
  HEAP32[i3 >> 2] = i2;
  if (!i2) i1 = -1; else i1 = _vsnprintf(i2, i1, i4, i5) | 0;
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 i2 = i3 + i1 | 0;
 if ((i1 | 0) > 0 & (i2 | 0) < (i3 | 0) | (i2 | 0) < 0) {
  abortOnCannotGrowMemory(i2 | 0) | 0;
  ___setErrNo(12);
  return -1;
 }
 if ((i2 | 0) > (_emscripten_get_heap_size() | 0)) if (!(_emscripten_resize_heap(i2 | 0) | 0)) {
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = i2;
 return i3 | 0;
}

function _fwrite(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 i5 = Math_imul(i1, i4) | 0;
 i1 = (i4 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i5, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i5, i3) | 0;
 if ((i2 | 0) != (i5 | 0)) i1 = (i2 >>> 0) / (i4 >>> 0) | 0;
 return i1 | 0;
}

function __ZThn8_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + -8 | 0;
 HEAP32[i1 >> 2] = 8004;
 i2 = i1 + 112 | 0;
 HEAP32[i2 >> 2] = 8044;
 HEAP32[i1 + 8 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5);
 return;
}

function ___ftello_unlocked(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(HEAP32[i2 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 31](i2, 0, i1) | 0;
 if ((i1 | 0) >= 0) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 20 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
 return i1 | 0;
}

function __ZThn8_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + -8 | 0;
 HEAP32[i2 >> 2] = 8004;
 i1 = i2 + 112 | 0;
 HEAP32[i1 >> 2] = 8044;
 HEAP32[i2 + 8 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i2 + 12 | 0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i2, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt(i2, i1, i4, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  if ((HEAP32[i1 >> 2] | 0) >>> 0 < 128) {
   i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   i2 = HEAPU16[i2 + (HEAP32[i1 >> 2] << 1) >> 1] | 0;
  } else i2 = 0;
  HEAP16[i3 >> 1] = i2;
  i3 = i3 + 2 | 0;
  i1 = i1 + 4 | 0;
 }
 return i4 | 0;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = i2 + 32 | 0;
 i5 = i2 + 36 | 0;
 i1 = HEAP32[i2 + 40 >> 2] | 0;
 while (1) {
  if (!i1) break;
  i6 = i1 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + (i6 << 2) >> 2] & 0](i3, i2, HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0);
  i1 = i6;
 }
 return;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (setTempRet0((i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0), i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) {
   i1 = i4;
   break;
  }
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 128) break;
  i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[i2 + (HEAP32[i1 >> 2] << 1) >> 1] & i3) << 16 >> 16)) break;
  i1 = i1 + 4 | 0;
 }
 return i1 | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc(i1, i4, i5, i6, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i7 = 0;
 i3 = (i5 - i4 | 0) >>> 2;
 i1 = i2;
 i2 = i4;
 while (1) {
  if ((i2 | 0) == (i5 | 0)) break;
  i7 = HEAP32[i2 >> 2] | 0;
  HEAP8[i1 >> 0] = i7 >>> 0 < 128 ? i7 & 255 : i6;
  i1 = i1 + 1 | 0;
  i2 = i2 + 4 | 0;
 }
 return i4 + (i3 << 2) | 0;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__213basic_fstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 8004;
 i2 = i1 + 112 | 0;
 HEAP32[i2 >> 2] = 8044;
 HEAP32[i1 + 8 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) {
   i1 = i4;
   break;
  }
  if ((HEAP32[i1 >> 2] | 0) >>> 0 < 128) {
   i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   if ((HEAP16[i2 + (HEAP32[i1 >> 2] << 1) >> 1] & i3) << 16 >> 16) break;
  }
  i1 = i1 + 4 | 0;
 }
 return i1 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i2 >> 0] = 0;
 HEAP32[i2 + 4 >> 2] = i1;
 i1 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[i1 + 16 >> 2] | 0)) {
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  if (i1 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  HEAP8[i2 >> 0] = 1;
 }
 return;
}

function __ZNSt3__28numpunctIwEC2Em(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 11888;
 HEAP32[i1 + 8 >> 2] = 46;
 HEAP32[i1 + 12 >> 2] = 44;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNSt3__28numpunctIcEC2Em(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 11848;
 HEAP8[i1 + 8 >> 0] = 46;
 HEAP8[i1 + 9 >> 0] = 44;
 i2 = i1 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz(i3, i4, i1, i5, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i2;
 i2 = ___uselocale(i1) | 0;
 i1 = _vsnprintf(i3, i4, i5, i7) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function __ZNSt3__213basic_fstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 8004;
 i2 = i1 + 112 | 0;
 HEAP32[i2 >> 2] = 8044;
 HEAP32[i1 + 8 >> 2] = 8024;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 8056);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24 > -1) {
   i1 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP8[i2 >> 0] << 2) >> 2] & 255;
  }
  HEAP8[i2 >> 0] = i1;
  i2 = i2 + 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24 > -1) {
   i1 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP8[i2 >> 0] << 2) >> 2] & 255;
  }
  HEAP8[i2 >> 0] = i1;
  i2 = i2 + 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < 128) {
   i1 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP32[i2 >> 2] << 2) >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i1;
  i2 = i2 + 4 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < 128) {
   i1 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP32[i2 >> 2] << 2) >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i1;
  i2 = i2 + 4 | 0;
 }
 return i3 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4);
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function _arg_n(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 while (1) {
  i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i3 >> 2] = i5 + 4;
  if (i1 >>> 0 > 1) i1 = i1 + -1 | 0; else break;
 }
 STACKTOP = i4;
 return i2 | 0;
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (i1 | 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   i2 = i1 + 48 | 0;
   if ((HEAP32[i2 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i2 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[i1 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = ___uselocale(i1) | 0;
 i1 = _vasprintf(i3, i4, i6) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1) | 0;
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22236) | 0;
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2) | 0) & 1;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1) | 0;
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 22228) | 0;
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2) | 0) & 1;
 return;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i1, i3, i4);
 return;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i1, i3, i4);
 return;
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = ___uselocale(i1) | 0;
 i1 = _vsscanf(i3, i4, i6) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function ___cxa_can_catch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i2, i4) | 0;
 if (i1) HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i5;
 return i1 & 1 | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 8 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19696] | 0)) if (___cxa_guard_acquire(19696) | 0) {
  HEAP32[5519] = 0;
  HEAP32[5520] = 0;
  HEAP32[5521] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(22076, 10124, __ZNSt3__211char_traitsIwE6lengthEPKw(10124) | 0);
 }
 return 22076;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19704] | 0)) if (___cxa_guard_acquire(19704) | 0) {
  HEAP32[5522] = 0;
  HEAP32[5523] = 0;
  HEAP32[5524] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(22088, 10160, __ZNSt3__211char_traitsIwE6lengthEPKw(10160) | 0);
 }
 return 22088;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19712] | 0)) if (___cxa_guard_acquire(19712) | 0) {
  HEAP32[5525] = 0;
  HEAP32[5526] = 0;
  HEAP32[5527] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(22100, 10208, __ZNSt3__211char_traitsIwE6lengthEPKw(10208) | 0);
 }
 return 22100;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19688] | 0)) if (___cxa_guard_acquire(19688) | 0) {
  HEAP32[5516] = 0;
  HEAP32[5517] = 0;
  HEAP32[5518] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(22064, 10088, __ZNSt3__211char_traitsIwE6lengthEPKw(10088) | 0);
 }
 return 22064;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19616] | 0)) if (___cxa_guard_acquire(19616) | 0) {
  HEAP32[5502] = 0;
  HEAP32[5503] = 0;
  HEAP32[5504] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(22008, 13714, __ZNSt3__211char_traitsIcE6lengthEPKc(13714) | 0);
 }
 return 22008;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19624] | 0)) if (___cxa_guard_acquire(19624) | 0) {
  HEAP32[5505] = 0;
  HEAP32[5506] = 0;
  HEAP32[5507] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(22020, 13723, __ZNSt3__211char_traitsIcE6lengthEPKc(13723) | 0);
 }
 return 22020;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19632] | 0)) if (___cxa_guard_acquire(19632) | 0) {
  HEAP32[5508] = 0;
  HEAP32[5509] = 0;
  HEAP32[5510] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(22032, 13735, __ZNSt3__211char_traitsIcE6lengthEPKc(13735) | 0);
 }
 return 22032;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19608] | 0)) if (___cxa_guard_acquire(19608) | 0) {
  HEAP32[5499] = 0;
  HEAP32[5500] = 0;
  HEAP32[5501] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(21996, 13705, __ZNSt3__211char_traitsIcE6lengthEPKc(13705) | 0);
 }
 return 21996;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _getint_262(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if (!(_isdigit(HEAP8[HEAP32[i2 >> 2] >> 0] | 0) | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i3 = HEAP32[i2 >> 2] | 0;
   i1 = (i1 * 10 | 0) + -48 + (HEAP8[i3 >> 0] | 0) | 0;
   i3 = i3 + 1 | 0;
   HEAP32[i2 >> 2] = i3;
  } while ((_isdigit(HEAP8[i3 >> 0] | 0) | 0) != 0);
 }
 return i1 | 0;
}

function ___unlist_locked_file(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (HEAP32[i1 + 68 >> 2] | 0) {
  i2 = HEAP32[i1 + 116 >> 2] | 0;
  i1 = i1 + 112 | 0;
  if (i2 | 0) HEAP32[i2 + 112 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = (___pthread_self_218() | 0) + 232 | 0; else i1 = i1 + 116 | 0;
  HEAP32[i1 >> 2] = i2;
 }
 return;
}

function _fmt_x(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 if (!((i3 | 0) == 0 & (i2 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = HEAPU8[1728 + (i3 & 15) >> 0] | 0 | i4;
  i3 = _bitshift64Lshr(i3 | 0, i2 | 0, 4) | 0;
  i2 = getTempRet0() | 0;
 } while (!((i3 | 0) == 0 & (i2 | 0) == 0));
 return i1 | 0;
}

function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 + 104 >> 2] = i2;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = i3 - i4 | 0;
 HEAP32[i1 + 108 >> 2] = i5;
 if ((i2 | 0) != 0 & (i5 | 0) > (i2 | 0)) HEAP32[i1 + 100 >> 2] = i4 + i2; else HEAP32[i1 + 100 >> 2] = i3;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2 | 0) {
  HEAP32[i1 + 4 >> 2] = i2;
  if ((i2 | 0) == (i1 + 16 | 0)) {
   HEAP8[i1 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = (HEAP32[i1 >> 2] | 0) + (i4 >> 1) | 0;
 if (!(i4 & 1)) i1 = i2; else i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i2 >> 2] | 0;
 FUNCTION_TABLE_vi[i1 & 127](i3);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 9072;
 __ZNSt3__26localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 9008;
 __ZNSt3__26localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc(i3, i1, i4, i5, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  i3 = HEAP8[i1 >> 0] | 0;
  HEAP8[i2 >> 0] = i3 << 24 >> 24 > -1 ? i3 : i5;
  i2 = i2 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function _sn_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i3 >>> 0 ? i3 : i1;
 _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i3 | 0;
}

function __ZNSt3__25ctypeIcEC2EPKtbm(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 11796;
 i1 = i2 + 8 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP8[i2 + 12 >> 0] = i4 & 1;
 if (!i3) HEAP32[i1 >> 2] = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
 return;
}

function __ZNSt3__28ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 8992;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i1, 0);
 __ZNSt3__26localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i1 + 32 >> 2] | 0);
 _free(HEAP32[i1 + 36 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 return;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i4 = (HEAP32[i1 >> 2] | 0) + (i2 << 4) | 0;
  i5 = i4 & -268435456;
  i2 = (i5 >>> 24 | i5) ^ i4;
  i1 = i1 + 4 | 0;
 }
 return i2 | 0;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i4 = (i2 << 4) + (HEAP8[i1 >> 0] | 0) | 0;
  i5 = i4 & -268435456;
  i2 = (i5 >>> 24 | i5) ^ i4;
  i1 = i1 + 1 | 0;
 }
 return i2 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((HEAP32[i2 + 4 >> 2] | 0) == (i3 | 0)) {
  i1 = i2 + 28 | 0;
  if ((HEAP32[i1 >> 2] | 0) != 1) HEAP32[i1 >> 2] = i4;
 }
 return;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(i1, 11920, __ZNSt3__211char_traitsIwE6lengthEPKw(11920) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(i1, 15329, __ZNSt3__211char_traitsIcE6lengthEPKc(15329) | 0);
 return;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(i1, 11944, __ZNSt3__211char_traitsIwE6lengthEPKw(11944) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(i1, 15335, __ZNSt3__211char_traitsIcE6lengthEPKc(15335) | 0);
 return;
}

function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (!(___toread(i1) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 31](i1, i2, 1) | 0) == 1) i1 = HEAPU8[i2 >> 0] | 0; else i1 = -1; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function dynCall_iiiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i9 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function _fmt_o(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!((i3 | 0) == 0 & (i2 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i3 & 7 | 48;
  i3 = _bitshift64Lshr(i3 | 0, i2 | 0, 3) | 0;
  i2 = getTempRet0() | 0;
 } while (!((i3 | 0) == 0 & (i2 | 0) == 0));
 return i1 | 0;
}

function ___fseeko(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
  if (!i4) ___unlockfile(i3);
 } else i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
 return i1 | 0;
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _catopen((HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _catopen((HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0 | 0), i3 | 0 | 0) | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 11728;
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[i2 >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function _wmemcpy(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i1 | 0) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 4 >> 2] & 74) {
 case 64:
  {
   i1 = 8;
   break;
  }
 case 8:
  {
   i1 = 16;
   break;
  }
 case 0:
  {
   i1 = 0;
   break;
  }
 default:
  i1 = 10;
 }
 return i1 | 0;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(22352, 2) | 0)) {
  i2 = _pthread_getspecific(HEAP32[5589] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(15682, i1);
 return 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function ___munmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall91(91, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i1) i1 = 1; else {
  i2 = ___uselocale(i1) | 0;
  i1 = ___ctype_get_mb_cur_max() | 0;
  if (i2) ___uselocale(i2) | 0;
 }
 return i1 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw(i1, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw(i1, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc(i1, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc(i1, 1, 45);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm(i1, i2, __ZNSt3__211char_traitsIwE6lengthEPKw(i2) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm(i1, i2, __ZNSt3__211char_traitsIcE6lengthEPKc(i2) | 0) | 0;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
  i2 = i2 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = _dummy(HEAP32[i1 + 60 >> 2] | 0) | 0;
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _snprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i1, i2, i3, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[5589] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(15781, i2);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[5005] = 0;
 HEAP32[5004] = 11972;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(20024);
 HEAP32[5004] = 10012;
 HEAP32[5006] = 10060;
 return;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  HEAP32[i2 >> 2] = HEAP8[i1 >> 0];
  i2 = i2 + 4 | 0;
  i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function __Znwm(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 while (1) {
  i1 = _malloc(i2) | 0;
  if (i1 | 0) break;
  i1 = __ZSt15get_new_handlerv() | 0;
  if (!i1) {
   i1 = 0;
   break;
  }
  FUNCTION_TABLE_v[i1 & 3]();
 }
 return i1 | 0;
}

function __ZNKSt3__26locale5__imp9has_facetEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((HEAP32[i1 + 12 >> 2] | 0) - i3 >> 2 >>> 0 > i2 >>> 0) i1 = (HEAP32[i3 + (i2 << 2) >> 2] | 0) != 0; else i1 = 0;
 return i1 | 0;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0, i2 + 12 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, i2 + 4 | 0);
 return;
}

function __ZNSt3__26localeD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i3 = i1 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[5001] = 0;
 HEAP32[5e3] = 11972;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(20008);
 HEAP32[5e3] = 9928;
 HEAP32[5002] = 9976;
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22204) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22196) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22188) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22180) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22140) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22132) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22124) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22056) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21988) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21980) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21972) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21948) | 0);
 return;
}

function ___ofl_add(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = ___ofl_lock() | 0;
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 >> 2];
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) HEAP32[i3 + 52 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 ___ofl_unlock();
 return i1 | 0;
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEtw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 >>> 0 < 128) i1 = (HEAP16[(__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + (i3 << 1) >> 1] & i2) << 16 >> 16 != 0; else i1 = 0;
 return i1 | 0;
}

function ___uselocale(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (___pthread_self_193() | 0) + 188 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) HEAP32[i2 >> 2] = (i1 | 0) == (-1 | 0) ? 20324 : i1;
 return ((i3 | 0) == 20324 ? -1 : i3) | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  setTempRet0(i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1 | 0);
  return i3 << i1;
 }
 setTempRet0(i3 << i1 - 32 | 0);
 return 0;
}

function dynCall_iiiiiid(i7, i1, i2, i3, i4, i5, d6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 return FUNCTION_TABLE_iiiiiid[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, +d6) | 0;
}

function _sscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _wmemset(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i1 | 0) {
  i2 = i3;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i2 >> 2] = i4;
   if (!i1) break; else i2 = i2 + 4 | 0;
  }
 }
 return i3 | 0;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function _pthread_key_create(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = 22;
  return i2 | 0;
 }
 i2 = _malloc(8) | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 38177486;
 HEAP32[i1 >> 2] = i2;
 i2 = 0;
 return i2 | 0;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  setTempRet0(i2 >>> i1 | 0);
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 setTempRet0(0);
 return i2 >>> i1 - 32 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[5013] = 0;
 HEAP32[5012] = 11972;
 HEAP32[5014] = __ZNSt3__26__clocEv() | 0;
 HEAP32[5012] = 11208;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[5009] = 0;
 HEAP32[5008] = 11972;
 HEAP32[5010] = __ZNSt3__26__clocEv() | 0;
 HEAP32[5008] = 11184;
 return;
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = HEAP32[2084] | 0;
 _vfprintf(i2, i1, i3) | 0;
 _fputc(10, i2) | 0;
 _abort();
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19736] | 0)) if (___cxa_guard_acquire(19736) | 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[5529] = 19136;
 }
 return HEAP32[5529] | 0;
}

function __ZNSt3__211char_traitsIwE7not_eofEj(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) i1 = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0);
 return i1 | 0;
}

function __ZNSt3__211char_traitsIcE7not_eofEi(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) i1 = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0);
 return i1 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19656] | 0)) if (___cxa_guard_acquire(19656) | 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[5512] = 18384;
 }
 return HEAP32[5512] | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(22356, 112) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(15731, i1);
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
 return i1 | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19752] | 0)) if (___cxa_guard_acquire(19752) | 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[5530] = 19424;
 }
 return HEAP32[5530] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19720] | 0)) if (___cxa_guard_acquire(19720) | 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[5528] = 18848;
 }
 return HEAP32[5528] | 0;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i2 | 0) _memset(i1 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc(i3) | 0) & 255 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19672] | 0)) if (___cxa_guard_acquire(19672) | 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[5513] = 18672;
 }
 return HEAP32[5513] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[19640] | 0)) if (___cxa_guard_acquire(19640) | 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[5511] = 18096;
 }
 return HEAP32[5511] | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i4 = i4 - i3 | 0;
 return (i4 >>> 0 < i5 >>> 0 ? i4 : i5) | 0;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22244) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22252) | 0);
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ((i1 & 255) << 2) >> 2] & 255;
 return i1 | 0;
}

function __ZNSt3__26localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[(__ZNSt3__26locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 i1 = i2 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22236) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22228) | 0);
 return;
}

function __ZNSt3__25ctypeIcED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 11796;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (i2 | 0) if (HEAP8[i1 + 12 >> 0] | 0) __ZdaPv(i2);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 9340);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 12 | 0);
 return;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 | 0;
 i4 = (i4 | 0) - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (setTempRet0(i4 | 0), i1 - i3 >>> 0 | 0) | 0;
}

function ___ftello(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  i1 = ___ftello_unlocked(i1) | 0;
 } else i1 = ___ftello_unlocked(i1) | 0;
 return i1 | 0;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev(i1, 9272);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, 9224);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev(i1, 9216);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 9168);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22172) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22164) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22156) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22148) | 0);
 return;
}

function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function dynCall_iiiiid(i6, i1, i2, i3, i4, d5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return FUNCTION_TABLE_iiiiid[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5) | 0;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__28numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 11888;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 11848;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_(i1, i2, i3) | 0;
}

function __ZNSt3__26locale8__globalEv() {
 if (!(HEAP8[20248] | 0)) if (___cxa_guard_acquire(20248) | 0) {
  __ZNSt3__26locale5__imp11make_globalEv() | 0;
  HEAP32[5568] = 22268;
 }
 return HEAP32[5568] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if (!(HEAP8[20080] | 0)) if (___cxa_guard_acquire(20080) | 0) {
  __ZNSt3__26locale5__imp12make_classicEv() | 0;
  HEAP32[5566] = 22260;
 }
 return HEAP32[5566] | 0;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21964) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21940) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22220) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(22212) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21916) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21908) | 0);
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21956) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(21924) | 0);
 return;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl(i1, __ZNSt3__26locale2id5__getEv(i2) | 0) | 0;
}

function __ZNKSt3__26locale9has_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9has_facetEl(i1, __ZNSt3__26locale2id5__getEv(i2) | 0) | 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 11728;
 HEAP32[i1 + 8 >> 2] = __ZNSt3__26__clocEv() | 0;
 return;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc(i1, i2, i3) | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i1) {
 i1 = i1 | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function ___DOUBLE_BITS_482(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return i2 | 0;
}

function __ZNSt3__26localeC2ERKS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 i2 = i2 + 4 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 return;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (setTempRet0(i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0 | 0), i3 | 0) | 0;
}

function _pthread_setspecific(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) != 38177486) {
  i2 = 22;
  return i2 | 0;
 }
 HEAP32[i1 >> 2] = i2;
 i2 = 0;
 return i2 | 0;
}

function ___DOUBLE_BITS(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return i2 | 0;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 12 | 0);
 return;
}

function __ZNSt3__210__time_putD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function _pthread_once(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 324508639) return 0;
 FUNCTION_TABLE_v[i2 & 3]();
 HEAP32[i1 >> 2] = 324508639;
 return 0;
}

function b9(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(9);
 return 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _strtoull_l(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _strtoull(i1, i2, i3) | 0;
 setTempRet0(getTempRet0() | 0);
 return i4 | 0;
}

function __ZNSt3__26__clocEv() {
 if (!(HEAP8[19600] | 0)) if (___cxa_guard_acquire(19600) | 0) HEAP32[5483] = ___newlocale(2147483647, 13274, 0) | 0;
 return HEAP32[5483] | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 8 + 3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function _strtoll_l(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _strtoll(i1, i2, i3) | 0;
 setTempRet0(getTempRet0() | 0);
 return i4 | 0;
}

function _strtoll(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _strtox_387(i1, i2, i3, 0, -2147483648) | 0;
 setTempRet0(getTempRet0() | 0);
 return i3 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 | 0) _memmove(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
 _abort_message(15834, i2);
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 | 0) _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function _pthread_getspecific(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) != 38177486) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[4999] = 0;
 HEAP32[4998] = 11540;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[4997] = 0;
 HEAP32[4996] = 11512;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[4995] = 0;
 HEAP32[4994] = 11484;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[4993] = 0;
 HEAP32[4992] = 11456;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strtoull(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _strtox_387(i1, i2, i3, -1, -1) | 0;
 setTempRet0(getTempRet0() | 0);
 return i3 | 0;
}

function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1 + -8 | 0);
 return;
}

function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1 + -8 | 0);
 return;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[4983] = 0;
 HEAP32[4982] = 9876;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[4981] = 0;
 HEAP32[4980] = 9824;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[4979] = 0;
 HEAP32[4978] = 9760;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[4977] = 0;
 HEAP32[4976] = 9696;
 return;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 >>> 0 <= i1 >>> 0 & i1 >>> 0 < i3 >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 >>> 0 <= i1 >>> 0 & i1 >>> 0 < i3 >>> 0 | 0;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 31](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b8(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(8);
 return 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__26locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[5484] | 0;
 HEAP32[5484] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}

function _strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = ___strchrnul(i1, i2) | 0;
 return ((HEAP8[i1 >> 0] | 0) == (i2 & 255) << 24 >> 24 ? i1 : 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwm(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3) _wmemmove(i1, i2, i3) | 0;
 return i1 | 0;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNSt3__211char_traitsIwE6assignEPwmw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i2) _wmemset(i1, i3, i2) | 0;
 return i1 | 0;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwm(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3) _wmemcpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function _wcslen(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2;
 while (1) if (!(HEAP32[i1 >> 2] | 0)) break; else i1 = i1 + 4 | 0;
 return i1 - i2 >> 2 | 0;
}

function ___ctype_get_mb_cur_max() {
 var i1 = 0;
 i1 = (HEAP32[HEAP32[(___pthread_self_649() | 0) + 188 >> 2] >> 2] | 0) == 0;
 return (i1 ? 1 : 4) | 0;
}

function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 9072;
 __ZNSt3__26localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 9008;
 __ZNSt3__26localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[5565] = 20088;
 return 22260;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 0](i1 | 0, i2 | 0, i3 | 0);
}

function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function ___cxa_guard_acquire(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 >> 0] | 0) == 1) i1 = 0; else {
  HEAP8[i1 >> 0] = 1;
  i1 = 1;
 }
 return i1 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__26locale5__imp9use_facetEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = (___dynamic_cast(i1, 7888, 7960, 0) | 0) != 0 & 1;
 return i1 | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28ios_base5clearEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 24 >> 2] | 0) == 0 | i2;
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 >>> 0 < 128 ? i2 & 255 : i3) | 0;
}

function b7(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(7);
 return 0;
}

function __ZNSt3__211__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 << 24 >> 24 > -1 ? i2 : i3) | 0;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(19816, 1);
 return;
}

function __ZNSt3__210__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function b6(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 abort(6);
 return 0;
}

function _out_261(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i1 >> 2] & 32)) ___fwritex(i2, i3, i1) | 0;
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(22268, __ZNSt3__26locale7classicEv() | 0);
 return 22268;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function b16(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(16);
}

function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 6016;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 31](i1 | 0, i2 | 0) | 0;
}

function _mbrlen(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _mbrtowc(0, i1, i2, (i3 | 0) == 0 ? 20376 : i3) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[4959] = 0;
 HEAP32[4958] = 12108;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[4961] = 0;
 HEAP32[4960] = 12156;
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[4953] = 0;
 HEAP32[4952] = 12060;
 return;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 return;
}

function __ZNKSt3__28ios_base6getlocEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26localeC2ERKS0_(i1, i2 + 28 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbm(19784, 0, 0, 1);
 return;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv(i1) {
 i1 = i1 | 0;
 return 1073741823;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__217__widen_from_utf8ILm32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[4991] = 0;
 HEAP32[4990] = 11400;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[4989] = 0;
 HEAP32[4988] = 11344;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[4987] = 0;
 HEAP32[4986] = 11288;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[4985] = 0;
 HEAP32[4984] = 11232;
 return;
}

function b5(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(5);
 return 0;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__211char_traitsIcE2eqEcc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i1 << 24 >> 24 == i2 << 24 >> 24 | 0;
}

function __ZNSt3__210__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb(i1, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb(i1, 0) | 0;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 63](i1 | 0, i2 | 0);
}

function b4(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 abort(4);
 return 0;
}

function ___loc_is_allocated(i1) {
 i1 = i1 | 0;
 return (i1 | 0) != 8184 & ((i1 | 0) != 0 & (i1 | 0) != 20256) & 1 | 0;
}

function __ZNSt3__210__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[5019] = 0;
 HEAP32[5018] = 11600;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[5017] = 0;
 HEAP32[5016] = 11568;
 return;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Em(20088, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 - i1 >> 2 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[4945] = 0;
 HEAP32[4944] = 9664;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[4943] = 0;
 HEAP32[4942] = 9632;
 return;
}

function b15(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(15);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Em(19872, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Em(19848, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[4951] = 0;
 HEAP32[4950] = 11992;
 return;
}

function _isxdigit(i1) {
 i1 = i1 | 0;
 return (((i1 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit(i1) | 0) != 0) & 1 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 return;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0 & 1;
 return i1 | 0;
}

function _do_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___string_read(i1, i2, i3) | 0;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[5590] | 0;
 HEAP32[5590] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__26locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__26locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5__impD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strtof_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return Math_fround(_strtof(i1, i2));
}

function __ZNSt3__28messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 return HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 return HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 - i1 | 0;
}

function __ZSt13get_terminatev() {
 var i1 = 0;
 i1 = HEAP32[3067] | 0;
 HEAP32[3067] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__28numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27collateIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27collateIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27collateIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27collateIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function b3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(3);
 return 0;
}

function _catgets(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return i4 | 0;
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 << 24 >> 24 | 0;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 63](i1 | 0) | 0;
}

function _strtold_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return +(+_strtold(i1, i2));
}

function __ZNSt3__28ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__25ctypeIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 >> 0] | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function _strtod_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return +(+_strtod(i1, i2));
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12240;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12204;
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function b14(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(14);
}

function __ZNSt3__28messagesIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28messagesIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt8bad_castD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt8bad_castD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27collateIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27collateIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _strtof(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return Math_fround(+_strtox(i1, i2, 0));
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 127](i1 | 0);
}

function _freelocale(i1) {
 i1 = i1 | 0;
 if (___loc_is_allocated(i1) | 0) _free(i1);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 | 0;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi(i1) {
 i1 = i1 | 0;
 return i1 & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZSt18uncaught_exceptionv() {
 return (__ZSt19uncaught_exceptionsv() | 0) > 0 | 0;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) {
 i1 = i1 | 0;
 return i1 & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZSt19uncaught_exceptionsv() {
 return (___cxa_uncaught_exception() | 0) & 1 | 0;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw(i1) {
 i1 = i1 | 0;
 return _wcslen(i1) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc(i1) {
 i1 = i1 | 0;
 return _strlen(i1) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZNKSt3__28messagesIwE8do_closeEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function b2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(2);
 return 0;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _strtold(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox(i1, i2, 2));
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _strtod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox(i1, i2, 1));
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _isxdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isxdigit(i1) | 0;
}

function _isdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isdigit(i1) | 0;
}

function __ZNSt8bad_castC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12360;
 return;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function _scalbnl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_scalbn(d1, i2));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function globalCtors() {
 __GLOBAL__I_000101();
 __GLOBAL__sub_I_iostream_cpp();
}

function b13(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(13);
}

function _frexpl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_frexp(d1, i2));
}

function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function __ZNSt3__221__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 _abort();
}

function _isdigit(i1) {
 i1 = i1 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function b1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(1);
 return 0;
}

function _catopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1 | 0;
}

function __ZNSt3__214__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
}

function __ZNKSt8bad_cast4whatEv(i1) {
 i1 = i1 | 0;
 return 15874;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init();
 return;
}

function __ZNSt3__26locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__212__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}

function setEmtStackMax(i1) {
 i1 = i1 | 0;
 EMT_STACK_MAX = i1;
}

function emtStackRestore(i1) {
 i1 = i1 | 0;
 EMTSTACKTOP = i1;
}

function _pthread_cond_broadcast(i1) {
 i1 = i1 | 0;
 return 0;
}

function b12(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(12);
}

function _pthread_mutex_unlock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___pthread_self_649() {
 return _pthread_self() | 0;
}

function ___pthread_self_421() {
 return _pthread_self() | 0;
}

function ___pthread_self_404() {
 return _pthread_self() | 0;
}

function ___pthread_self_401() {
 return _pthread_self() | 0;
}

function ___pthread_self_397() {
 return _pthread_self() | 0;
}

function ___pthread_self_218() {
 return _pthread_self() | 0;
}

function ___pthread_self_193() {
 return _pthread_self() | 0;
}

function setAsyncState(i1) {
 i1 = i1 | 0;
 asyncState = i1;
}

function _pthread_mutex_lock(i1) {
 i1 = i1 | 0;
 return 0;
}

function __Znam(i1) {
 i1 = i1 | 0;
 return __Znwm(i1) | 0;
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function ___cxa_guard_release(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function __ZNSt8bad_castD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function ___ofl_lock() {
 ___lock(20348);
 return 20356;
}

function getEmtStackMax() {
 return EMT_STACK_MAX | 0;
}

function ___ofl_unlock() {
 ___unlock(20348);
 return;
}

function b0(i1) {
 i1 = i1 | 0;
 abort(0);
 return 0;
}

function _dummy(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 1;
}

function emterpret(i1) {
 i1 = i1 | 0;
 assert(0);
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function ___ctype_toupper_loc() {
 return 8972;
}

function ___ctype_tolower_loc() {
 return 8976;
}

function ___errno_location() {
 return 20280;
}

function stackSave() {
 return STACKTOP | 0;
}

function b11(i1) {
 i1 = i1 | 0;
 abort(11);
}

function ___ctype_b_loc() {
 return 8980;
}

function _pthread_self() {
 return 8720;
}

function _dummy_705() {
 return;
}

function b10() {
 abort(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv
,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv
,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,b0];
var FUNCTION_TABLE_iii = [b1,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,___stdio_read,___stdio_seek,___stdio_write,___stdout_write,_sn_write,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b3,b3];
var FUNCTION_TABLE_iiiiid = [b4,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiiid = [b6,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b6];
var FUNCTION_TABLE_iiiiiii = [b7,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiii = [b8,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8];
var FUNCTION_TABLE_iiiiiiiii = [b9,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_v = [b10,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b10];
var FUNCTION_TABLE_vi = [b11,__ZNSt3__213basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev
,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev
,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_vii = [b12,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv
,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viii = [b13];
var FUNCTION_TABLE_viiii = [b14,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiii = [b15,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b16,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b16,b16,b16,b16,b16,b16,b16];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, emtStackRestore: emtStackRestore, emtStackSave: emtStackSave, emterpret: emterpret, establishStackSpace: establishStackSpace, getEmtStackMax: getEmtStackMax, globalCtors: globalCtors, setAsyncState: setAsyncState, setEmtStackMax: setEmtStackMax, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {  return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments) };
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {  return Module["asm"]["___cxa_can_catch"].apply(null, arguments) };
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___muldi3 = Module["___muldi3"] = function() {  return Module["asm"]["___muldi3"].apply(null, arguments) };
var ___udivdi3 = Module["___udivdi3"] = function() {  return Module["asm"]["___udivdi3"].apply(null, arguments) };
var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments) };
var _bitshift64Shl = Module["_bitshift64Shl"] = function() {  return Module["asm"]["_bitshift64Shl"].apply(null, arguments) };
var _free = Module["_free"] = function() {  return Module["asm"]["_free"].apply(null, arguments) };
var _i64Add = Module["_i64Add"] = function() {  return Module["asm"]["_i64Add"].apply(null, arguments) };
var _i64Subtract = Module["_i64Subtract"] = function() {  return Module["asm"]["_i64Subtract"].apply(null, arguments) };
var _main = Module["_main"] = function() {  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {  return Module["asm"]["_memmove"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {  return Module["asm"]["_memset"].apply(null, arguments) };
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {  return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {  return Module["asm"]["_sbrk"].apply(null, arguments) };
var emtStackRestore = Module["emtStackRestore"] = function() {  return Module["asm"]["emtStackRestore"].apply(null, arguments) };
var emtStackSave = Module["emtStackSave"] = function() {  return Module["asm"]["emtStackSave"].apply(null, arguments) };
var emterpret = Module["emterpret"] = function() {  return Module["asm"]["emterpret"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getEmtStackMax = Module["getEmtStackMax"] = function() {  return Module["asm"]["getEmtStackMax"].apply(null, arguments) };
var globalCtors = Module["globalCtors"] = function() {  return Module["asm"]["globalCtors"].apply(null, arguments) };
var setAsyncState = Module["setAsyncState"] = function() {  return Module["asm"]["setAsyncState"].apply(null, arguments) };
var setEmtStackMax = Module["setEmtStackMax"] = function() {  return Module["asm"]["setEmtStackMax"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments) };
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments) };
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments) };
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {  return Module["asm"]["dynCall_viiiii"].apply(null, arguments) };
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;








Module["getMemory"] = getMemory;























Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;


Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;































// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state !== 1) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}





// Attach the file system
Module['FS'] = FS;
Module['IDBFS'] = IDBFS;




