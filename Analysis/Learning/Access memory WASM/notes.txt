getValue() & setValue()
---------------------------------------------------------------------------------------
You can get the value of certain addresses in memory by using the getValue(addr, type) method. 
	'addr' is the address in memory to read from 
	'type' specifies the type of data that should be returned to JS and should be set to a string that specifies a LLVM datatype. 
		The LLVM datatype's that can be passed as 'type' are specified in https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#access-memory-from-javascript

You can set the value of certain addresses in memory with setValue(addr, value, type). 
	
Manually setting the heap
---------------------------------------------------------------------------------------
Another method of editing memory is editing Emscriptens virtual memory. Emscripten treats its memory like a huge array where the indices are memory addresses. The following example code illustrates how to edit Emscriptens virtual memory.

manipulateHeap.js: Allocates an integer array with 5 elements, passes the pointer to that array as an arguement for a C method and gets the result.
Module.onRuntimeInitialized = function()
{
	// Create new typed array initialized to [1,2,3,40000,5]
	// You can also use Float32Array, or any other TypeArray
	// Keep in mind that you need to use the correctly sized TypeArray
	// To align with the size of the C datatype of what you are setting
	let data = new Int32Array([1,2,3,4,5])

	// Allocate block of memory for array and get address of the block
	let ptr = Module._malloc(data.BYTES_PER_ELEMENT * data.length)

	// Set the block of memory to the int array
	// You NEED to use 'new Uint8Array(data.buffer)' to wrap 'data'
	// because you are setting data in HEAPU8 which requires a view
	// to an unsigned byte-sized int array
	//
	// So if you used HEAP8 instead of HEAPU8, you would use 
	// 'new Int8Array' instead
	Module.HEAPU8.set(new Uint8Array(data.buffer), ptr);

	// Call sum_arr() with pointer to array
	// Should print '1 2 3 4 5' and return the sum of all the numbers in 'data'
	Module.cwrap('sum_arr', 'number', ['number', 'number'])(ptr, 5)
}

main.c: Contains the method being called by 'manipulateHeap.js'
#include <emscripten.h>
#include <stdio.h>

// Method being called by JS
EMSCRIPTEN_KEEPALIVE
int sum_arr(int* arr, int length)
{
	int sum = 0; 

	for(int i = 0; i < length; i++)
	{
		printf("%d\n", arr[i]);
		sum += arr[i];
	}
	
	return sum;
}